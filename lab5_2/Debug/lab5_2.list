
lab5_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800407c  0800407c  0001407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040ac  080040ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080040ac  080040ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040ac  080040ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000418  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000424  20000424  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012336  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002307  00000000  00000000  00032372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  00034680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd0  00000000  00000000  00035720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dade  00000000  00000000  000366f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000141a4  00000000  00000000  000541ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4f71  00000000  00000000  00068372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011d2e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000475c  00000000  00000000  0011d334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004064 	.word	0x08004064

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004064 	.word	0x08004064

080001c8 <buzzerInit>:
/* USER CODE BEGIN 0 */

TIM_HandleTypeDef *buzzerPwmTimer;
uint32_t buzzerPwmChannel;

void buzzerInit() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    buzzerPwmTimer = &htim1;
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <buzzerInit+0x24>)
 80001ce:	4a08      	ldr	r2, [pc, #32]	; (80001f0 <buzzerInit+0x28>)
 80001d0:	601a      	str	r2, [r3, #0]
    buzzerPwmChannel = TIM_CHANNEL_1;
 80001d2:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <buzzerInit+0x2c>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Start(buzzerPwmTimer, buzzerPwmChannel);
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <buzzerInit+0x24>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <buzzerInit+0x2c>)
 80001de:	6812      	ldr	r2, [r2, #0]
 80001e0:	4611      	mov	r1, r2
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fed4 	bl	8002f90 <HAL_TIM_PWM_Start>
}
 80001e8:	bf00      	nop
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	20000418 	.word	0x20000418
 80001f0:	200000e0 	.word	0x200000e0
 80001f4:	2000041c 	.word	0x2000041c

080001f8 <buzzerChangeTone>:

void buzzerChangeTone(uint16_t freq, uint16_t volume) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b088      	sub	sp, #32
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	80fb      	strh	r3, [r7, #6]
 8000204:	4613      	mov	r3, r2
 8000206:	80bb      	strh	r3, [r7, #4]
    if (freq == 0 || freq > 20000) {
 8000208:	88fb      	ldrh	r3, [r7, #6]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d004      	beq.n	8000218 <buzzerChangeTone+0x20>
 800020e:	88fb      	ldrh	r3, [r7, #6]
 8000210:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000214:	4293      	cmp	r3, r2
 8000216:	d937      	bls.n	8000288 <buzzerChangeTone+0x90>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, 0);
 8000218:	4b52      	ldr	r3, [pc, #328]	; (8000364 <buzzerChangeTone+0x16c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d105      	bne.n	800022c <buzzerChangeTone+0x34>
 8000220:	4b51      	ldr	r3, [pc, #324]	; (8000368 <buzzerChangeTone+0x170>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2200      	movs	r2, #0
 8000228:	635a      	str	r2, [r3, #52]	; 0x34
 800022a:	e096      	b.n	800035a <buzzerChangeTone+0x162>
 800022c:	4b4d      	ldr	r3, [pc, #308]	; (8000364 <buzzerChangeTone+0x16c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b04      	cmp	r3, #4
 8000232:	d105      	bne.n	8000240 <buzzerChangeTone+0x48>
 8000234:	4b4c      	ldr	r3, [pc, #304]	; (8000368 <buzzerChangeTone+0x170>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	2300      	movs	r3, #0
 800023c:	6393      	str	r3, [r2, #56]	; 0x38
 800023e:	e08c      	b.n	800035a <buzzerChangeTone+0x162>
 8000240:	4b48      	ldr	r3, [pc, #288]	; (8000364 <buzzerChangeTone+0x16c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b08      	cmp	r3, #8
 8000246:	d105      	bne.n	8000254 <buzzerChangeTone+0x5c>
 8000248:	4b47      	ldr	r3, [pc, #284]	; (8000368 <buzzerChangeTone+0x170>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	2300      	movs	r3, #0
 8000250:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000252:	e082      	b.n	800035a <buzzerChangeTone+0x162>
 8000254:	4b43      	ldr	r3, [pc, #268]	; (8000364 <buzzerChangeTone+0x16c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b0c      	cmp	r3, #12
 800025a:	d105      	bne.n	8000268 <buzzerChangeTone+0x70>
 800025c:	4b42      	ldr	r3, [pc, #264]	; (8000368 <buzzerChangeTone+0x170>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	6413      	str	r3, [r2, #64]	; 0x40
 8000266:	e078      	b.n	800035a <buzzerChangeTone+0x162>
 8000268:	4b3e      	ldr	r3, [pc, #248]	; (8000364 <buzzerChangeTone+0x16c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b10      	cmp	r3, #16
 800026e:	d105      	bne.n	800027c <buzzerChangeTone+0x84>
 8000270:	4b3d      	ldr	r3, [pc, #244]	; (8000368 <buzzerChangeTone+0x170>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	2300      	movs	r3, #0
 8000278:	6593      	str	r3, [r2, #88]	; 0x58
 800027a:	e06e      	b.n	800035a <buzzerChangeTone+0x162>
 800027c:	4b3a      	ldr	r3, [pc, #232]	; (8000368 <buzzerChangeTone+0x170>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	681a      	ldr	r2, [r3, #0]
 8000282:	2300      	movs	r3, #0
 8000284:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000286:	e068      	b.n	800035a <buzzerChangeTone+0x162>
    } else {
        const uint32_t internalClockFreq = HAL_RCC_GetSysClockFreq();
 8000288:	f002 fb04 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 800028c:	61f8      	str	r0, [r7, #28]
        const uint32_t prescaler = 1 + internalClockFreq / freq / 60000;
 800028e:	88fb      	ldrh	r3, [r7, #6]
 8000290:	69fa      	ldr	r2, [r7, #28]
 8000292:	fbb2 f3f3 	udiv	r3, r2, r3
 8000296:	4a35      	ldr	r2, [pc, #212]	; (800036c <buzzerChangeTone+0x174>)
 8000298:	fba2 2303 	umull	r2, r3, r2, r3
 800029c:	0b9b      	lsrs	r3, r3, #14
 800029e:	3301      	adds	r3, #1
 80002a0:	61bb      	str	r3, [r7, #24]
        const uint32_t timerClock = internalClockFreq / prescaler;
 80002a2:	69fa      	ldr	r2, [r7, #28]
 80002a4:	69bb      	ldr	r3, [r7, #24]
 80002a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002aa:	617b      	str	r3, [r7, #20]
        const uint32_t periodCycles = timerClock / freq;
 80002ac:	88fb      	ldrh	r3, [r7, #6]
 80002ae:	697a      	ldr	r2, [r7, #20]
 80002b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b4:	613b      	str	r3, [r7, #16]
        const uint32_t pulseWidth = volume * periodCycles / 1000 / 2;
 80002b6:	88bb      	ldrh	r3, [r7, #4]
 80002b8:	693a      	ldr	r2, [r7, #16]
 80002ba:	fb02 f303 	mul.w	r3, r2, r3
 80002be:	4a2c      	ldr	r2, [pc, #176]	; (8000370 <buzzerChangeTone+0x178>)
 80002c0:	fba2 2303 	umull	r2, r3, r2, r3
 80002c4:	09db      	lsrs	r3, r3, #7
 80002c6:	60fb      	str	r3, [r7, #12]

        buzzerPwmTimer->Instance->PSC = prescaler - 1;
 80002c8:	4b27      	ldr	r3, [pc, #156]	; (8000368 <buzzerChangeTone+0x170>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	69ba      	ldr	r2, [r7, #24]
 80002d0:	3a01      	subs	r2, #1
 80002d2:	629a      	str	r2, [r3, #40]	; 0x28
        buzzerPwmTimer->Instance->ARR = periodCycles - 1;
 80002d4:	4b24      	ldr	r3, [pc, #144]	; (8000368 <buzzerChangeTone+0x170>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	693a      	ldr	r2, [r7, #16]
 80002dc:	3a01      	subs	r2, #1
 80002de:	62da      	str	r2, [r3, #44]	; 0x2c
        buzzerPwmTimer->Instance->EGR = TIM_EGR_UG;
 80002e0:	4b21      	ldr	r3, [pc, #132]	; (8000368 <buzzerChangeTone+0x170>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2201      	movs	r2, #1
 80002e8:	615a      	str	r2, [r3, #20]

        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 80002ea:	4b1e      	ldr	r3, [pc, #120]	; (8000364 <buzzerChangeTone+0x16c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d105      	bne.n	80002fe <buzzerChangeTone+0x106>
 80002f2:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <buzzerChangeTone+0x170>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	68fa      	ldr	r2, [r7, #12]
 80002fa:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 80002fc:	e02d      	b.n	800035a <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 80002fe:	4b19      	ldr	r3, [pc, #100]	; (8000364 <buzzerChangeTone+0x16c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b04      	cmp	r3, #4
 8000304:	d105      	bne.n	8000312 <buzzerChangeTone+0x11a>
 8000306:	4b18      	ldr	r3, [pc, #96]	; (8000368 <buzzerChangeTone+0x170>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000310:	e023      	b.n	800035a <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8000312:	4b14      	ldr	r3, [pc, #80]	; (8000364 <buzzerChangeTone+0x16c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b08      	cmp	r3, #8
 8000318:	d105      	bne.n	8000326 <buzzerChangeTone+0x12e>
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <buzzerChangeTone+0x170>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000324:	e019      	b.n	800035a <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8000326:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <buzzerChangeTone+0x16c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b0c      	cmp	r3, #12
 800032c:	d105      	bne.n	800033a <buzzerChangeTone+0x142>
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <buzzerChangeTone+0x170>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000338:	e00f      	b.n	800035a <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <buzzerChangeTone+0x16c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2b10      	cmp	r3, #16
 8000340:	d105      	bne.n	800034e <buzzerChangeTone+0x156>
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <buzzerChangeTone+0x170>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800034c:	e005      	b.n	800035a <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <buzzerChangeTone+0x170>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000358:	e7ff      	b.n	800035a <buzzerChangeTone+0x162>
 800035a:	bf00      	nop
 800035c:	3720      	adds	r7, #32
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	2000041c 	.word	0x2000041c
 8000368:	20000418 	.word	0x20000418
 800036c:	45e7b273 	.word	0x45e7b273
 8000370:	10624dd3 	.word	0x10624dd3

08000374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  buzzerInit();
 8000378:	f7ff ff26 	bl	80001c8 <buzzerInit>
  buzzerChangeTone(500, 10);
 800037c:	210a      	movs	r1, #10
 800037e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000382:	f7ff ff39 	bl	80001f8 <buzzerChangeTone>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000386:	f000 fbf5 	bl	8000b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038a:	f000 f813 	bl	80003b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038e:	f000 f9c1 	bl	8000714 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000392:	f000 f873 	bl	800047c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000396:	f000 f8b1 	bl	80004fc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800039a:	f000 f999 	bl	80006d0 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 800039e:	f000 f8eb 	bl	8000578 <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80003a2:	2201      	movs	r2, #1
 80003a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a8:	4801      	ldr	r0, [pc, #4]	; (80003b0 <main+0x3c>)
 80003aa:	f000 fea9 	bl	8001100 <HAL_GPIO_WritePin>
 80003ae:	e7f8      	b.n	80003a2 <main+0x2e>
 80003b0:	48001000 	.word	0x48001000

080003b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b09e      	sub	sp, #120	; 0x78
 80003b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003be:	2228      	movs	r2, #40	; 0x28
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f003 fe46 	bl	8004054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d8:	463b      	mov	r3, r7
 80003da:	223c      	movs	r2, #60	; 0x3c
 80003dc:	2100      	movs	r1, #0
 80003de:	4618      	mov	r0, r3
 80003e0:	f003 fe38 	bl	8004054 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80003e4:	2303      	movs	r3, #3
 80003e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f2:	2301      	movs	r3, #1
 80003f4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f6:	2310      	movs	r3, #16
 80003f8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fa:	2302      	movs	r3, #2
 80003fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000402:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000404:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000408:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800040e:	4618      	mov	r0, r3
 8000410:	f001 f886 	bl	8001520 <HAL_RCC_OscConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800041a:	f000 f9f9 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041e:	230f      	movs	r3, #15
 8000420:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000422:	2302      	movs	r3, #2
 8000424:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000426:	2300      	movs	r3, #0
 8000428:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800042a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000434:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000438:	2101      	movs	r1, #1
 800043a:	4618      	mov	r0, r3
 800043c:	f002 f8ae 	bl	800259c <HAL_RCC_ClockConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000446:	f000 f9e3 	bl	8000810 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <SystemClock_Config+0xc4>)
 800044c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800044e:	2300      	movs	r3, #0
 8000450:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000452:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000456:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000458:	2300      	movs	r3, #0
 800045a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800045c:	463b      	mov	r3, r7
 800045e:	4618      	mov	r0, r3
 8000460:	f002 fa82 	bl	8002968 <HAL_RCCEx_PeriphCLKConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800046a:	f000 f9d1 	bl	8000810 <Error_Handler>
  }
}
 800046e:	bf00      	nop
 8000470:	3778      	adds	r7, #120	; 0x78
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	00021020 	.word	0x00021020

0800047c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <MX_I2C1_Init+0x74>)
 8000482:	4a1c      	ldr	r2, [pc, #112]	; (80004f4 <MX_I2C1_Init+0x78>)
 8000484:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000486:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <MX_I2C1_Init+0x74>)
 8000488:	4a1b      	ldr	r2, [pc, #108]	; (80004f8 <MX_I2C1_Init+0x7c>)
 800048a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800048c:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <MX_I2C1_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000492:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <MX_I2C1_Init+0x74>)
 8000494:	2201      	movs	r2, #1
 8000496:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <MX_I2C1_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800049e:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004aa:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004b6:	480e      	ldr	r0, [pc, #56]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004b8:	f000 fe3a 	bl	8001130 <HAL_I2C_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004c2:	f000 f9a5 	bl	8000810 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004c6:	2100      	movs	r1, #0
 80004c8:	4809      	ldr	r0, [pc, #36]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004ca:	f000 fec0 	bl	800124e <HAL_I2CEx_ConfigAnalogFilter>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004d4:	f000 f99c 	bl	8000810 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004d8:	2100      	movs	r1, #0
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <MX_I2C1_Init+0x74>)
 80004dc:	f000 ff02 	bl	80012e4 <HAL_I2CEx_ConfigDigitalFilter>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004e6:	f000 f993 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000028 	.word	0x20000028
 80004f4:	40005400 	.word	0x40005400
 80004f8:	2000090e 	.word	0x2000090e

080004fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <MX_SPI1_Init+0x74>)
 8000502:	4a1c      	ldr	r2, [pc, #112]	; (8000574 <MX_SPI1_Init+0x78>)
 8000504:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <MX_SPI1_Init+0x74>)
 8000508:	f44f 7282 	mov.w	r2, #260	; 0x104
 800050c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_SPI1_Init+0x74>)
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <MX_SPI1_Init+0x74>)
 8000516:	f44f 7240 	mov.w	r2, #768	; 0x300
 800051a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_SPI1_Init+0x74>)
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <MX_SPI1_Init+0x74>)
 8000524:	2200      	movs	r2, #0
 8000526:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_SPI1_Init+0x74>)
 800052a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800052e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_SPI1_Init+0x74>)
 8000532:	2208      	movs	r2, #8
 8000534:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_SPI1_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_SPI1_Init+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <MX_SPI1_Init+0x74>)
 8000544:	2200      	movs	r2, #0
 8000546:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_SPI1_Init+0x74>)
 800054a:	2207      	movs	r2, #7
 800054c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <MX_SPI1_Init+0x74>)
 8000550:	2200      	movs	r2, #0
 8000552:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_SPI1_Init+0x74>)
 8000556:	2208      	movs	r2, #8
 8000558:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800055a:	4805      	ldr	r0, [pc, #20]	; (8000570 <MX_SPI1_Init+0x74>)
 800055c:	f002 fbb4 	bl	8002cc8 <HAL_SPI_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000566:	f000 f953 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000007c 	.word	0x2000007c
 8000574:	40013000 	.word	0x40013000

08000578 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b09a      	sub	sp, #104	; 0x68
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800057e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800058c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000598:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
 80005a8:	615a      	str	r2, [r3, #20]
 80005aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	222c      	movs	r2, #44	; 0x2c
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 fd4e 	bl	8004054 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005b8:	4b43      	ldr	r3, [pc, #268]	; (80006c8 <MX_TIM1_Init+0x150>)
 80005ba:	4a44      	ldr	r2, [pc, #272]	; (80006cc <MX_TIM1_Init+0x154>)
 80005bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005be:	4b42      	ldr	r3, [pc, #264]	; (80006c8 <MX_TIM1_Init+0x150>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c4:	4b40      	ldr	r3, [pc, #256]	; (80006c8 <MX_TIM1_Init+0x150>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005ca:	4b3f      	ldr	r3, [pc, #252]	; (80006c8 <MX_TIM1_Init+0x150>)
 80005cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d2:	4b3d      	ldr	r3, [pc, #244]	; (80006c8 <MX_TIM1_Init+0x150>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005d8:	4b3b      	ldr	r3, [pc, #236]	; (80006c8 <MX_TIM1_Init+0x150>)
 80005da:	2200      	movs	r2, #0
 80005dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005de:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <MX_TIM1_Init+0x150>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005e4:	4838      	ldr	r0, [pc, #224]	; (80006c8 <MX_TIM1_Init+0x150>)
 80005e6:	f002 fc1a 	bl	8002e1e <HAL_TIM_Base_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80005f0:	f000 f90e 	bl	8000810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005fe:	4619      	mov	r1, r3
 8000600:	4831      	ldr	r0, [pc, #196]	; (80006c8 <MX_TIM1_Init+0x150>)
 8000602:	f002 fed9 	bl	80033b8 <HAL_TIM_ConfigClockSource>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800060c:	f000 f900 	bl	8000810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000610:	482d      	ldr	r0, [pc, #180]	; (80006c8 <MX_TIM1_Init+0x150>)
 8000612:	f002 fc5b 	bl	8002ecc <HAL_TIM_PWM_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800061c:	f000 f8f8 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000620:	2300      	movs	r3, #0
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000624:	2300      	movs	r3, #0
 8000626:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000628:	2300      	movs	r3, #0
 800062a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800062c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000630:	4619      	mov	r1, r3
 8000632:	4825      	ldr	r0, [pc, #148]	; (80006c8 <MX_TIM1_Init+0x150>)
 8000634:	f003 fbb0 	bl	8003d98 <HAL_TIMEx_MasterConfigSynchronization>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800063e:	f000 f8e7 	bl	8000810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000642:	2360      	movs	r3, #96	; 0x60
 8000644:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800064a:	2300      	movs	r3, #0
 800064c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800064e:	2300      	movs	r3, #0
 8000650:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000652:	2300      	movs	r3, #0
 8000654:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000656:	2300      	movs	r3, #0
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800065a:	2300      	movs	r3, #0
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800065e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000662:	2200      	movs	r2, #0
 8000664:	4619      	mov	r1, r3
 8000666:	4818      	ldr	r0, [pc, #96]	; (80006c8 <MX_TIM1_Init+0x150>)
 8000668:	f002 fd92 	bl	8003190 <HAL_TIM_PWM_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000672:	f000 f8cd 	bl	8000810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800068a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4619      	mov	r1, r3
 80006aa:	4807      	ldr	r0, [pc, #28]	; (80006c8 <MX_TIM1_Init+0x150>)
 80006ac:	f003 fbf4 	bl	8003e98 <HAL_TIMEx_ConfigBreakDeadTime>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80006b6:	f000 f8ab 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006ba:	4803      	ldr	r0, [pc, #12]	; (80006c8 <MX_TIM1_Init+0x150>)
 80006bc:	f000 f978 	bl	80009b0 <HAL_TIM_MspPostInit>

}
 80006c0:	bf00      	nop
 80006c2:	3768      	adds	r7, #104	; 0x68
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200000e0 	.word	0x200000e0
 80006cc:	40012c00 	.word	0x40012c00

080006d0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006d4:	4b0d      	ldr	r3, [pc, #52]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <MX_USB_PCD_Init+0x40>)
 80006d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006dc:	2208      	movs	r2, #8
 80006de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006e2:	2202      	movs	r2, #2
 80006e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_USB_PCD_Init+0x3c>)
 80006fa:	f000 fe3f 	bl	800137c <HAL_PCD_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000704:	f000 f884 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000012c 	.word	0x2000012c
 8000710:	40005c00 	.word	0x40005c00

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072a:	4b37      	ldr	r3, [pc, #220]	; (8000808 <MX_GPIO_Init+0xf4>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a36      	ldr	r2, [pc, #216]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	4b34      	ldr	r3, [pc, #208]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	4b31      	ldr	r3, [pc, #196]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	4a30      	ldr	r2, [pc, #192]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000748:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800074c:	6153      	str	r3, [r2, #20]
 800074e:	4b2e      	ldr	r3, [pc, #184]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_GPIO_Init+0xf4>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	4a2a      	ldr	r2, [pc, #168]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000760:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000764:	6153      	str	r3, [r2, #20]
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a24      	ldr	r2, [pc, #144]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b22      	ldr	r3, [pc, #136]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_GPIO_Init+0xf4>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	4a1e      	ldr	r2, [pc, #120]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000794:	6153      	str	r3, [r2, #20]
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_GPIO_Init+0xf4>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80007a2:	2200      	movs	r2, #0
 80007a4:	f64f 7108 	movw	r1, #65288	; 0xff08
 80007a8:	4818      	ldr	r0, [pc, #96]	; (800080c <MX_GPIO_Init+0xf8>)
 80007aa:	f000 fca9 	bl	8001100 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80007ae:	2337      	movs	r3, #55	; 0x37
 80007b0:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007b2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4812      	ldr	r0, [pc, #72]	; (800080c <MX_GPIO_Init+0xf8>)
 80007c4:	f000 fb22 	bl	8000e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80007c8:	f64f 7308 	movw	r3, #65288	; 0xff08
 80007cc:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	480a      	ldr	r0, [pc, #40]	; (800080c <MX_GPIO_Init+0xf8>)
 80007e2:	f000 fb13 	bl	8000e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e6:	2301      	movs	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f000 fb06 	bl	8000e0c <HAL_GPIO_Init>

}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	48001000 	.word	0x48001000

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_MspInit+0x44>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <HAL_MspInit+0x44>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6193      	str	r3, [r2, #24]
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_MspInit+0x44>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_MspInit+0x44>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_MspInit+0x44>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	61d3      	str	r3, [r2, #28]
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_MspInit+0x44>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000852:	2007      	movs	r0, #7
 8000854:	f000 faa6 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <HAL_I2C_MspInit+0x7c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d127      	bne.n	80008d6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <HAL_I2C_MspInit+0x80>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <HAL_I2C_MspInit+0x80>)
 800088c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_I2C_MspInit+0x80>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800089e:	23c0      	movs	r3, #192	; 0xc0
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a2:	2312      	movs	r3, #18
 80008a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ae:	2304      	movs	r3, #4
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	480b      	ldr	r0, [pc, #44]	; (80008e8 <HAL_I2C_MspInit+0x84>)
 80008ba:	f000 faa7 	bl	8000e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_I2C_MspInit+0x80>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_I2C_MspInit+0x80>)
 80008c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_I2C_MspInit+0x80>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40005400 	.word	0x40005400
 80008e4:	40021000 	.word	0x40021000
 80008e8:	48000400 	.word	0x48000400

080008ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a17      	ldr	r2, [pc, #92]	; (8000968 <HAL_SPI_MspInit+0x7c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d128      	bne.n	8000960 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <HAL_SPI_MspInit+0x80>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4a16      	ldr	r2, [pc, #88]	; (800096c <HAL_SPI_MspInit+0x80>)
 8000914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000918:	6193      	str	r3, [r2, #24]
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_SPI_MspInit+0x80>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_SPI_MspInit+0x80>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <HAL_SPI_MspInit+0x80>)
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	6153      	str	r3, [r2, #20]
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_SPI_MspInit+0x80>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800093e:	23e0      	movs	r3, #224	; 0xe0
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800094e:	2305      	movs	r3, #5
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095c:	f000 fa56 	bl	8000e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	; 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40013000 	.word	0x40013000
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <HAL_TIM_Base_MspInit+0x38>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d10b      	bne.n	800099a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <HAL_TIM_Base_MspInit+0x3c>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4a09      	ldr	r2, [pc, #36]	; (80009ac <HAL_TIM_Base_MspInit+0x3c>)
 8000988:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800098c:	6193      	str	r3, [r2, #24]
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <HAL_TIM_Base_MspInit+0x3c>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40012c00 	.word	0x40012c00
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <HAL_TIM_MspPostInit+0x68>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d11d      	bne.n	8000a0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_TIM_MspPostInit+0x6c>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a11      	ldr	r2, [pc, #68]	; (8000a1c <HAL_TIM_MspPostInit+0x6c>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_TIM_MspPostInit+0x6c>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80009fc:	2306      	movs	r3, #6
 80009fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4619      	mov	r1, r3
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0a:	f000 f9ff 	bl	8000e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a0e:	bf00      	nop
 8000a10:	3720      	adds	r7, #32
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40012c00 	.word	0x40012c00
 8000a1c:	40021000 	.word	0x40021000

08000a20 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <HAL_PCD_MspInit+0x80>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d129      	bne.n	8000a96 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <HAL_PCD_MspInit+0x84>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <HAL_PCD_MspInit+0x84>)
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	6153      	str	r3, [r2, #20]
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_PCD_MspInit+0x84>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000a5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a6c:	230e      	movs	r3, #14
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f000 f9c7 	bl	8000e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_PCD_MspInit+0x84>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <HAL_PCD_MspInit+0x84>)
 8000a84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a88:	61d3      	str	r3, [r2, #28]
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_PCD_MspInit+0x84>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	; 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40005c00 	.word	0x40005c00
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 f884 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <SystemInit+0x20>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <SystemInit+0x20>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b58 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b24:	f7ff ffea 	bl	8000afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b28:	480c      	ldr	r0, [pc, #48]	; (8000b5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b2a:	490d      	ldr	r1, [pc, #52]	; (8000b60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <LoopForever+0xe>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b40:	4c0a      	ldr	r4, [pc, #40]	; (8000b6c <LoopForever+0x16>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f003 fa5d 	bl	800400c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b52:	f7ff fc0f 	bl	8000374 <main>

08000b56 <LoopForever>:

LoopForever:
    b LoopForever
 8000b56:	e7fe      	b.n	8000b56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b58:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b64:	080040b4 	.word	0x080040b4
  ldr r2, =_sbss
 8000b68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b6c:	20000424 	.word	0x20000424

08000b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC1_2_IRQHandler>
	...

08000b74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_Init+0x28>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_Init+0x28>)
 8000b7e:	f043 0310 	orr.w	r3, r3, #16
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 f90d 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 f808 	bl	8000ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b90:	f7ff fe44 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40022000 	.word	0x40022000

08000ba0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0x54>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_InitTick+0x58>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f917 	bl	8000df2 <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00e      	b.n	8000bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d80a      	bhi.n	8000bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f8ed 	bl	8000dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be0:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <HAL_InitTick+0x5c>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000004 	.word	0x20000004

08000c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20000420 	.word	0x20000420

08000c28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000420 	.word	0x20000420

08000c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f1c3 0307 	rsb	r3, r3, #7
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	bf28      	it	cs
 8000d16:	2304      	movcs	r3, #4
 8000d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d902      	bls.n	8000d28 <NVIC_EncodePriority+0x30>
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b03      	subs	r3, #3
 8000d26:	e000      	b.n	8000d2a <NVIC_EncodePriority+0x32>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43d9      	mvns	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	4313      	orrs	r3, r2
         );
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	; 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d70:	d301      	bcc.n	8000d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00f      	b.n	8000d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <SysTick_Config+0x40>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7e:	210f      	movs	r1, #15
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f7ff ff8e 	bl	8000ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <SysTick_Config+0x40>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SysTick_Config+0x40>)
 8000d90:	2207      	movs	r2, #7
 8000d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ff47 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dcc:	f7ff ff5c 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	6978      	ldr	r0, [r7, #20]
 8000dd8:	f7ff ff8e 	bl	8000cf8 <NVIC_EncodePriority>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff5d 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffb0 	bl	8000d60 <SysTick_Config>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1a:	e154      	b.n	80010c6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	2101      	movs	r1, #1
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 8146 	beq.w	80010c0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d005      	beq.n	8000e4c <HAL_GPIO_Init+0x40>
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d130      	bne.n	8000eae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e82:	2201      	movs	r2, #1
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	091b      	lsrs	r3, r3, #4
 8000e98:	f003 0201 	and.w	r2, r3, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d017      	beq.n	8000eea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d123      	bne.n	8000f3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3208      	adds	r2, #8
 8000efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	691a      	ldr	r2, [r3, #16]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	6939      	ldr	r1, [r7, #16]
 8000f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0203 	and.w	r2, r3, #3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 80a0 	beq.w	80010c0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f80:	4b58      	ldr	r3, [pc, #352]	; (80010e4 <HAL_GPIO_Init+0x2d8>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a57      	ldr	r2, [pc, #348]	; (80010e4 <HAL_GPIO_Init+0x2d8>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b55      	ldr	r3, [pc, #340]	; (80010e4 <HAL_GPIO_Init+0x2d8>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f98:	4a53      	ldr	r2, [pc, #332]	; (80010e8 <HAL_GPIO_Init+0x2dc>)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fc2:	d019      	beq.n	8000ff8 <HAL_GPIO_Init+0x1ec>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a49      	ldr	r2, [pc, #292]	; (80010ec <HAL_GPIO_Init+0x2e0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d013      	beq.n	8000ff4 <HAL_GPIO_Init+0x1e8>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a48      	ldr	r2, [pc, #288]	; (80010f0 <HAL_GPIO_Init+0x2e4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d00d      	beq.n	8000ff0 <HAL_GPIO_Init+0x1e4>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a47      	ldr	r2, [pc, #284]	; (80010f4 <HAL_GPIO_Init+0x2e8>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d007      	beq.n	8000fec <HAL_GPIO_Init+0x1e0>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a46      	ldr	r2, [pc, #280]	; (80010f8 <HAL_GPIO_Init+0x2ec>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d101      	bne.n	8000fe8 <HAL_GPIO_Init+0x1dc>
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	e008      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000fe8:	2305      	movs	r3, #5
 8000fea:	e006      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000fec:	2303      	movs	r3, #3
 8000fee:	e004      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e002      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <HAL_GPIO_Init+0x1ee>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	f002 0203 	and.w	r2, r2, #3
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	4093      	lsls	r3, r2
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800100a:	4937      	ldr	r1, [pc, #220]	; (80010e8 <HAL_GPIO_Init+0x2dc>)
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001018:	4b38      	ldr	r3, [pc, #224]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800103c:	4a2f      	ldr	r2, [pc, #188]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001042:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001066:	4a25      	ldr	r2, [pc, #148]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800106c:	4b23      	ldr	r3, [pc, #140]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001090:	4a1a      	ldr	r2, [pc, #104]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3301      	adds	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	fa22 f303 	lsr.w	r3, r2, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f47f aea3 	bne.w	8000e1c <HAL_GPIO_Init+0x10>
  }
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	371c      	adds	r7, #28
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010000 	.word	0x40010000
 80010ec:	48000400 	.word	0x48000400
 80010f0:	48000800 	.word	0x48000800
 80010f4:	48000c00 	.word	0x48000c00
 80010f8:	48001000 	.word	0x48001000
 80010fc:	40010400 	.word	0x40010400

08001100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
 800110c:	4613      	mov	r3, r2
 800110e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001110:	787b      	ldrb	r3, [r7, #1]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800111c:	e002      	b.n	8001124 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e081      	b.n	8001246 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d106      	bne.n	800115c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fb84 	bl	8000864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2224      	movs	r2, #36	; 0x24
 8001160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001180:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001190:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d107      	bne.n	80011aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	e006      	b.n	80011b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d104      	bne.n	80011ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69d9      	ldr	r1, [r3, #28]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1a      	ldr	r2, [r3, #32]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0201 	orr.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2220      	movs	r2, #32
 8001232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b20      	cmp	r3, #32
 8001262:	d138      	bne.n	80012d6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800126e:	2302      	movs	r3, #2
 8001270:	e032      	b.n	80012d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2224      	movs	r2, #36	; 0x24
 800127e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0201 	bic.w	r2, r2, #1
 8001290:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012a0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6819      	ldr	r1, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0201 	orr.w	r2, r2, #1
 80012c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2220      	movs	r2, #32
 80012c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e000      	b.n	80012d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012d6:	2302      	movs	r3, #2
  }
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	d139      	bne.n	800136e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001304:	2302      	movs	r3, #2
 8001306:	e033      	b.n	8001370 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2224      	movs	r2, #36	; 0x24
 8001314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001336:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 0201 	orr.w	r2, r2, #1
 8001358:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2220      	movs	r2, #32
 800135e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800136e:	2302      	movs	r3, #2
  }
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137e:	b08b      	sub	sp, #44	; 0x2c
 8001380:	af06      	add	r7, sp, #24
 8001382:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e0c4      	b.n	8001518 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d106      	bne.n	80013a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fb3c 	bl	8000a20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2203      	movs	r2, #3
 80013ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 fded 	bl	8003f94 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	e040      	b.n	8001442 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	440b      	add	r3, r1
 80013d0:	3301      	adds	r3, #1
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3303      	adds	r3, #3
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3338      	adds	r3, #56	; 0x38
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	333c      	adds	r3, #60	; 0x3c
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	440b      	add	r3, r1
 8001436:	3340      	adds	r3, #64	; 0x40
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	3301      	adds	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	d3b9      	bcc.n	80013c0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e044      	b.n	80014dc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001452:	7bfa      	ldrb	r2, [r7, #15]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	440b      	add	r3, r1
 8001476:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	440b      	add	r3, r1
 80014a2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	440b      	add	r3, r1
 80014ce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	3301      	adds	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d3b5      	bcc.n	8001452 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	687e      	ldr	r6, [r7, #4]
 80014ee:	466d      	mov	r5, sp
 80014f0:	f106 0410 	add.w	r4, r6, #16
 80014f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f8:	6823      	ldr	r3, [r4, #0]
 80014fa:	602b      	str	r3, [r5, #0]
 80014fc:	1d33      	adds	r3, r6, #4
 80014fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001500:	6838      	ldr	r0, [r7, #0]
 8001502:	f002 fd62 	bl	8003fca <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001526:	af00      	add	r7, sp, #0
 8001528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001530:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001536:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	f001 b823 	b.w	800258c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 817d 	beq.w	8001856 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800155c:	4bbc      	ldr	r3, [pc, #752]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b04      	cmp	r3, #4
 8001566:	d00c      	beq.n	8001582 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001568:	4bb9      	ldr	r3, [pc, #740]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b08      	cmp	r3, #8
 8001572:	d15c      	bne.n	800162e <HAL_RCC_OscConfig+0x10e>
 8001574:	4bb6      	ldr	r3, [pc, #728]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001580:	d155      	bne.n	800162e <HAL_RCC_OscConfig+0x10e>
 8001582:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001586:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800158e:	fa93 f3a3 	rbit	r3, r3
 8001592:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001596:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159a:	fab3 f383 	clz	r3, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	095b      	lsrs	r3, r3, #5
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d102      	bne.n	80015b4 <HAL_RCC_OscConfig+0x94>
 80015ae:	4ba8      	ldr	r3, [pc, #672]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	e015      	b.n	80015e0 <HAL_RCC_OscConfig+0xc0>
 80015b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80015c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80015d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80015d4:	fa93 f3a3 	rbit	r3, r3
 80015d8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80015dc:	4b9c      	ldr	r3, [pc, #624]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80015e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80015ec:	fa92 f2a2 	rbit	r2, r2
 80015f0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80015f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80015f8:	fab2 f282 	clz	r2, r2
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	f042 0220 	orr.w	r2, r2, #32
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	f002 021f 	and.w	r2, r2, #31
 8001608:	2101      	movs	r1, #1
 800160a:	fa01 f202 	lsl.w	r2, r1, r2
 800160e:	4013      	ands	r3, r2
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 811f 	beq.w	8001854 <HAL_RCC_OscConfig+0x334>
 8001616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f040 8116 	bne.w	8001854 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	f000 bfaf 	b.w	800258c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800162e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163e:	d106      	bne.n	800164e <HAL_RCC_OscConfig+0x12e>
 8001640:	4b83      	ldr	r3, [pc, #524]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a82      	ldr	r2, [pc, #520]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 8001646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	e036      	b.n	80016bc <HAL_RCC_OscConfig+0x19c>
 800164e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001652:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x158>
 800165e:	4b7c      	ldr	r3, [pc, #496]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a7b      	ldr	r2, [pc, #492]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 8001664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b79      	ldr	r3, [pc, #484]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a78      	ldr	r2, [pc, #480]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 8001670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e021      	b.n	80016bc <HAL_RCC_OscConfig+0x19c>
 8001678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x184>
 800168a:	4b71      	ldr	r3, [pc, #452]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a70      	ldr	r2, [pc, #448]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b6e      	ldr	r3, [pc, #440]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a6d      	ldr	r2, [pc, #436]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0x19c>
 80016a4:	4b6a      	ldr	r3, [pc, #424]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a69      	ldr	r2, [pc, #420]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 80016aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b67      	ldr	r3, [pc, #412]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a66      	ldr	r2, [pc, #408]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 80016b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016bc:	4b64      	ldr	r3, [pc, #400]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	f023 020f 	bic.w	r2, r3, #15
 80016c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	495f      	ldr	r1, [pc, #380]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d059      	beq.n	800179a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff fa9f 	bl	8000c28 <HAL_GetTick>
 80016ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	e00a      	b.n	8001706 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fa9a 	bl	8000c28 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b64      	cmp	r3, #100	; 0x64
 80016fe:	d902      	bls.n	8001706 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	f000 bf43 	b.w	800258c <HAL_RCC_OscConfig+0x106c>
 8001706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800170a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001712:	fa93 f3a3 	rbit	r3, r3
 8001716:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800171a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	fab3 f383 	clz	r3, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	095b      	lsrs	r3, r3, #5
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b01      	cmp	r3, #1
 8001730:	d102      	bne.n	8001738 <HAL_RCC_OscConfig+0x218>
 8001732:	4b47      	ldr	r3, [pc, #284]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	e015      	b.n	8001764 <HAL_RCC_OscConfig+0x244>
 8001738:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800173c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001744:	fa93 f3a3 	rbit	r3, r3
 8001748:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800174c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001750:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001754:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001758:	fa93 f3a3 	rbit	r3, r3
 800175c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001760:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001768:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800176c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001770:	fa92 f2a2 	rbit	r2, r2
 8001774:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001778:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800177c:	fab2 f282 	clz	r2, r2
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	f042 0220 	orr.w	r2, r2, #32
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	f002 021f 	and.w	r2, r2, #31
 800178c:	2101      	movs	r1, #1
 800178e:	fa01 f202 	lsl.w	r2, r1, r2
 8001792:	4013      	ands	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0ab      	beq.n	80016f0 <HAL_RCC_OscConfig+0x1d0>
 8001798:	e05d      	b.n	8001856 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179a:	f7ff fa45 	bl	8000c28 <HAL_GetTick>
 800179e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fa40 	bl	8000c28 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b64      	cmp	r3, #100	; 0x64
 80017b2:	d902      	bls.n	80017ba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	f000 bee9 	b.w	800258c <HAL_RCC_OscConfig+0x106c>
 80017ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017be:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80017ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d102      	bne.n	80017ec <HAL_RCC_OscConfig+0x2cc>
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	e015      	b.n	8001818 <HAL_RCC_OscConfig+0x2f8>
 80017ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80017f8:	fa93 f3a3 	rbit	r3, r3
 80017fc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001804:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001808:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800181c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001820:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001824:	fa92 f2a2 	rbit	r2, r2
 8001828:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800182c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001830:	fab2 f282 	clz	r2, r2
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	f042 0220 	orr.w	r2, r2, #32
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	f002 021f 	and.w	r2, r2, #31
 8001840:	2101      	movs	r1, #1
 8001842:	fa01 f202 	lsl.w	r2, r1, r2
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1ab      	bne.n	80017a4 <HAL_RCC_OscConfig+0x284>
 800184c:	e003      	b.n	8001856 <HAL_RCC_OscConfig+0x336>
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 817d 	beq.w	8001b66 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800186c:	4ba6      	ldr	r3, [pc, #664]	; (8001b08 <HAL_RCC_OscConfig+0x5e8>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00b      	beq.n	8001890 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001878:	4ba3      	ldr	r3, [pc, #652]	; (8001b08 <HAL_RCC_OscConfig+0x5e8>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b08      	cmp	r3, #8
 8001882:	d172      	bne.n	800196a <HAL_RCC_OscConfig+0x44a>
 8001884:	4ba0      	ldr	r3, [pc, #640]	; (8001b08 <HAL_RCC_OscConfig+0x5e8>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d16c      	bne.n	800196a <HAL_RCC_OscConfig+0x44a>
 8001890:	2302      	movs	r3, #2
 8001892:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80018a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a6:	fab3 f383 	clz	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	095b      	lsrs	r3, r3, #5
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d102      	bne.n	80018c0 <HAL_RCC_OscConfig+0x3a0>
 80018ba:	4b93      	ldr	r3, [pc, #588]	; (8001b08 <HAL_RCC_OscConfig+0x5e8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	e013      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c8>
 80018c0:	2302      	movs	r3, #2
 80018c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80018d2:	2302      	movs	r3, #2
 80018d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80018d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80018dc:	fa93 f3a3 	rbit	r3, r3
 80018e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80018e4:	4b88      	ldr	r3, [pc, #544]	; (8001b08 <HAL_RCC_OscConfig+0x5e8>)
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	2202      	movs	r2, #2
 80018ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80018ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80018f2:	fa92 f2a2 	rbit	r2, r2
 80018f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80018fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80018fe:	fab2 f282 	clz	r2, r2
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	f042 0220 	orr.w	r2, r2, #32
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	f002 021f 	and.w	r2, r2, #31
 800190e:	2101      	movs	r1, #1
 8001910:	fa01 f202 	lsl.w	r2, r1, r2
 8001914:	4013      	ands	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00a      	beq.n	8001930 <HAL_RCC_OscConfig+0x410>
 800191a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d002      	beq.n	8001930 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	f000 be2e 	b.w	800258c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b75      	ldr	r3, [pc, #468]	; (8001b08 <HAL_RCC_OscConfig+0x5e8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	21f8      	movs	r1, #248	; 0xf8
 8001946:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800194e:	fa91 f1a1 	rbit	r1, r1
 8001952:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001956:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800195a:	fab1 f181 	clz	r1, r1
 800195e:	b2c9      	uxtb	r1, r1
 8001960:	408b      	lsls	r3, r1
 8001962:	4969      	ldr	r1, [pc, #420]	; (8001b08 <HAL_RCC_OscConfig+0x5e8>)
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001968:	e0fd      	b.n	8001b66 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8088 	beq.w	8001a8c <HAL_RCC_OscConfig+0x56c>
 800197c:	2301      	movs	r3, #1
 800197e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001982:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001986:	fa93 f3a3 	rbit	r3, r3
 800198a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800198e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800199c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	461a      	mov	r2, r3
 80019a4:	2301      	movs	r3, #1
 80019a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff f93e 	bl	8000c28 <HAL_GetTick>
 80019ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff f939 	bl	8000c28 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d902      	bls.n	80019c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	f000 bde2 	b.w	800258c <HAL_RCC_OscConfig+0x106c>
 80019c8:	2302      	movs	r3, #2
 80019ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80019da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	095b      	lsrs	r3, r3, #5
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d102      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4d8>
 80019f2:	4b45      	ldr	r3, [pc, #276]	; (8001b08 <HAL_RCC_OscConfig+0x5e8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	e013      	b.n	8001a20 <HAL_RCC_OscConfig+0x500>
 80019f8:	2302      	movs	r3, #2
 80019fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a02:	fa93 f3a3 	rbit	r3, r3
 8001a06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a10:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001a1c:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <HAL_RCC_OscConfig+0x5e8>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	2202      	movs	r2, #2
 8001a22:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001a26:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a2a:	fa92 f2a2 	rbit	r2, r2
 8001a2e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001a32:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001a36:	fab2 f282 	clz	r2, r2
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	f042 0220 	orr.w	r2, r2, #32
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f002 021f 	and.w	r2, r2, #31
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0af      	beq.n	80019b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_RCC_OscConfig+0x5e8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	21f8      	movs	r1, #248	; 0xf8
 8001a68:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a70:	fa91 f1a1 	rbit	r1, r1
 8001a74:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001a78:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001a7c:	fab1 f181 	clz	r1, r1
 8001a80:	b2c9      	uxtb	r1, r1
 8001a82:	408b      	lsls	r3, r1
 8001a84:	4920      	ldr	r1, [pc, #128]	; (8001b08 <HAL_RCC_OscConfig+0x5e8>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]
 8001a8a:	e06c      	b.n	8001b66 <HAL_RCC_OscConfig+0x646>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a96:	fa93 f3a3 	rbit	r3, r3
 8001a9a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001a9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f8b6 	bl	8000c28 <HAL_GetTick>
 8001abc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac2:	f7ff f8b1 	bl	8000c28 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d902      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	f000 bd5a 	b.w	800258c <HAL_RCC_OscConfig+0x106c>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	095b      	lsrs	r3, r3, #5
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d104      	bne.n	8001b0c <HAL_RCC_OscConfig+0x5ec>
 8001b02:	4b01      	ldr	r3, [pc, #4]	; (8001b08 <HAL_RCC_OscConfig+0x5e8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	e015      	b.n	8001b34 <HAL_RCC_OscConfig+0x614>
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b16:	fa93 f3a3 	rbit	r3, r3
 8001b1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b1e:	2302      	movs	r3, #2
 8001b20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b24:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001b30:	4bc8      	ldr	r3, [pc, #800]	; (8001e54 <HAL_RCC_OscConfig+0x934>)
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	2202      	movs	r2, #2
 8001b36:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001b3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b3e:	fa92 f2a2 	rbit	r2, r2
 8001b42:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001b46:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001b4a:	fab2 f282 	clz	r2, r2
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	f042 0220 	orr.w	r2, r2, #32
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	f002 021f 	and.w	r2, r2, #31
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1ad      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8110 	beq.w	8001d9c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d079      	beq.n	8001c80 <HAL_RCC_OscConfig+0x760>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4bab      	ldr	r3, [pc, #684]	; (8001e58 <HAL_RCC_OscConfig+0x938>)
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f837 	bl	8000c28 <HAL_GetTick>
 8001bba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc0:	f7ff f832 	bl	8000c28 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d902      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	f000 bcdb 	b.w	800258c <HAL_RCC_OscConfig+0x106c>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	fa93 f2a3 	rbit	r2, r3
 8001c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c14:	2202      	movs	r2, #2
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	fa93 f2a3 	rbit	r2, r3
 8001c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c2e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c30:	4b88      	ldr	r3, [pc, #544]	; (8001e54 <HAL_RCC_OscConfig+0x934>)
 8001c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c3c:	2102      	movs	r1, #2
 8001c3e:	6019      	str	r1, [r3, #0]
 8001c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	fa93 f1a3 	rbit	r1, r3
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c56:	6019      	str	r1, [r3, #0]
  return result;
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2101      	movs	r1, #1
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0a0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x6a0>
 8001c7e:	e08d      	b.n	8001d9c <HAL_RCC_OscConfig+0x87c>
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	fa93 f2a3 	rbit	r2, r3
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ca2:	601a      	str	r2, [r3, #0]
  return result;
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001cac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b68      	ldr	r3, [pc, #416]	; (8001e58 <HAL_RCC_OscConfig+0x938>)
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc2:	f7fe ffb1 	bl	8000c28 <HAL_GetTick>
 8001cc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ccc:	f7fe ffac 	bl	8000c28 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d902      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	f000 bc55 	b.w	800258c <HAL_RCC_OscConfig+0x106c>
 8001ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cea:	2202      	movs	r2, #2
 8001cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d0e:	2202      	movs	r2, #2
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	fa93 f2a3 	rbit	r2, r3
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d32:	2202      	movs	r2, #2
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f2a3 	rbit	r2, r3
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d4c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4e:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <HAL_RCC_OscConfig+0x934>)
 8001d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	6019      	str	r1, [r3, #0]
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	fa93 f1a3 	rbit	r1, r3
 8001d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d70:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d74:	6019      	str	r1, [r3, #0]
  return result;
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	2101      	movs	r1, #1
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d197      	bne.n	8001ccc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 81a1 	beq.w	80020f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db8:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <HAL_RCC_OscConfig+0x934>)
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d116      	bne.n	8001df2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <HAL_RCC_OscConfig+0x934>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <HAL_RCC_OscConfig+0x934>)
 8001dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dce:	61d3      	str	r3, [r2, #28]
 8001dd0:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <HAL_RCC_OscConfig+0x934>)
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ddc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001dea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001dec:	2301      	movs	r3, #1
 8001dee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_RCC_OscConfig+0x93c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d11a      	bne.n	8001e34 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_RCC_OscConfig+0x93c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <HAL_RCC_OscConfig+0x93c>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0a:	f7fe ff0d 	bl	8000c28 <HAL_GetTick>
 8001e0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e12:	e009      	b.n	8001e28 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e14:	f7fe ff08 	bl	8000c28 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b64      	cmp	r3, #100	; 0x64
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e3b1      	b.n	800258c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <HAL_RCC_OscConfig+0x93c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0ef      	beq.n	8001e14 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d10d      	bne.n	8001e60 <HAL_RCC_OscConfig+0x940>
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_RCC_OscConfig+0x934>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4a02      	ldr	r2, [pc, #8]	; (8001e54 <HAL_RCC_OscConfig+0x934>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6213      	str	r3, [r2, #32]
 8001e50:	e03c      	b.n	8001ecc <HAL_RCC_OscConfig+0x9ac>
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	10908120 	.word	0x10908120
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10c      	bne.n	8001e8a <HAL_RCC_OscConfig+0x96a>
 8001e70:	4bc1      	ldr	r3, [pc, #772]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4ac0      	ldr	r2, [pc, #768]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	6213      	str	r3, [r2, #32]
 8001e7c:	4bbe      	ldr	r3, [pc, #760]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4abd      	ldr	r2, [pc, #756]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 8001e82:	f023 0304 	bic.w	r3, r3, #4
 8001e86:	6213      	str	r3, [r2, #32]
 8001e88:	e020      	b.n	8001ecc <HAL_RCC_OscConfig+0x9ac>
 8001e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b05      	cmp	r3, #5
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x994>
 8001e9a:	4bb7      	ldr	r3, [pc, #732]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4ab6      	ldr	r2, [pc, #728]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 8001ea0:	f043 0304 	orr.w	r3, r3, #4
 8001ea4:	6213      	str	r3, [r2, #32]
 8001ea6:	4bb4      	ldr	r3, [pc, #720]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	4ab3      	ldr	r2, [pc, #716]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6213      	str	r3, [r2, #32]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0x9ac>
 8001eb4:	4bb0      	ldr	r3, [pc, #704]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	4aaf      	ldr	r2, [pc, #700]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	6213      	str	r3, [r2, #32]
 8001ec0:	4bad      	ldr	r3, [pc, #692]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4aac      	ldr	r2, [pc, #688]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 8001ec6:	f023 0304 	bic.w	r3, r3, #4
 8001eca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 8081 	beq.w	8001fe0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ede:	f7fe fea3 	bl	8000c28 <HAL_GetTick>
 8001ee2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee6:	e00b      	b.n	8001f00 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7fe fe9e 	bl	8000c28 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e345      	b.n	800258c <HAL_RCC_OscConfig+0x106c>
 8001f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f08:	2202      	movs	r2, #2
 8001f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	fa93 f2a3 	rbit	r2, r3
 8001f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	fa93 f2a3 	rbit	r2, r3
 8001f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f42:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f46:	601a      	str	r2, [r3, #0]
  return result;
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d102      	bne.n	8001f6c <HAL_RCC_OscConfig+0xa4c>
 8001f66:	4b84      	ldr	r3, [pc, #528]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	e013      	b.n	8001f94 <HAL_RCC_OscConfig+0xa74>
 8001f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f70:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f74:	2202      	movs	r2, #2
 8001f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	fa93 f2a3 	rbit	r2, r3
 8001f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	4b79      	ldr	r3, [pc, #484]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f98:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	6011      	str	r1, [r2, #0]
 8001fa0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fa4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	fa92 f1a2 	rbit	r1, r2
 8001fae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fb2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001fb6:	6011      	str	r1, [r2, #0]
  return result;
 8001fb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fbc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	fab2 f282 	clz	r2, r2
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	f002 021f 	and.w	r2, r2, #31
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d084      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x9c8>
 8001fde:	e07f      	b.n	80020e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe0:	f7fe fe22 	bl	8000c28 <HAL_GetTick>
 8001fe4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe8:	e00b      	b.n	8002002 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7fe fe1d 	bl	8000c28 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e2c4      	b.n	800258c <HAL_RCC_OscConfig+0x106c>
 8002002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002006:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800200a:	2202      	movs	r2, #2
 800200c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002012:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f2a3 	rbit	r2, r3
 800201c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002020:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800202e:	2202      	movs	r2, #2
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002036:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	fa93 f2a3 	rbit	r2, r3
 8002040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002044:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002048:	601a      	str	r2, [r3, #0]
  return result;
 800204a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002052:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f043 0302 	orr.w	r3, r3, #2
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d102      	bne.n	800206e <HAL_RCC_OscConfig+0xb4e>
 8002068:	4b43      	ldr	r3, [pc, #268]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	e013      	b.n	8002096 <HAL_RCC_OscConfig+0xb76>
 800206e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002072:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002076:	2202      	movs	r2, #2
 8002078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	fa93 f2a3 	rbit	r2, r3
 8002088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800209a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800209e:	2102      	movs	r1, #2
 80020a0:	6011      	str	r1, [r2, #0]
 80020a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	fa92 f1a2 	rbit	r1, r2
 80020b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80020b8:	6011      	str	r1, [r2, #0]
  return result;
 80020ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020be:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	fab2 f282 	clz	r2, r2
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	f002 021f 	and.w	r2, r2, #31
 80020d4:	2101      	movs	r1, #1
 80020d6:	fa01 f202 	lsl.w	r2, r1, r2
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d184      	bne.n	8001fea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d105      	bne.n	80020f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e8:	4b23      	ldr	r3, [pc, #140]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	4a22      	ldr	r2, [pc, #136]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 80020ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8242 	beq.w	800258a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002106:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <HAL_RCC_OscConfig+0xc58>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b08      	cmp	r3, #8
 8002110:	f000 8213 	beq.w	800253a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002118:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	2b02      	cmp	r3, #2
 8002122:	f040 8162 	bne.w	80023ea <HAL_RCC_OscConfig+0xeca>
 8002126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800212e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002138:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	fa93 f2a3 	rbit	r2, r3
 8002142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002146:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800214a:	601a      	str	r2, [r3, #0]
  return result;
 800214c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002150:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002154:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002160:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	461a      	mov	r2, r3
 8002168:	2300      	movs	r3, #0
 800216a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7fe fd5c 	bl	8000c28 <HAL_GetTick>
 8002170:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002174:	e00c      	b.n	8002190 <HAL_RCC_OscConfig+0xc70>
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217c:	f7fe fd54 	bl	8000c28 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e1fd      	b.n	800258c <HAL_RCC_OscConfig+0x106c>
 8002190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002194:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002198:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800219c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	fa93 f2a3 	rbit	r2, r3
 80021ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80021b4:	601a      	str	r2, [r3, #0]
  return result;
 80021b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80021be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d102      	bne.n	80021da <HAL_RCC_OscConfig+0xcba>
 80021d4:	4bb0      	ldr	r3, [pc, #704]	; (8002498 <HAL_RCC_OscConfig+0xf78>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	e027      	b.n	800222a <HAL_RCC_OscConfig+0xd0a>
 80021da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80021e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	fa93 f2a3 	rbit	r2, r3
 80021f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002208:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002212:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	fa93 f2a3 	rbit	r2, r3
 800221c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002220:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	4b9c      	ldr	r3, [pc, #624]	; (8002498 <HAL_RCC_OscConfig+0xf78>)
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800222e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002232:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002236:	6011      	str	r1, [r2, #0]
 8002238:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800223c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	fa92 f1a2 	rbit	r1, r2
 8002246:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800224a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800224e:	6011      	str	r1, [r2, #0]
  return result;
 8002250:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002254:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	fab2 f282 	clz	r2, r2
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	f042 0220 	orr.w	r2, r2, #32
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	f002 021f 	and.w	r2, r2, #31
 800226a:	2101      	movs	r1, #1
 800226c:	fa01 f202 	lsl.w	r2, r1, r2
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d182      	bne.n	800217c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002276:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0xf78>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800227e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002282:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800228a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	430b      	orrs	r3, r1
 8002298:	497f      	ldr	r1, [pc, #508]	; (8002498 <HAL_RCC_OscConfig+0xf78>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
 800229e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80022a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80022c2:	601a      	str	r2, [r3, #0]
  return result;
 80022c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80022cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	461a      	mov	r2, r3
 80022e0:	2301      	movs	r3, #1
 80022e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe fca0 	bl	8000c28 <HAL_GetTick>
 80022e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ec:	e009      	b.n	8002302 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ee:	f7fe fc9b 	bl	8000c28 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e144      	b.n	800258c <HAL_RCC_OscConfig+0x106c>
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800230a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800230e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	fa93 f2a3 	rbit	r2, r3
 800231e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002322:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002326:	601a      	str	r2, [r3, #0]
  return result;
 8002328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002330:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	095b      	lsrs	r3, r3, #5
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d102      	bne.n	800234c <HAL_RCC_OscConfig+0xe2c>
 8002346:	4b54      	ldr	r3, [pc, #336]	; (8002498 <HAL_RCC_OscConfig+0xf78>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	e027      	b.n	800239c <HAL_RCC_OscConfig+0xe7c>
 800234c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002350:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002354:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002358:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	fa93 f2a3 	rbit	r2, r3
 8002368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002376:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800237a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002384:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	fa93 f2a3 	rbit	r2, r3
 800238e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002392:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	4b3f      	ldr	r3, [pc, #252]	; (8002498 <HAL_RCC_OscConfig+0xf78>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023a0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80023a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023a8:	6011      	str	r1, [r2, #0]
 80023aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	fa92 f1a2 	rbit	r1, r2
 80023b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023bc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80023c0:	6011      	str	r1, [r2, #0]
  return result;
 80023c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023c6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	fab2 f282 	clz	r2, r2
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	f042 0220 	orr.w	r2, r2, #32
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	f002 021f 	and.w	r2, r2, #31
 80023dc:	2101      	movs	r1, #1
 80023de:	fa01 f202 	lsl.w	r2, r1, r2
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d082      	beq.n	80022ee <HAL_RCC_OscConfig+0xdce>
 80023e8:	e0cf      	b.n	800258a <HAL_RCC_OscConfig+0x106a>
 80023ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80023f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	fa93 f2a3 	rbit	r2, r3
 8002406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800240e:	601a      	str	r2, [r3, #0]
  return result;
 8002410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002414:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002418:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002424:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	461a      	mov	r2, r3
 800242c:	2300      	movs	r3, #0
 800242e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7fe fbfa 	bl	8000c28 <HAL_GetTick>
 8002434:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002438:	e009      	b.n	800244e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243a:	f7fe fbf5 	bl	8000c28 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e09e      	b.n	800258c <HAL_RCC_OscConfig+0x106c>
 800244e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002452:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002456:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800245a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	fa93 f2a3 	rbit	r2, r3
 800246a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002472:	601a      	str	r2, [r3, #0]
  return result;
 8002474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002478:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800247c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	095b      	lsrs	r3, r3, #5
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b01      	cmp	r3, #1
 8002490:	d104      	bne.n	800249c <HAL_RCC_OscConfig+0xf7c>
 8002492:	4b01      	ldr	r3, [pc, #4]	; (8002498 <HAL_RCC_OscConfig+0xf78>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	e029      	b.n	80024ec <HAL_RCC_OscConfig+0xfcc>
 8002498:	40021000 	.word	0x40021000
 800249c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80024a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	fa93 f2a3 	rbit	r2, r3
 80024b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024bc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80024ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	fa93 f2a3 	rbit	r2, r3
 80024de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_RCC_OscConfig+0x1078>)
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024f0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80024f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024f8:	6011      	str	r1, [r2, #0]
 80024fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024fe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	fa92 f1a2 	rbit	r1, r2
 8002508:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800250c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002510:	6011      	str	r1, [r2, #0]
  return result;
 8002512:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002516:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	fab2 f282 	clz	r2, r2
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	f042 0220 	orr.w	r2, r2, #32
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	f002 021f 	and.w	r2, r2, #31
 800252c:	2101      	movs	r1, #1
 800252e:	fa01 f202 	lsl.w	r2, r1, r2
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d180      	bne.n	800243a <HAL_RCC_OscConfig+0xf1a>
 8002538:	e027      	b.n	800258a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e01e      	b.n	800258c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_RCC_OscConfig+0x1078>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002556:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800255a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800255e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	429a      	cmp	r2, r3
 800256c:	d10b      	bne.n	8002586 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800256e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002572:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002582:	429a      	cmp	r2, r3
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b09e      	sub	sp, #120	; 0x78
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e162      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b4:	4b90      	ldr	r3, [pc, #576]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d910      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b8d      	ldr	r3, [pc, #564]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 0207 	bic.w	r2, r3, #7
 80025ca:	498b      	ldr	r1, [pc, #556]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b89      	ldr	r3, [pc, #548]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e14a      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f0:	4b82      	ldr	r3, [pc, #520]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	497f      	ldr	r1, [pc, #508]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 80dc 	beq.w	80027c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d13c      	bne.n	8002692 <HAL_RCC_ClockConfig+0xf6>
 8002618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800261c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d102      	bne.n	8002642 <HAL_RCC_ClockConfig+0xa6>
 800263c:	4b6f      	ldr	r3, [pc, #444]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	e00f      	b.n	8002662 <HAL_RCC_ClockConfig+0xc6>
 8002642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002646:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	667b      	str	r3, [r7, #100]	; 0x64
 8002650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002654:	663b      	str	r3, [r7, #96]	; 0x60
 8002656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800265e:	4b67      	ldr	r3, [pc, #412]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002666:	65ba      	str	r2, [r7, #88]	; 0x58
 8002668:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800266a:	fa92 f2a2 	rbit	r2, r2
 800266e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002672:	fab2 f282 	clz	r2, r2
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	f042 0220 	orr.w	r2, r2, #32
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	f002 021f 	and.w	r2, r2, #31
 8002682:	2101      	movs	r1, #1
 8002684:	fa01 f202 	lsl.w	r2, r1, r2
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d17b      	bne.n	8002786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0f3      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d13c      	bne.n	8002714 <HAL_RCC_ClockConfig+0x178>
 800269a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d102      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x128>
 80026be:	4b4f      	ldr	r3, [pc, #316]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	e00f      	b.n	80026e4 <HAL_RCC_ClockConfig+0x148>
 80026c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	647b      	str	r3, [r7, #68]	; 0x44
 80026d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d6:	643b      	str	r3, [r7, #64]	; 0x40
 80026d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026e0:	4b46      	ldr	r3, [pc, #280]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80026ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026ec:	fa92 f2a2 	rbit	r2, r2
 80026f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026f4:	fab2 f282 	clz	r2, r2
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	f042 0220 	orr.w	r2, r2, #32
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	f002 021f 	and.w	r2, r2, #31
 8002704:	2101      	movs	r1, #1
 8002706:	fa01 f202 	lsl.w	r2, r1, r2
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d13a      	bne.n	8002786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0b2      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
 8002714:	2302      	movs	r3, #2
 8002716:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d102      	bne.n	800273c <HAL_RCC_ClockConfig+0x1a0>
 8002736:	4b31      	ldr	r3, [pc, #196]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	e00d      	b.n	8002758 <HAL_RCC_ClockConfig+0x1bc>
 800273c:	2302      	movs	r3, #2
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
 8002748:	2302      	movs	r3, #2
 800274a:	623b      	str	r3, [r7, #32]
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	4b29      	ldr	r3, [pc, #164]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	2202      	movs	r2, #2
 800275a:	61ba      	str	r2, [r7, #24]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	fa92 f2a2 	rbit	r2, r2
 8002762:	617a      	str	r2, [r7, #20]
  return result;
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	fab2 f282 	clz	r2, r2
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f042 0220 	orr.w	r2, r2, #32
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f002 021f 	and.w	r2, r2, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e079      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f023 0203 	bic.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	491a      	ldr	r1, [pc, #104]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002798:	f7fe fa46 	bl	8000c28 <HAL_GetTick>
 800279c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7fe fa42 	bl	8000c28 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e061      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 020c 	and.w	r2, r3, #12
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1eb      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d214      	bcs.n	8002800 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 0207 	bic.w	r2, r3, #7
 80027de:	4906      	ldr	r1, [pc, #24]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e040      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
 80027f8:	40022000 	.word	0x40022000
 80027fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800280c:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_RCC_ClockConfig+0x2e8>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	491a      	ldr	r1, [pc, #104]	; (8002884 <HAL_RCC_ClockConfig+0x2e8>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800282a:	4b16      	ldr	r3, [pc, #88]	; (8002884 <HAL_RCC_ClockConfig+0x2e8>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4912      	ldr	r1, [pc, #72]	; (8002884 <HAL_RCC_ClockConfig+0x2e8>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800283e:	f000 f829 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002842:	4601      	mov	r1, r0
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_RCC_ClockConfig+0x2e8>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800284c:	22f0      	movs	r2, #240	; 0xf0
 800284e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	fa92 f2a2 	rbit	r2, r2
 8002856:	60fa      	str	r2, [r7, #12]
  return result;
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	fab2 f282 	clz	r2, r2
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	40d3      	lsrs	r3, r2
 8002862:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x2ec>)
 8002864:	5cd3      	ldrb	r3, [r2, r3]
 8002866:	fa21 f303 	lsr.w	r3, r1, r3
 800286a:	4a08      	ldr	r2, [pc, #32]	; (800288c <HAL_RCC_ClockConfig+0x2f0>)
 800286c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <HAL_RCC_ClockConfig+0x2f4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe f994 	bl	8000ba0 <HAL_InitTick>
  
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3778      	adds	r7, #120	; 0x78
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	0800407c 	.word	0x0800407c
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	b08b      	sub	sp, #44	; 0x2c
 8002898:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028ae:	4b29      	ldr	r3, [pc, #164]	; (8002954 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d002      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x30>
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d003      	beq.n	80028ca <HAL_RCC_GetSysClockFreq+0x36>
 80028c2:	e03c      	b.n	800293e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c4:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028c6:	623b      	str	r3, [r7, #32]
      break;
 80028c8:	e03c      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80028d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	fa92 f2a2 	rbit	r2, r2
 80028dc:	607a      	str	r2, [r7, #4]
  return result;
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	fab2 f282 	clz	r2, r2
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	40d3      	lsrs	r3, r2
 80028e8:	4a1c      	ldr	r2, [pc, #112]	; (800295c <HAL_RCC_GetSysClockFreq+0xc8>)
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80028ee:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	220f      	movs	r2, #15
 80028f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	fa92 f2a2 	rbit	r2, r2
 8002900:	60fa      	str	r2, [r7, #12]
  return result;
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	fab2 f282 	clz	r2, r2
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	40d3      	lsrs	r3, r2
 800290c:	4a14      	ldr	r2, [pc, #80]	; (8002960 <HAL_RCC_GetSysClockFreq+0xcc>)
 800290e:	5cd3      	ldrb	r3, [r2, r3]
 8002910:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800291c:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <HAL_RCC_GetSysClockFreq+0xc4>)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	fbb2 f2f3 	udiv	r2, r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	e004      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	4a0c      	ldr	r2, [pc, #48]	; (8002964 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002932:	fb02 f303 	mul.w	r3, r2, r3
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	623b      	str	r3, [r7, #32]
      break;
 800293c:	e002      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002940:	623b      	str	r3, [r7, #32]
      break;
 8002942:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002944:	6a3b      	ldr	r3, [r7, #32]
}
 8002946:	4618      	mov	r0, r3
 8002948:	372c      	adds	r7, #44	; 0x2c
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	007a1200 	.word	0x007a1200
 800295c:	0800408c 	.word	0x0800408c
 8002960:	0800409c 	.word	0x0800409c
 8002964:	003d0900 	.word	0x003d0900

08002968 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b092      	sub	sp, #72	; 0x48
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002978:	2300      	movs	r3, #0
 800297a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80d4 	beq.w	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298c:	4b4e      	ldr	r3, [pc, #312]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10e      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002998:	4b4b      	ldr	r3, [pc, #300]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	4a4a      	ldr	r2, [pc, #296]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a2:	61d3      	str	r3, [r2, #28]
 80029a4:	4b48      	ldr	r3, [pc, #288]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	4b45      	ldr	r3, [pc, #276]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d118      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c2:	4b42      	ldr	r3, [pc, #264]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a41      	ldr	r2, [pc, #260]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ce:	f7fe f92b 	bl	8000c28 <HAL_GetTick>
 80029d2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	e008      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d6:	f7fe f927 	bl	8000c28 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b64      	cmp	r3, #100	; 0x64
 80029e2:	d901      	bls.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e169      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	4b38      	ldr	r3, [pc, #224]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029f4:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 8084 	beq.w	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d07c      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a14:	4b2c      	ldr	r3, [pc, #176]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2301      	movs	r3, #1
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	461a      	mov	r2, r3
 8002a62:	2300      	movs	r3, #0
 8002a64:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a66:	4a18      	ldr	r2, [pc, #96]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d04b      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7fe f8d7 	bl	8000c28 <HAL_GetTick>
 8002a7a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7fe f8d3 	bl	8000c28 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e113      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002a94:	2302      	movs	r3, #2
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	623b      	str	r3, [r7, #32]
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	61fb      	str	r3, [r7, #28]
  return result;
 8002aac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	095b      	lsrs	r3, r3, #5
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d108      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ac2:	4b01      	ldr	r3, [pc, #4]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	e00d      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	10908100 	.word	0x10908100
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	4b78      	ldr	r3, [pc, #480]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	613a      	str	r2, [r7, #16]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	fa92 f2a2 	rbit	r2, r2
 8002aee:	60fa      	str	r2, [r7, #12]
  return result;
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	fab2 f282 	clz	r2, r2
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	f002 021f 	and.w	r2, r2, #31
 8002b02:	2101      	movs	r1, #1
 8002b04:	fa01 f202 	lsl.w	r2, r1, r2
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0b7      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b0e:	4b6d      	ldr	r3, [pc, #436]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	496a      	ldr	r1, [pc, #424]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d105      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b28:	4b66      	ldr	r3, [pc, #408]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	4a65      	ldr	r2, [pc, #404]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b40:	4b60      	ldr	r3, [pc, #384]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f023 0203 	bic.w	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	495d      	ldr	r1, [pc, #372]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b5e:	4b59      	ldr	r3, [pc, #356]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4956      	ldr	r1, [pc, #344]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b7c:	4b51      	ldr	r3, [pc, #324]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	494e      	ldr	r1, [pc, #312]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b9a:	4b4a      	ldr	r3, [pc, #296]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f023 0210 	bic.w	r2, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	4947      	ldr	r1, [pc, #284]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002bb8:	4b42      	ldr	r3, [pc, #264]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	493f      	ldr	r1, [pc, #252]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f023 0220 	bic.w	r2, r3, #32
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	4938      	ldr	r1, [pc, #224]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bf4:	4b33      	ldr	r3, [pc, #204]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	4930      	ldr	r1, [pc, #192]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c12:	4b2c      	ldr	r3, [pc, #176]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	4929      	ldr	r1, [pc, #164]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c30:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	4921      	ldr	r1, [pc, #132]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	491a      	ldr	r1, [pc, #104]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c6c:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	4912      	ldr	r1, [pc, #72]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	490b      	ldr	r1, [pc, #44]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb4:	4903      	ldr	r1, [pc, #12]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3748      	adds	r7, #72	; 0x48
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000

08002cc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e09d      	b.n	8002e16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d108      	bne.n	8002cf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cea:	d009      	beq.n	8002d00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
 8002cf2:	e005      	b.n	8002d00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fd fde6 	bl	80008ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d40:	d902      	bls.n	8002d48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	e002      	b.n	8002d4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002d56:	d007      	beq.n	8002d68 <HAL_SPI_Init+0xa0>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d60:	d002      	beq.n	8002d68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	ea42 0103 	orr.w	r1, r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	f003 0204 	and.w	r2, r3, #4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002de4:	ea42 0103 	orr.w	r1, r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e049      	b.n	8002ec4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d106      	bne.n	8002e4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fd fd93 	bl	8000970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	f000 fb75 	bl	800354c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e049      	b.n	8002f72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f841 	bl	8002f7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3304      	adds	r3, #4
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	f000 fb1e 	bl	800354c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <HAL_TIM_PWM_Start+0x24>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	bf14      	ite	ne
 8002fac:	2301      	movne	r3, #1
 8002fae:	2300      	moveq	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	e03c      	b.n	800302e <HAL_TIM_PWM_Start+0x9e>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d109      	bne.n	8002fce <HAL_TIM_PWM_Start+0x3e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	bf14      	ite	ne
 8002fc6:	2301      	movne	r3, #1
 8002fc8:	2300      	moveq	r3, #0
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	e02f      	b.n	800302e <HAL_TIM_PWM_Start+0x9e>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d109      	bne.n	8002fe8 <HAL_TIM_PWM_Start+0x58>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	e022      	b.n	800302e <HAL_TIM_PWM_Start+0x9e>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b0c      	cmp	r3, #12
 8002fec:	d109      	bne.n	8003002 <HAL_TIM_PWM_Start+0x72>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	e015      	b.n	800302e <HAL_TIM_PWM_Start+0x9e>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b10      	cmp	r3, #16
 8003006:	d109      	bne.n	800301c <HAL_TIM_PWM_Start+0x8c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	bf14      	ite	ne
 8003014:	2301      	movne	r3, #1
 8003016:	2300      	moveq	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e008      	b.n	800302e <HAL_TIM_PWM_Start+0x9e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	bf14      	ite	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2300      	moveq	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e097      	b.n	8003166 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d104      	bne.n	8003046 <HAL_TIM_PWM_Start+0xb6>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003044:	e023      	b.n	800308e <HAL_TIM_PWM_Start+0xfe>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d104      	bne.n	8003056 <HAL_TIM_PWM_Start+0xc6>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003054:	e01b      	b.n	800308e <HAL_TIM_PWM_Start+0xfe>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d104      	bne.n	8003066 <HAL_TIM_PWM_Start+0xd6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003064:	e013      	b.n	800308e <HAL_TIM_PWM_Start+0xfe>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b0c      	cmp	r3, #12
 800306a:	d104      	bne.n	8003076 <HAL_TIM_PWM_Start+0xe6>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003074:	e00b      	b.n	800308e <HAL_TIM_PWM_Start+0xfe>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b10      	cmp	r3, #16
 800307a:	d104      	bne.n	8003086 <HAL_TIM_PWM_Start+0xf6>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003084:	e003      	b.n	800308e <HAL_TIM_PWM_Start+0xfe>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2201      	movs	r2, #1
 8003094:	6839      	ldr	r1, [r7, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fe58 	bl	8003d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a33      	ldr	r2, [pc, #204]	; (8003170 <HAL_TIM_PWM_Start+0x1e0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d013      	beq.n	80030ce <HAL_TIM_PWM_Start+0x13e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a32      	ldr	r2, [pc, #200]	; (8003174 <HAL_TIM_PWM_Start+0x1e4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00e      	beq.n	80030ce <HAL_TIM_PWM_Start+0x13e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a30      	ldr	r2, [pc, #192]	; (8003178 <HAL_TIM_PWM_Start+0x1e8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d009      	beq.n	80030ce <HAL_TIM_PWM_Start+0x13e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a2f      	ldr	r2, [pc, #188]	; (800317c <HAL_TIM_PWM_Start+0x1ec>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d004      	beq.n	80030ce <HAL_TIM_PWM_Start+0x13e>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a2d      	ldr	r2, [pc, #180]	; (8003180 <HAL_TIM_PWM_Start+0x1f0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_TIM_PWM_Start+0x142>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_TIM_PWM_Start+0x144>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a20      	ldr	r2, [pc, #128]	; (8003170 <HAL_TIM_PWM_Start+0x1e0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d018      	beq.n	8003124 <HAL_TIM_PWM_Start+0x194>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fa:	d013      	beq.n	8003124 <HAL_TIM_PWM_Start+0x194>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a20      	ldr	r2, [pc, #128]	; (8003184 <HAL_TIM_PWM_Start+0x1f4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00e      	beq.n	8003124 <HAL_TIM_PWM_Start+0x194>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1f      	ldr	r2, [pc, #124]	; (8003188 <HAL_TIM_PWM_Start+0x1f8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d009      	beq.n	8003124 <HAL_TIM_PWM_Start+0x194>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a17      	ldr	r2, [pc, #92]	; (8003174 <HAL_TIM_PWM_Start+0x1e4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d004      	beq.n	8003124 <HAL_TIM_PWM_Start+0x194>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a16      	ldr	r2, [pc, #88]	; (8003178 <HAL_TIM_PWM_Start+0x1e8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d115      	bne.n	8003150 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	4b18      	ldr	r3, [pc, #96]	; (800318c <HAL_TIM_PWM_Start+0x1fc>)
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b06      	cmp	r3, #6
 8003134:	d015      	beq.n	8003162 <HAL_TIM_PWM_Start+0x1d2>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313c:	d011      	beq.n	8003162 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800314e:	e008      	b.n	8003162 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	e000      	b.n	8003164 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003162:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40012c00 	.word	0x40012c00
 8003174:	40013400 	.word	0x40013400
 8003178:	40014000 	.word	0x40014000
 800317c:	40014400 	.word	0x40014400
 8003180:	40014800 	.word	0x40014800
 8003184:	40000400 	.word	0x40000400
 8003188:	40000800 	.word	0x40000800
 800318c:	00010007 	.word	0x00010007

08003190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e0ff      	b.n	80033ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b14      	cmp	r3, #20
 80031ba:	f200 80f0 	bhi.w	800339e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80031be:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c4:	08003219 	.word	0x08003219
 80031c8:	0800339f 	.word	0x0800339f
 80031cc:	0800339f 	.word	0x0800339f
 80031d0:	0800339f 	.word	0x0800339f
 80031d4:	08003259 	.word	0x08003259
 80031d8:	0800339f 	.word	0x0800339f
 80031dc:	0800339f 	.word	0x0800339f
 80031e0:	0800339f 	.word	0x0800339f
 80031e4:	0800329b 	.word	0x0800329b
 80031e8:	0800339f 	.word	0x0800339f
 80031ec:	0800339f 	.word	0x0800339f
 80031f0:	0800339f 	.word	0x0800339f
 80031f4:	080032db 	.word	0x080032db
 80031f8:	0800339f 	.word	0x0800339f
 80031fc:	0800339f 	.word	0x0800339f
 8003200:	0800339f 	.word	0x0800339f
 8003204:	0800331d 	.word	0x0800331d
 8003208:	0800339f 	.word	0x0800339f
 800320c:	0800339f 	.word	0x0800339f
 8003210:	0800339f 	.word	0x0800339f
 8003214:	0800335d 	.word	0x0800335d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fa24 	bl	800366c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0208 	orr.w	r2, r2, #8
 8003232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0204 	bic.w	r2, r2, #4
 8003242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6999      	ldr	r1, [r3, #24]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	619a      	str	r2, [r3, #24]
      break;
 8003256:	e0a5      	b.n	80033a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fa94 	bl	800378c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6999      	ldr	r1, [r3, #24]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	021a      	lsls	r2, r3, #8
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	619a      	str	r2, [r3, #24]
      break;
 8003298:	e084      	b.n	80033a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fafd 	bl	80038a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0208 	orr.w	r2, r2, #8
 80032b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69da      	ldr	r2, [r3, #28]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0204 	bic.w	r2, r2, #4
 80032c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	69d9      	ldr	r1, [r3, #28]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	61da      	str	r2, [r3, #28]
      break;
 80032d8:	e064      	b.n	80033a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fb65 	bl	80039b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69da      	ldr	r2, [r3, #28]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69d9      	ldr	r1, [r3, #28]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	021a      	lsls	r2, r3, #8
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	61da      	str	r2, [r3, #28]
      break;
 800331a:	e043      	b.n	80033a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fbae 	bl	8003a84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0208 	orr.w	r2, r2, #8
 8003336:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0204 	bic.w	r2, r2, #4
 8003346:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800335a:	e023      	b.n	80033a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fbf2 	bl	8003b4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003376:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003386:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	021a      	lsls	r2, r3, #8
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800339c:	e002      	b.n	80033a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	75fb      	strb	r3, [r7, #23]
      break;
 80033a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop

080033b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_TIM_ConfigClockSource+0x1c>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e0b6      	b.n	8003542 <HAL_TIM_ConfigClockSource+0x18a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003410:	d03e      	beq.n	8003490 <HAL_TIM_ConfigClockSource+0xd8>
 8003412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003416:	f200 8087 	bhi.w	8003528 <HAL_TIM_ConfigClockSource+0x170>
 800341a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341e:	f000 8086 	beq.w	800352e <HAL_TIM_ConfigClockSource+0x176>
 8003422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003426:	d87f      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x170>
 8003428:	2b70      	cmp	r3, #112	; 0x70
 800342a:	d01a      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0xaa>
 800342c:	2b70      	cmp	r3, #112	; 0x70
 800342e:	d87b      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x170>
 8003430:	2b60      	cmp	r3, #96	; 0x60
 8003432:	d050      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0x11e>
 8003434:	2b60      	cmp	r3, #96	; 0x60
 8003436:	d877      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x170>
 8003438:	2b50      	cmp	r3, #80	; 0x50
 800343a:	d03c      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0xfe>
 800343c:	2b50      	cmp	r3, #80	; 0x50
 800343e:	d873      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x170>
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d058      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0x13e>
 8003444:	2b40      	cmp	r3, #64	; 0x40
 8003446:	d86f      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x170>
 8003448:	2b30      	cmp	r3, #48	; 0x30
 800344a:	d064      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x15e>
 800344c:	2b30      	cmp	r3, #48	; 0x30
 800344e:	d86b      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x170>
 8003450:	2b20      	cmp	r3, #32
 8003452:	d060      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x15e>
 8003454:	2b20      	cmp	r3, #32
 8003456:	d867      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x170>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d05c      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x15e>
 800345c:	2b10      	cmp	r3, #16
 800345e:	d05a      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x15e>
 8003460:	e062      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6899      	ldr	r1, [r3, #8]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f000 fc4b 	bl	8003d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	609a      	str	r2, [r3, #8]
      break;
 800348e:	e04f      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	6899      	ldr	r1, [r3, #8]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f000 fc34 	bl	8003d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034b2:	609a      	str	r2, [r3, #8]
      break;
 80034b4:	e03c      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	461a      	mov	r2, r3
 80034c4:	f000 fba8 	bl	8003c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2150      	movs	r1, #80	; 0x50
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 fc01 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 80034d4:	e02c      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6859      	ldr	r1, [r3, #4]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	461a      	mov	r2, r3
 80034e4:	f000 fbc7 	bl	8003c76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2160      	movs	r1, #96	; 0x60
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fbf1 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 80034f4:	e01c      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	461a      	mov	r2, r3
 8003504:	f000 fb88 	bl	8003c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2140      	movs	r1, #64	; 0x40
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fbe1 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 8003514:	e00c      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4619      	mov	r1, r3
 8003520:	4610      	mov	r0, r2
 8003522:	f000 fbd8 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 8003526:	e003      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	73fb      	strb	r3, [r7, #15]
      break;
 800352c:	e000      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800352e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003540:	7bfb      	ldrb	r3, [r7, #15]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a3c      	ldr	r2, [pc, #240]	; (8003650 <TIM_Base_SetConfig+0x104>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00f      	beq.n	8003584 <TIM_Base_SetConfig+0x38>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356a:	d00b      	beq.n	8003584 <TIM_Base_SetConfig+0x38>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a39      	ldr	r2, [pc, #228]	; (8003654 <TIM_Base_SetConfig+0x108>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d007      	beq.n	8003584 <TIM_Base_SetConfig+0x38>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a38      	ldr	r2, [pc, #224]	; (8003658 <TIM_Base_SetConfig+0x10c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d003      	beq.n	8003584 <TIM_Base_SetConfig+0x38>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a37      	ldr	r2, [pc, #220]	; (800365c <TIM_Base_SetConfig+0x110>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d108      	bne.n	8003596 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2d      	ldr	r2, [pc, #180]	; (8003650 <TIM_Base_SetConfig+0x104>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01b      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a4:	d017      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2a      	ldr	r2, [pc, #168]	; (8003654 <TIM_Base_SetConfig+0x108>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a29      	ldr	r2, [pc, #164]	; (8003658 <TIM_Base_SetConfig+0x10c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00f      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a28      	ldr	r2, [pc, #160]	; (800365c <TIM_Base_SetConfig+0x110>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00b      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a27      	ldr	r2, [pc, #156]	; (8003660 <TIM_Base_SetConfig+0x114>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a26      	ldr	r2, [pc, #152]	; (8003664 <TIM_Base_SetConfig+0x118>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_Base_SetConfig+0x8a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a25      	ldr	r2, [pc, #148]	; (8003668 <TIM_Base_SetConfig+0x11c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d108      	bne.n	80035e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a10      	ldr	r2, [pc, #64]	; (8003650 <TIM_Base_SetConfig+0x104>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00f      	beq.n	8003634 <TIM_Base_SetConfig+0xe8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a11      	ldr	r2, [pc, #68]	; (800365c <TIM_Base_SetConfig+0x110>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00b      	beq.n	8003634 <TIM_Base_SetConfig+0xe8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a10      	ldr	r2, [pc, #64]	; (8003660 <TIM_Base_SetConfig+0x114>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d007      	beq.n	8003634 <TIM_Base_SetConfig+0xe8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a0f      	ldr	r2, [pc, #60]	; (8003664 <TIM_Base_SetConfig+0x118>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d003      	beq.n	8003634 <TIM_Base_SetConfig+0xe8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a0e      	ldr	r2, [pc, #56]	; (8003668 <TIM_Base_SetConfig+0x11c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d103      	bne.n	800363c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	615a      	str	r2, [r3, #20]
}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800
 800365c:	40013400 	.word	0x40013400
 8003660:	40014000 	.word	0x40014000
 8003664:	40014400 	.word	0x40014400
 8003668:	40014800 	.word	0x40014800

0800366c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f023 0201 	bic.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0303 	bic.w	r3, r3, #3
 80036a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f023 0302 	bic.w	r3, r3, #2
 80036b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a2c      	ldr	r2, [pc, #176]	; (8003778 <TIM_OC1_SetConfig+0x10c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00f      	beq.n	80036ec <TIM_OC1_SetConfig+0x80>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a2b      	ldr	r2, [pc, #172]	; (800377c <TIM_OC1_SetConfig+0x110>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00b      	beq.n	80036ec <TIM_OC1_SetConfig+0x80>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a2a      	ldr	r2, [pc, #168]	; (8003780 <TIM_OC1_SetConfig+0x114>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d007      	beq.n	80036ec <TIM_OC1_SetConfig+0x80>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a29      	ldr	r2, [pc, #164]	; (8003784 <TIM_OC1_SetConfig+0x118>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d003      	beq.n	80036ec <TIM_OC1_SetConfig+0x80>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a28      	ldr	r2, [pc, #160]	; (8003788 <TIM_OC1_SetConfig+0x11c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d10c      	bne.n	8003706 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f023 0308 	bic.w	r3, r3, #8
 80036f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f023 0304 	bic.w	r3, r3, #4
 8003704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a1b      	ldr	r2, [pc, #108]	; (8003778 <TIM_OC1_SetConfig+0x10c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00f      	beq.n	800372e <TIM_OC1_SetConfig+0xc2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1a      	ldr	r2, [pc, #104]	; (800377c <TIM_OC1_SetConfig+0x110>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00b      	beq.n	800372e <TIM_OC1_SetConfig+0xc2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a19      	ldr	r2, [pc, #100]	; (8003780 <TIM_OC1_SetConfig+0x114>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <TIM_OC1_SetConfig+0xc2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a18      	ldr	r2, [pc, #96]	; (8003784 <TIM_OC1_SetConfig+0x118>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_OC1_SetConfig+0xc2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a17      	ldr	r2, [pc, #92]	; (8003788 <TIM_OC1_SetConfig+0x11c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d111      	bne.n	8003752 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800373c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	621a      	str	r2, [r3, #32]
}
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40013400 	.word	0x40013400
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800

0800378c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f023 0210 	bic.w	r2, r3, #16
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0320 	bic.w	r3, r3, #32
 80037da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a28      	ldr	r2, [pc, #160]	; (800388c <TIM_OC2_SetConfig+0x100>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <TIM_OC2_SetConfig+0x6c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a27      	ldr	r2, [pc, #156]	; (8003890 <TIM_OC2_SetConfig+0x104>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d10d      	bne.n	8003814 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003812:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a1d      	ldr	r2, [pc, #116]	; (800388c <TIM_OC2_SetConfig+0x100>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00f      	beq.n	800383c <TIM_OC2_SetConfig+0xb0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <TIM_OC2_SetConfig+0x104>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00b      	beq.n	800383c <TIM_OC2_SetConfig+0xb0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a1b      	ldr	r2, [pc, #108]	; (8003894 <TIM_OC2_SetConfig+0x108>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d007      	beq.n	800383c <TIM_OC2_SetConfig+0xb0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a1a      	ldr	r2, [pc, #104]	; (8003898 <TIM_OC2_SetConfig+0x10c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_OC2_SetConfig+0xb0>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a19      	ldr	r2, [pc, #100]	; (800389c <TIM_OC2_SetConfig+0x110>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d113      	bne.n	8003864 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003842:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800384a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40013400 	.word	0x40013400
 8003894:	40014000 	.word	0x40014000
 8003898:	40014400 	.word	0x40014400
 800389c:	40014800 	.word	0x40014800

080038a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a27      	ldr	r2, [pc, #156]	; (800399c <TIM_OC3_SetConfig+0xfc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_OC3_SetConfig+0x6a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <TIM_OC3_SetConfig+0x100>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10d      	bne.n	8003926 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003924:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1c      	ldr	r2, [pc, #112]	; (800399c <TIM_OC3_SetConfig+0xfc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00f      	beq.n	800394e <TIM_OC3_SetConfig+0xae>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1b      	ldr	r2, [pc, #108]	; (80039a0 <TIM_OC3_SetConfig+0x100>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00b      	beq.n	800394e <TIM_OC3_SetConfig+0xae>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <TIM_OC3_SetConfig+0x104>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <TIM_OC3_SetConfig+0xae>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <TIM_OC3_SetConfig+0x108>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_OC3_SetConfig+0xae>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a18      	ldr	r2, [pc, #96]	; (80039ac <TIM_OC3_SetConfig+0x10c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d113      	bne.n	8003976 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800395c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	621a      	str	r2, [r3, #32]
}
 8003990:	bf00      	nop
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40012c00 	.word	0x40012c00
 80039a0:	40013400 	.word	0x40013400
 80039a4:	40014000 	.word	0x40014000
 80039a8:	40014400 	.word	0x40014400
 80039ac:	40014800 	.word	0x40014800

080039b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	031b      	lsls	r3, r3, #12
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a18      	ldr	r2, [pc, #96]	; (8003a70 <TIM_OC4_SetConfig+0xc0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00f      	beq.n	8003a34 <TIM_OC4_SetConfig+0x84>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a17      	ldr	r2, [pc, #92]	; (8003a74 <TIM_OC4_SetConfig+0xc4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <TIM_OC4_SetConfig+0x84>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a16      	ldr	r2, [pc, #88]	; (8003a78 <TIM_OC4_SetConfig+0xc8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <TIM_OC4_SetConfig+0x84>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a15      	ldr	r2, [pc, #84]	; (8003a7c <TIM_OC4_SetConfig+0xcc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_OC4_SetConfig+0x84>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <TIM_OC4_SetConfig+0xd0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d109      	bne.n	8003a48 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	019b      	lsls	r3, r3, #6
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	621a      	str	r2, [r3, #32]
}
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	40013400 	.word	0x40013400
 8003a78:	40014000 	.word	0x40014000
 8003a7c:	40014400 	.word	0x40014400
 8003a80:	40014800 	.word	0x40014800

08003a84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ac8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a17      	ldr	r2, [pc, #92]	; (8003b38 <TIM_OC5_SetConfig+0xb4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00f      	beq.n	8003afe <TIM_OC5_SetConfig+0x7a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <TIM_OC5_SetConfig+0xb8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <TIM_OC5_SetConfig+0x7a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <TIM_OC5_SetConfig+0xbc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <TIM_OC5_SetConfig+0x7a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a14      	ldr	r2, [pc, #80]	; (8003b44 <TIM_OC5_SetConfig+0xc0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_OC5_SetConfig+0x7a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a13      	ldr	r2, [pc, #76]	; (8003b48 <TIM_OC5_SetConfig+0xc4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d109      	bne.n	8003b12 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	621a      	str	r2, [r3, #32]
}
 8003b2c:	bf00      	nop
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40013400 	.word	0x40013400
 8003b40:	40014000 	.word	0x40014000
 8003b44:	40014400 	.word	0x40014400
 8003b48:	40014800 	.word	0x40014800

08003b4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	021b      	lsls	r3, r3, #8
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	051b      	lsls	r3, r3, #20
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a18      	ldr	r2, [pc, #96]	; (8003c04 <TIM_OC6_SetConfig+0xb8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00f      	beq.n	8003bc8 <TIM_OC6_SetConfig+0x7c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a17      	ldr	r2, [pc, #92]	; (8003c08 <TIM_OC6_SetConfig+0xbc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00b      	beq.n	8003bc8 <TIM_OC6_SetConfig+0x7c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a16      	ldr	r2, [pc, #88]	; (8003c0c <TIM_OC6_SetConfig+0xc0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d007      	beq.n	8003bc8 <TIM_OC6_SetConfig+0x7c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a15      	ldr	r2, [pc, #84]	; (8003c10 <TIM_OC6_SetConfig+0xc4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_OC6_SetConfig+0x7c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a14      	ldr	r2, [pc, #80]	; (8003c14 <TIM_OC6_SetConfig+0xc8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d109      	bne.n	8003bdc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	029b      	lsls	r3, r3, #10
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40012c00 	.word	0x40012c00
 8003c08:	40013400 	.word	0x40013400
 8003c0c:	40014000 	.word	0x40014000
 8003c10:	40014400 	.word	0x40014400
 8003c14:	40014800 	.word	0x40014800

08003c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f023 0201 	bic.w	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f023 030a 	bic.w	r3, r3, #10
 8003c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b087      	sub	sp, #28
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f023 0210 	bic.w	r2, r3, #16
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	031b      	lsls	r3, r3, #12
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	621a      	str	r2, [r3, #32]
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f043 0307 	orr.w	r3, r3, #7
 8003cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	609a      	str	r2, [r3, #8]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	021a      	lsls	r2, r3, #8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	609a      	str	r2, [r3, #8]
}
 8003d40:	bf00      	nop
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f003 031f 	and.w	r3, r3, #31
 8003d5e:	2201      	movs	r2, #1
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a1a      	ldr	r2, [r3, #32]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	401a      	ands	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a1a      	ldr	r2, [r3, #32]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	fa01 f303 	lsl.w	r3, r1, r3
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	621a      	str	r2, [r3, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e063      	b.n	8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a2b      	ldr	r2, [pc, #172]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a2a      	ldr	r2, [pc, #168]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d108      	bne.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003dea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1b      	ldr	r2, [pc, #108]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d018      	beq.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e22:	d013      	beq.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a18      	ldr	r2, [pc, #96]	; (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00e      	beq.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d009      	beq.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d004      	beq.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d10c      	bne.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	40012c00 	.word	0x40012c00
 8003e88:	40013400 	.word	0x40013400
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800
 8003e94:	40014000 	.word	0x40014000

08003e98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e065      	b.n	8003f80 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	041b      	lsls	r3, r3, #16
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a16      	ldr	r2, [pc, #88]	; (8003f8c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a14      	ldr	r2, [pc, #80]	; (8003f90 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d115      	bne.n	8003f6e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	051b      	lsls	r3, r3, #20
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40013400 	.word	0x40013400

08003f94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f9c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003fa0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fca:	b084      	sub	sp, #16
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	f107 0014 	add.w	r0, r7, #20
 8003fd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	b004      	add	sp, #16
 800400a:	4770      	bx	lr

0800400c <__libc_init_array>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	4d0d      	ldr	r5, [pc, #52]	; (8004044 <__libc_init_array+0x38>)
 8004010:	4c0d      	ldr	r4, [pc, #52]	; (8004048 <__libc_init_array+0x3c>)
 8004012:	1b64      	subs	r4, r4, r5
 8004014:	10a4      	asrs	r4, r4, #2
 8004016:	2600      	movs	r6, #0
 8004018:	42a6      	cmp	r6, r4
 800401a:	d109      	bne.n	8004030 <__libc_init_array+0x24>
 800401c:	4d0b      	ldr	r5, [pc, #44]	; (800404c <__libc_init_array+0x40>)
 800401e:	4c0c      	ldr	r4, [pc, #48]	; (8004050 <__libc_init_array+0x44>)
 8004020:	f000 f820 	bl	8004064 <_init>
 8004024:	1b64      	subs	r4, r4, r5
 8004026:	10a4      	asrs	r4, r4, #2
 8004028:	2600      	movs	r6, #0
 800402a:	42a6      	cmp	r6, r4
 800402c:	d105      	bne.n	800403a <__libc_init_array+0x2e>
 800402e:	bd70      	pop	{r4, r5, r6, pc}
 8004030:	f855 3b04 	ldr.w	r3, [r5], #4
 8004034:	4798      	blx	r3
 8004036:	3601      	adds	r6, #1
 8004038:	e7ee      	b.n	8004018 <__libc_init_array+0xc>
 800403a:	f855 3b04 	ldr.w	r3, [r5], #4
 800403e:	4798      	blx	r3
 8004040:	3601      	adds	r6, #1
 8004042:	e7f2      	b.n	800402a <__libc_init_array+0x1e>
 8004044:	080040ac 	.word	0x080040ac
 8004048:	080040ac 	.word	0x080040ac
 800404c:	080040ac 	.word	0x080040ac
 8004050:	080040b0 	.word	0x080040b0

08004054 <memset>:
 8004054:	4402      	add	r2, r0
 8004056:	4603      	mov	r3, r0
 8004058:	4293      	cmp	r3, r2
 800405a:	d100      	bne.n	800405e <memset+0xa>
 800405c:	4770      	bx	lr
 800405e:	f803 1b01 	strb.w	r1, [r3], #1
 8004062:	e7f9      	b.n	8004058 <memset+0x4>

08004064 <_init>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr

08004070 <_fini>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	bf00      	nop
 8004074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004076:	bc08      	pop	{r3}
 8004078:	469e      	mov	lr, r3
 800407a:	4770      	bx	lr
