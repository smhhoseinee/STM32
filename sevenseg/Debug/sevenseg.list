
sevenseg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004068  08004068  00014068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004098  08004098  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004098  08004098  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004098  08004098  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000414  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000420  20000420  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012be7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000249a  00000000  00000000  00032c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  000350c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb8  00000000  00000000  00036180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dade  00000000  00000000  00037138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000143bc  00000000  00000000  00054c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4f9f  00000000  00000000  00068fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011df71  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000480c  00000000  00000000  0011dfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004050 	.word	0x08004050

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004050 	.word	0x08004050

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f001 f8b4 	bl	8001338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f810 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f95e 	bl	8000494 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f86e 	bl	80002b8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001dc:	f000 f8ac 	bl	8000338 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80001e0:	f000 f936 	bl	8000450 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80001e4:	f000 f8e6 	bl	80003b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001e8:	4801      	ldr	r0, [pc, #4]	; (80001f0 <main+0x28>)
 80001ea:	f003 fa7d 	bl	80036e8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ee:	e7fe      	b.n	80001ee <main+0x26>
 80001f0:	200000e0 	.word	0x200000e0

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b09e      	sub	sp, #120	; 0x78
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f003 ff1c 	bl	8004040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	605a      	str	r2, [r3, #4]
 8000212:	609a      	str	r2, [r3, #8]
 8000214:	60da      	str	r2, [r3, #12]
 8000216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000218:	463b      	mov	r3, r7
 800021a:	223c      	movs	r2, #60	; 0x3c
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f003 ff0e 	bl	8004040 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000224:	2303      	movs	r3, #3
 8000226:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000228:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800022c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000236:	2310      	movs	r3, #16
 8000238:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000242:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000244:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000248:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800024e:	4618      	mov	r0, r3
 8000250:	f001 fd74 	bl	8001d3c <HAL_RCC_OscConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800025a:	f000 f9bb 	bl	80005d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000262:	2302      	movs	r3, #2
 8000264:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000274:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000278:	2101      	movs	r1, #1
 800027a:	4618      	mov	r0, r3
 800027c:	f002 fd9c 	bl	8002db8 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000286:	f000 f9a5 	bl	80005d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800028a:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <SystemClock_Config+0xc0>)
 800028c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800028e:	2300      	movs	r3, #0
 8000290:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000292:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000296:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000298:	463b      	mov	r3, r7
 800029a:	4618      	mov	r0, r3
 800029c:	f002 ff72 	bl	8003184 <HAL_RCCEx_PeriphCLKConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002a6:	f000 f995 	bl	80005d4 <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3778      	adds	r7, #120	; 0x78
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	00020020 	.word	0x00020020

080002b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <MX_I2C1_Init+0x74>)
 80002be:	4a1c      	ldr	r2, [pc, #112]	; (8000330 <MX_I2C1_Init+0x78>)
 80002c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <MX_I2C1_Init+0x74>)
 80002c4:	4a1b      	ldr	r2, [pc, #108]	; (8000334 <MX_I2C1_Init+0x7c>)
 80002c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <MX_I2C1_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ce:	4b17      	ldr	r3, [pc, #92]	; (800032c <MX_I2C1_Init+0x74>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <MX_I2C1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002da:	4b14      	ldr	r3, [pc, #80]	; (800032c <MX_I2C1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <MX_I2C1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_I2C1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002f2:	480e      	ldr	r0, [pc, #56]	; (800032c <MX_I2C1_Init+0x74>)
 80002f4:	f001 fb2a 	bl	800194c <HAL_I2C_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002fe:	f000 f969 	bl	80005d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000302:	2100      	movs	r1, #0
 8000304:	4809      	ldr	r0, [pc, #36]	; (800032c <MX_I2C1_Init+0x74>)
 8000306:	f001 fbb0 	bl	8001a6a <HAL_I2CEx_ConfigAnalogFilter>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000310:	f000 f960 	bl	80005d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000314:	2100      	movs	r1, #0
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <MX_I2C1_Init+0x74>)
 8000318:	f001 fbf2 	bl	8001b00 <HAL_I2CEx_ConfigDigitalFilter>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000322:	f000 f957 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000028 	.word	0x20000028
 8000330:	40005400 	.word	0x40005400
 8000334:	2000090e 	.word	0x2000090e

08000338 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <MX_SPI1_Init+0x74>)
 800033e:	4a1c      	ldr	r2, [pc, #112]	; (80003b0 <MX_SPI1_Init+0x78>)
 8000340:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <MX_SPI1_Init+0x74>)
 8000344:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000348:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800034a:	4b18      	ldr	r3, [pc, #96]	; (80003ac <MX_SPI1_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <MX_SPI1_Init+0x74>)
 8000352:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000356:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000358:	4b14      	ldr	r3, [pc, #80]	; (80003ac <MX_SPI1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <MX_SPI1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000364:	4b11      	ldr	r3, [pc, #68]	; (80003ac <MX_SPI1_Init+0x74>)
 8000366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800036a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <MX_SPI1_Init+0x74>)
 800036e:	2208      	movs	r2, #8
 8000370:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_SPI1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <MX_SPI1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <MX_SPI1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <MX_SPI1_Init+0x74>)
 8000386:	2207      	movs	r2, #7
 8000388:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <MX_SPI1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_SPI1_Init+0x74>)
 8000392:	2208      	movs	r2, #8
 8000394:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <MX_SPI1_Init+0x74>)
 8000398:	f003 f8a4 	bl	80034e4 <HAL_SPI_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003a2:	f000 f917 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	2000007c 	.word	0x2000007c
 80003b0:	40013000 	.word	0x40013000

080003b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003d2:	4b1e      	ldr	r3, [pc, #120]	; (800044c <MX_TIM2_Init+0x98>)
 80003d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 479;
 80003da:	4b1c      	ldr	r3, [pc, #112]	; (800044c <MX_TIM2_Init+0x98>)
 80003dc:	f240 12df 	movw	r2, #479	; 0x1df
 80003e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <MX_TIM2_Init+0x98>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80003e8:	4b18      	ldr	r3, [pc, #96]	; (800044c <MX_TIM2_Init+0x98>)
 80003ea:	2263      	movs	r2, #99	; 0x63
 80003ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <MX_TIM2_Init+0x98>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f4:	4b15      	ldr	r3, [pc, #84]	; (800044c <MX_TIM2_Init+0x98>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003fa:	4814      	ldr	r0, [pc, #80]	; (800044c <MX_TIM2_Init+0x98>)
 80003fc:	f003 f91d 	bl	800363a <HAL_TIM_Base_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000406:	f000 f8e5 	bl	80005d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800040a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800040e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	480d      	ldr	r0, [pc, #52]	; (800044c <MX_TIM2_Init+0x98>)
 8000418:	f003 faef 	bl	80039fa <HAL_TIM_ConfigClockSource>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000422:	f000 f8d7 	bl	80005d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	4619      	mov	r1, r3
 8000432:	4806      	ldr	r0, [pc, #24]	; (800044c <MX_TIM2_Init+0x98>)
 8000434:	f003 fd06 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800043e:	f000 f8c9 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000442:	bf00      	nop
 8000444:	3720      	adds	r7, #32
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	200000e0 	.word	0x200000e0

08000450 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000454:	4b0d      	ldr	r3, [pc, #52]	; (800048c <MX_USB_PCD_Init+0x3c>)
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <MX_USB_PCD_Init+0x40>)
 8000458:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_USB_PCD_Init+0x3c>)
 800045c:	2208      	movs	r2, #8
 800045e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000460:	4b0a      	ldr	r3, [pc, #40]	; (800048c <MX_USB_PCD_Init+0x3c>)
 8000462:	2202      	movs	r2, #2
 8000464:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000466:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_USB_PCD_Init+0x3c>)
 8000468:	2202      	movs	r2, #2
 800046a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800046c:	4b07      	ldr	r3, [pc, #28]	; (800048c <MX_USB_PCD_Init+0x3c>)
 800046e:	2200      	movs	r2, #0
 8000470:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_USB_PCD_Init+0x3c>)
 8000474:	2200      	movs	r2, #0
 8000476:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000478:	4804      	ldr	r0, [pc, #16]	; (800048c <MX_USB_PCD_Init+0x3c>)
 800047a:	f001 fb8d 	bl	8001b98 <HAL_PCD_Init>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000484:	f000 f8a6 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	2000012c 	.word	0x2000012c
 8000490:	40005c00 	.word	0x40005c00

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08c      	sub	sp, #48	; 0x30
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 031c 	add.w	r3, r7, #28
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004aa:	4b47      	ldr	r3, [pc, #284]	; (80005c8 <MX_GPIO_Init+0x134>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a46      	ldr	r2, [pc, #280]	; (80005c8 <MX_GPIO_Init+0x134>)
 80004b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b44      	ldr	r3, [pc, #272]	; (80005c8 <MX_GPIO_Init+0x134>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004be:	61bb      	str	r3, [r7, #24]
 80004c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	4b41      	ldr	r3, [pc, #260]	; (80005c8 <MX_GPIO_Init+0x134>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a40      	ldr	r2, [pc, #256]	; (80005c8 <MX_GPIO_Init+0x134>)
 80004c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b3e      	ldr	r3, [pc, #248]	; (80005c8 <MX_GPIO_Init+0x134>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004da:	4b3b      	ldr	r3, [pc, #236]	; (80005c8 <MX_GPIO_Init+0x134>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a3a      	ldr	r2, [pc, #232]	; (80005c8 <MX_GPIO_Init+0x134>)
 80004e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b38      	ldr	r3, [pc, #224]	; (80005c8 <MX_GPIO_Init+0x134>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b35      	ldr	r3, [pc, #212]	; (80005c8 <MX_GPIO_Init+0x134>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a34      	ldr	r2, [pc, #208]	; (80005c8 <MX_GPIO_Init+0x134>)
 80004f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fc:	6153      	str	r3, [r2, #20]
 80004fe:	4b32      	ldr	r3, [pc, #200]	; (80005c8 <MX_GPIO_Init+0x134>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800050a:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <MX_GPIO_Init+0x134>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a2e      	ldr	r2, [pc, #184]	; (80005c8 <MX_GPIO_Init+0x134>)
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	6153      	str	r3, [r2, #20]
 8000516:	4b2c      	ldr	r3, [pc, #176]	; (80005c8 <MX_GPIO_Init+0x134>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <MX_GPIO_Init+0x134>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a28      	ldr	r2, [pc, #160]	; (80005c8 <MX_GPIO_Init+0x134>)
 8000528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800052c:	6153      	str	r3, [r2, #20]
 800052e:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <MX_GPIO_Init+0x134>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800053a:	2200      	movs	r2, #0
 800053c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000540:	4822      	ldr	r0, [pc, #136]	; (80005cc <MX_GPIO_Init+0x138>)
 8000542:	f001 f9eb 	bl	800191c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000546:	2200      	movs	r2, #0
 8000548:	21ff      	movs	r1, #255	; 0xff
 800054a:	4821      	ldr	r0, [pc, #132]	; (80005d0 <MX_GPIO_Init+0x13c>)
 800054c:	f001 f9e6 	bl	800191c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000550:	2337      	movs	r3, #55	; 0x37
 8000552:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000554:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	4619      	mov	r1, r3
 8000564:	4819      	ldr	r0, [pc, #100]	; (80005cc <MX_GPIO_Init+0x138>)
 8000566:	f001 f85f 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800056a:	f64f 7308 	movw	r3, #65288	; 0xff08
 800056e:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	2300      	movs	r3, #0
 800057a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800057c:	f107 031c 	add.w	r3, r7, #28
 8000580:	4619      	mov	r1, r3
 8000582:	4812      	ldr	r0, [pc, #72]	; (80005cc <MX_GPIO_Init+0x138>)
 8000584:	f001 f850 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000588:	2301      	movs	r3, #1
 800058a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058c:	2300      	movs	r3, #0
 800058e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000594:	f107 031c 	add.w	r3, r7, #28
 8000598:	4619      	mov	r1, r3
 800059a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059e:	f001 f843 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005a2:	23ff      	movs	r3, #255	; 0xff
 80005a4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	2300      	movs	r3, #0
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_GPIO_Init+0x13c>)
 80005ba:	f001 f835 	bl	8001628 <HAL_GPIO_Init>

}
 80005be:	bf00      	nop
 80005c0:	3730      	adds	r7, #48	; 0x30
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	48001000 	.word	0x48001000
 80005d0:	48000c00 	.word	0x48000c00

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d8:	b672      	cpsid	i
}
 80005da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005dc:	e7fe      	b.n	80005dc <Error_Handler+0x8>
	...

080005e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <HAL_MspInit+0x44>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <HAL_MspInit+0x44>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6193      	str	r3, [r2, #24]
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <HAL_MspInit+0x44>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <HAL_MspInit+0x44>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	4a08      	ldr	r2, [pc, #32]	; (8000624 <HAL_MspInit+0x44>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000608:	61d3      	str	r3, [r2, #28]
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_MspInit+0x44>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000616:	2007      	movs	r0, #7
 8000618:	f000 ffc4 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000

08000628 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <HAL_I2C_MspInit+0x7c>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d127      	bne.n	800069a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <HAL_I2C_MspInit+0x80>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <HAL_I2C_MspInit+0x80>)
 8000650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000654:	6153      	str	r3, [r2, #20]
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_I2C_MspInit+0x80>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000662:	23c0      	movs	r3, #192	; 0xc0
 8000664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000666:	2312      	movs	r3, #18
 8000668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800066a:	2301      	movs	r3, #1
 800066c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066e:	2303      	movs	r3, #3
 8000670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000672:	2304      	movs	r3, #4
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <HAL_I2C_MspInit+0x84>)
 800067e:	f000 ffd3 	bl	8001628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_I2C_MspInit+0x80>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <HAL_I2C_MspInit+0x80>)
 8000688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800068c:	61d3      	str	r3, [r2, #28]
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_I2C_MspInit+0x80>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800069a:	bf00      	nop
 800069c:	3728      	adds	r7, #40	; 0x28
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40005400 	.word	0x40005400
 80006a8:	40021000 	.word	0x40021000
 80006ac:	48000400 	.word	0x48000400

080006b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a17      	ldr	r2, [pc, #92]	; (800072c <HAL_SPI_MspInit+0x7c>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d128      	bne.n	8000724 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <HAL_SPI_MspInit+0x80>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	4a16      	ldr	r2, [pc, #88]	; (8000730 <HAL_SPI_MspInit+0x80>)
 80006d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006dc:	6193      	str	r3, [r2, #24]
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <HAL_SPI_MspInit+0x80>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <HAL_SPI_MspInit+0x80>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a10      	ldr	r2, [pc, #64]	; (8000730 <HAL_SPI_MspInit+0x80>)
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <HAL_SPI_MspInit+0x80>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000702:	23e0      	movs	r3, #224	; 0xe0
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000712:	2305      	movs	r3, #5
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000720:	f000 ff82 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	; 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40013000 	.word	0x40013000
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000744:	d113      	bne.n	800076e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <HAL_TIM_Base_MspInit+0x44>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <HAL_TIM_Base_MspInit+0x44>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <HAL_TIM_Base_MspInit+0x44>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	201c      	movs	r0, #28
 8000764:	f000 ff29 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000768:	201c      	movs	r0, #28
 800076a:	f000 ff42 	bl	80015f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000

0800077c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a18      	ldr	r2, [pc, #96]	; (80007fc <HAL_PCD_MspInit+0x80>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d129      	bne.n	80007f2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <HAL_PCD_MspInit+0x84>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	4a17      	ldr	r2, [pc, #92]	; (8000800 <HAL_PCD_MspInit+0x84>)
 80007a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a8:	6153      	str	r3, [r2, #20]
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <HAL_PCD_MspInit+0x84>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80007b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80007c8:	230e      	movs	r3, #14
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f000 ff27 	bl	8001628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_PCD_MspInit+0x84>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_PCD_MspInit+0x84>)
 80007e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_PCD_MspInit+0x84>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	; 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40005c00 	.word	0x40005c00
 8000800:	40021000 	.word	0x40021000

08000804 <num1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int state=0;
void num1(int a){
 8000804:	b5b0      	push	{r4, r5, r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2101      	movs	r1, #1
 8000810:	488b      	ldr	r0, [pc, #556]	; (8000a40 <num1+0x23c>)
 8000812:	f001 f883 	bl	800191c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,1);
 8000816:	2201      	movs	r2, #1
 8000818:	2102      	movs	r1, #2
 800081a:	4889      	ldr	r0, [pc, #548]	; (8000a40 <num1+0x23c>)
 800081c:	f001 f87e 	bl	800191c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 8000820:	2201      	movs	r2, #1
 8000822:	2104      	movs	r1, #4
 8000824:	4886      	ldr	r0, [pc, #536]	; (8000a40 <num1+0x23c>)
 8000826:	f001 f879 	bl	800191c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 800082a:	2201      	movs	r2, #1
 800082c:	2108      	movs	r1, #8
 800082e:	4884      	ldr	r0, [pc, #528]	; (8000a40 <num1+0x23c>)
 8000830:	f001 f874 	bl	800191c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	4882      	ldr	r0, [pc, #520]	; (8000a44 <num1+0x240>)
 800083a:	f001 f86f 	bl	800191c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 ,a%10);
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4b81      	ldr	r3, [pc, #516]	; (8000a48 <num1+0x244>)
 8000842:	fb83 1302 	smull	r1, r3, r3, r2
 8000846:	1099      	asrs	r1, r3, #2
 8000848:	17d3      	asrs	r3, r2, #31
 800084a:	1ac9      	subs	r1, r1, r3
 800084c:	460b      	mov	r3, r1
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	440b      	add	r3, r1
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	1ad1      	subs	r1, r2, r3
 8000856:	b2cb      	uxtb	r3, r1
 8000858:	461a      	mov	r2, r3
 800085a:	2110      	movs	r1, #16
 800085c:	4878      	ldr	r0, [pc, #480]	; (8000a40 <num1+0x23c>)
 800085e:	f001 f85d 	bl	800191c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,((a%100)-a%10)/10);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a79      	ldr	r2, [pc, #484]	; (8000a4c <num1+0x248>)
 8000866:	fb82 1203 	smull	r1, r2, r2, r3
 800086a:	1151      	asrs	r1, r2, #5
 800086c:	17da      	asrs	r2, r3, #31
 800086e:	1a89      	subs	r1, r1, r2
 8000870:	2264      	movs	r2, #100	; 0x64
 8000872:	fb01 f202 	mul.w	r2, r1, r2
 8000876:	1a99      	subs	r1, r3, r2
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	4b73      	ldr	r3, [pc, #460]	; (8000a48 <num1+0x244>)
 800087c:	fb83 2300 	smull	r2, r3, r3, r0
 8000880:	109a      	asrs	r2, r3, #2
 8000882:	17c3      	asrs	r3, r0, #31
 8000884:	1ad2      	subs	r2, r2, r3
 8000886:	4613      	mov	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	1ac2      	subs	r2, r0, r3
 8000890:	1a8b      	subs	r3, r1, r2
 8000892:	4a6d      	ldr	r2, [pc, #436]	; (8000a48 <num1+0x244>)
 8000894:	fb82 1203 	smull	r1, r2, r2, r3
 8000898:	1092      	asrs	r2, r2, #2
 800089a:	17db      	asrs	r3, r3, #31
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	461a      	mov	r2, r3
 80008a2:	2180      	movs	r1, #128	; 0x80
 80008a4:	4866      	ldr	r0, [pc, #408]	; (8000a40 <num1+0x23c>)
 80008a6:	f001 f839 	bl	800191c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, ((a%1000)-a%10-(((a%100)-a%10)/10))/100);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4a68      	ldr	r2, [pc, #416]	; (8000a50 <num1+0x24c>)
 80008ae:	fb82 1203 	smull	r1, r2, r2, r3
 80008b2:	1191      	asrs	r1, r2, #6
 80008b4:	17da      	asrs	r2, r3, #31
 80008b6:	1a89      	subs	r1, r1, r2
 80008b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008bc:	fb01 f202 	mul.w	r2, r1, r2
 80008c0:	1a99      	subs	r1, r3, r2
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	4b60      	ldr	r3, [pc, #384]	; (8000a48 <num1+0x244>)
 80008c6:	fb83 2300 	smull	r2, r3, r3, r0
 80008ca:	109a      	asrs	r2, r3, #2
 80008cc:	17c3      	asrs	r3, r0, #31
 80008ce:	1ad2      	subs	r2, r2, r3
 80008d0:	4613      	mov	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4413      	add	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	1ac2      	subs	r2, r0, r3
 80008da:	1a8c      	subs	r4, r1, r2
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a5b      	ldr	r2, [pc, #364]	; (8000a4c <num1+0x248>)
 80008e0:	fb82 1203 	smull	r1, r2, r2, r3
 80008e4:	1151      	asrs	r1, r2, #5
 80008e6:	17da      	asrs	r2, r3, #31
 80008e8:	1a89      	subs	r1, r1, r2
 80008ea:	2264      	movs	r2, #100	; 0x64
 80008ec:	fb01 f202 	mul.w	r2, r1, r2
 80008f0:	1a99      	subs	r1, r3, r2
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	4b54      	ldr	r3, [pc, #336]	; (8000a48 <num1+0x244>)
 80008f6:	fb83 2300 	smull	r2, r3, r3, r0
 80008fa:	109a      	asrs	r2, r3, #2
 80008fc:	17c3      	asrs	r3, r0, #31
 80008fe:	1ad2      	subs	r2, r2, r3
 8000900:	4613      	mov	r3, r2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	4413      	add	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	1ac2      	subs	r2, r0, r3
 800090a:	1a8b      	subs	r3, r1, r2
 800090c:	4a4e      	ldr	r2, [pc, #312]	; (8000a48 <num1+0x244>)
 800090e:	fb82 1203 	smull	r1, r2, r2, r3
 8000912:	1092      	asrs	r2, r2, #2
 8000914:	17db      	asrs	r3, r3, #31
 8000916:	1a9b      	subs	r3, r3, r2
 8000918:	4423      	add	r3, r4
 800091a:	4a4c      	ldr	r2, [pc, #304]	; (8000a4c <num1+0x248>)
 800091c:	fb82 1203 	smull	r1, r2, r2, r3
 8000920:	1152      	asrs	r2, r2, #5
 8000922:	17db      	asrs	r3, r3, #31
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	b2db      	uxtb	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	2140      	movs	r1, #64	; 0x40
 800092c:	4844      	ldr	r0, [pc, #272]	; (8000a40 <num1+0x23c>)
 800092e:	f000 fff5 	bl	800191c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, ((a%10000)-a%10-(((a%100)-a%10)/10)-(((a%1000)-a%10-(((a%100)-a%10)/10))/100))/1000);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a47      	ldr	r2, [pc, #284]	; (8000a54 <num1+0x250>)
 8000936:	fb82 1203 	smull	r1, r2, r2, r3
 800093a:	1311      	asrs	r1, r2, #12
 800093c:	17da      	asrs	r2, r3, #31
 800093e:	1a89      	subs	r1, r1, r2
 8000940:	f242 7210 	movw	r2, #10000	; 0x2710
 8000944:	fb01 f202 	mul.w	r2, r1, r2
 8000948:	1a99      	subs	r1, r3, r2
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	4b3e      	ldr	r3, [pc, #248]	; (8000a48 <num1+0x244>)
 800094e:	fb83 2300 	smull	r2, r3, r3, r0
 8000952:	109a      	asrs	r2, r3, #2
 8000954:	17c3      	asrs	r3, r0, #31
 8000956:	1ad2      	subs	r2, r2, r3
 8000958:	4613      	mov	r3, r2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	1ac2      	subs	r2, r0, r3
 8000962:	1a8c      	subs	r4, r1, r2
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a39      	ldr	r2, [pc, #228]	; (8000a4c <num1+0x248>)
 8000968:	fb82 1203 	smull	r1, r2, r2, r3
 800096c:	1151      	asrs	r1, r2, #5
 800096e:	17da      	asrs	r2, r3, #31
 8000970:	1a89      	subs	r1, r1, r2
 8000972:	2264      	movs	r2, #100	; 0x64
 8000974:	fb01 f202 	mul.w	r2, r1, r2
 8000978:	1a99      	subs	r1, r3, r2
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	4b32      	ldr	r3, [pc, #200]	; (8000a48 <num1+0x244>)
 800097e:	fb83 2300 	smull	r2, r3, r3, r0
 8000982:	109a      	asrs	r2, r3, #2
 8000984:	17c3      	asrs	r3, r0, #31
 8000986:	1ad2      	subs	r2, r2, r3
 8000988:	4613      	mov	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4413      	add	r3, r2
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	1ac2      	subs	r2, r0, r3
 8000992:	1a8b      	subs	r3, r1, r2
 8000994:	4a2c      	ldr	r2, [pc, #176]	; (8000a48 <num1+0x244>)
 8000996:	fb82 1203 	smull	r1, r2, r2, r3
 800099a:	1092      	asrs	r2, r2, #2
 800099c:	17db      	asrs	r3, r3, #31
 800099e:	1a9b      	subs	r3, r3, r2
 80009a0:	441c      	add	r4, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a2a      	ldr	r2, [pc, #168]	; (8000a50 <num1+0x24c>)
 80009a6:	fb82 1203 	smull	r1, r2, r2, r3
 80009aa:	1191      	asrs	r1, r2, #6
 80009ac:	17da      	asrs	r2, r3, #31
 80009ae:	1a89      	subs	r1, r1, r2
 80009b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009b4:	fb01 f202 	mul.w	r2, r1, r2
 80009b8:	1a99      	subs	r1, r3, r2
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <num1+0x244>)
 80009be:	fb83 2300 	smull	r2, r3, r3, r0
 80009c2:	109a      	asrs	r2, r3, #2
 80009c4:	17c3      	asrs	r3, r0, #31
 80009c6:	1ad2      	subs	r2, r2, r3
 80009c8:	4613      	mov	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	1ac2      	subs	r2, r0, r3
 80009d2:	1a8d      	subs	r5, r1, r2
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <num1+0x248>)
 80009d8:	fb82 1203 	smull	r1, r2, r2, r3
 80009dc:	1151      	asrs	r1, r2, #5
 80009de:	17da      	asrs	r2, r3, #31
 80009e0:	1a89      	subs	r1, r1, r2
 80009e2:	2264      	movs	r2, #100	; 0x64
 80009e4:	fb01 f202 	mul.w	r2, r1, r2
 80009e8:	1a99      	subs	r1, r3, r2
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <num1+0x244>)
 80009ee:	fb83 2300 	smull	r2, r3, r3, r0
 80009f2:	109a      	asrs	r2, r3, #2
 80009f4:	17c3      	asrs	r3, r0, #31
 80009f6:	1ad2      	subs	r2, r2, r3
 80009f8:	4613      	mov	r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4413      	add	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	1ac2      	subs	r2, r0, r3
 8000a02:	1a8b      	subs	r3, r1, r2
 8000a04:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <num1+0x244>)
 8000a06:	fb82 1203 	smull	r1, r2, r2, r3
 8000a0a:	1092      	asrs	r2, r2, #2
 8000a0c:	17db      	asrs	r3, r3, #31
 8000a0e:	1a9b      	subs	r3, r3, r2
 8000a10:	442b      	add	r3, r5
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <num1+0x248>)
 8000a14:	fb82 1203 	smull	r1, r2, r2, r3
 8000a18:	1152      	asrs	r2, r2, #5
 8000a1a:	17db      	asrs	r3, r3, #31
 8000a1c:	1a9b      	subs	r3, r3, r2
 8000a1e:	4423      	add	r3, r4
 8000a20:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <num1+0x24c>)
 8000a22:	fb82 1203 	smull	r1, r2, r2, r3
 8000a26:	1192      	asrs	r2, r2, #6
 8000a28:	17db      	asrs	r3, r3, #31
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	461a      	mov	r2, r3
 8000a30:	2120      	movs	r1, #32
 8000a32:	4803      	ldr	r0, [pc, #12]	; (8000a40 <num1+0x23c>)
 8000a34:	f000 ff72 	bl	800191c <HAL_GPIO_WritePin>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a40:	48000c00 	.word	0x48000c00
 8000a44:	48000800 	.word	0x48000800
 8000a48:	66666667 	.word	0x66666667
 8000a4c:	51eb851f 	.word	0x51eb851f
 8000a50:	10624dd3 	.word	0x10624dd3
 8000a54:	68db8bad 	.word	0x68db8bad

08000a58 <num2>:

void num2(int b){
 8000a58:	b5b0      	push	{r4, r5, r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2101      	movs	r1, #1
 8000a64:	488b      	ldr	r0, [pc, #556]	; (8000c94 <num2+0x23c>)
 8000a66:	f000 ff59 	bl	800191c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,1);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	4889      	ldr	r0, [pc, #548]	; (8000c94 <num2+0x23c>)
 8000a70:	f000 ff54 	bl	800191c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2104      	movs	r1, #4
 8000a78:	4886      	ldr	r0, [pc, #536]	; (8000c94 <num2+0x23c>)
 8000a7a:	f000 ff4f 	bl	800191c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2108      	movs	r1, #8
 8000a82:	4884      	ldr	r0, [pc, #528]	; (8000c94 <num2+0x23c>)
 8000a84:	f000 ff4a 	bl	800191c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	4882      	ldr	r0, [pc, #520]	; (8000c98 <num2+0x240>)
 8000a8e:	f000 ff45 	bl	800191c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 ,b%10);
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	4b81      	ldr	r3, [pc, #516]	; (8000c9c <num2+0x244>)
 8000a96:	fb83 1302 	smull	r1, r3, r3, r2
 8000a9a:	1099      	asrs	r1, r3, #2
 8000a9c:	17d3      	asrs	r3, r2, #31
 8000a9e:	1ac9      	subs	r1, r1, r3
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	1ad1      	subs	r1, r2, r3
 8000aaa:	b2cb      	uxtb	r3, r1
 8000aac:	461a      	mov	r2, r3
 8000aae:	2110      	movs	r1, #16
 8000ab0:	4878      	ldr	r0, [pc, #480]	; (8000c94 <num2+0x23c>)
 8000ab2:	f000 ff33 	bl	800191c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,((b%100)-b%10)/10);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a79      	ldr	r2, [pc, #484]	; (8000ca0 <num2+0x248>)
 8000aba:	fb82 1203 	smull	r1, r2, r2, r3
 8000abe:	1151      	asrs	r1, r2, #5
 8000ac0:	17da      	asrs	r2, r3, #31
 8000ac2:	1a89      	subs	r1, r1, r2
 8000ac4:	2264      	movs	r2, #100	; 0x64
 8000ac6:	fb01 f202 	mul.w	r2, r1, r2
 8000aca:	1a99      	subs	r1, r3, r2
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	4b73      	ldr	r3, [pc, #460]	; (8000c9c <num2+0x244>)
 8000ad0:	fb83 2300 	smull	r2, r3, r3, r0
 8000ad4:	109a      	asrs	r2, r3, #2
 8000ad6:	17c3      	asrs	r3, r0, #31
 8000ad8:	1ad2      	subs	r2, r2, r3
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	1ac2      	subs	r2, r0, r3
 8000ae4:	1a8b      	subs	r3, r1, r2
 8000ae6:	4a6d      	ldr	r2, [pc, #436]	; (8000c9c <num2+0x244>)
 8000ae8:	fb82 1203 	smull	r1, r2, r2, r3
 8000aec:	1092      	asrs	r2, r2, #2
 8000aee:	17db      	asrs	r3, r3, #31
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	461a      	mov	r2, r3
 8000af6:	2180      	movs	r1, #128	; 0x80
 8000af8:	4866      	ldr	r0, [pc, #408]	; (8000c94 <num2+0x23c>)
 8000afa:	f000 ff0f 	bl	800191c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, ((b%1000)-b%10-(((b%100)-b%10)/10))/100);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a68      	ldr	r2, [pc, #416]	; (8000ca4 <num2+0x24c>)
 8000b02:	fb82 1203 	smull	r1, r2, r2, r3
 8000b06:	1191      	asrs	r1, r2, #6
 8000b08:	17da      	asrs	r2, r3, #31
 8000b0a:	1a89      	subs	r1, r1, r2
 8000b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b10:	fb01 f202 	mul.w	r2, r1, r2
 8000b14:	1a99      	subs	r1, r3, r2
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	4b60      	ldr	r3, [pc, #384]	; (8000c9c <num2+0x244>)
 8000b1a:	fb83 2300 	smull	r2, r3, r3, r0
 8000b1e:	109a      	asrs	r2, r3, #2
 8000b20:	17c3      	asrs	r3, r0, #31
 8000b22:	1ad2      	subs	r2, r2, r3
 8000b24:	4613      	mov	r3, r2
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	4413      	add	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	1ac2      	subs	r2, r0, r3
 8000b2e:	1a8c      	subs	r4, r1, r2
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a5b      	ldr	r2, [pc, #364]	; (8000ca0 <num2+0x248>)
 8000b34:	fb82 1203 	smull	r1, r2, r2, r3
 8000b38:	1151      	asrs	r1, r2, #5
 8000b3a:	17da      	asrs	r2, r3, #31
 8000b3c:	1a89      	subs	r1, r1, r2
 8000b3e:	2264      	movs	r2, #100	; 0x64
 8000b40:	fb01 f202 	mul.w	r2, r1, r2
 8000b44:	1a99      	subs	r1, r3, r2
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	4b54      	ldr	r3, [pc, #336]	; (8000c9c <num2+0x244>)
 8000b4a:	fb83 2300 	smull	r2, r3, r3, r0
 8000b4e:	109a      	asrs	r2, r3, #2
 8000b50:	17c3      	asrs	r3, r0, #31
 8000b52:	1ad2      	subs	r2, r2, r3
 8000b54:	4613      	mov	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	1ac2      	subs	r2, r0, r3
 8000b5e:	1a8b      	subs	r3, r1, r2
 8000b60:	4a4e      	ldr	r2, [pc, #312]	; (8000c9c <num2+0x244>)
 8000b62:	fb82 1203 	smull	r1, r2, r2, r3
 8000b66:	1092      	asrs	r2, r2, #2
 8000b68:	17db      	asrs	r3, r3, #31
 8000b6a:	1a9b      	subs	r3, r3, r2
 8000b6c:	4423      	add	r3, r4
 8000b6e:	4a4c      	ldr	r2, [pc, #304]	; (8000ca0 <num2+0x248>)
 8000b70:	fb82 1203 	smull	r1, r2, r2, r3
 8000b74:	1152      	asrs	r2, r2, #5
 8000b76:	17db      	asrs	r3, r3, #31
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	2140      	movs	r1, #64	; 0x40
 8000b80:	4844      	ldr	r0, [pc, #272]	; (8000c94 <num2+0x23c>)
 8000b82:	f000 fecb 	bl	800191c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, ((b%10000)-b%10-(((b%100)-b%10)/10)-(((b%1000)-b%10-(((b%100)-b%10)/10))/100))/1000);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a47      	ldr	r2, [pc, #284]	; (8000ca8 <num2+0x250>)
 8000b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b8e:	1311      	asrs	r1, r2, #12
 8000b90:	17da      	asrs	r2, r3, #31
 8000b92:	1a89      	subs	r1, r1, r2
 8000b94:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b98:	fb01 f202 	mul.w	r2, r1, r2
 8000b9c:	1a99      	subs	r1, r3, r2
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <num2+0x244>)
 8000ba2:	fb83 2300 	smull	r2, r3, r3, r0
 8000ba6:	109a      	asrs	r2, r3, #2
 8000ba8:	17c3      	asrs	r3, r0, #31
 8000baa:	1ad2      	subs	r2, r2, r3
 8000bac:	4613      	mov	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	1ac2      	subs	r2, r0, r3
 8000bb6:	1a8c      	subs	r4, r1, r2
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a39      	ldr	r2, [pc, #228]	; (8000ca0 <num2+0x248>)
 8000bbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc0:	1151      	asrs	r1, r2, #5
 8000bc2:	17da      	asrs	r2, r3, #31
 8000bc4:	1a89      	subs	r1, r1, r2
 8000bc6:	2264      	movs	r2, #100	; 0x64
 8000bc8:	fb01 f202 	mul.w	r2, r1, r2
 8000bcc:	1a99      	subs	r1, r3, r2
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <num2+0x244>)
 8000bd2:	fb83 2300 	smull	r2, r3, r3, r0
 8000bd6:	109a      	asrs	r2, r3, #2
 8000bd8:	17c3      	asrs	r3, r0, #31
 8000bda:	1ad2      	subs	r2, r2, r3
 8000bdc:	4613      	mov	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	1ac2      	subs	r2, r0, r3
 8000be6:	1a8b      	subs	r3, r1, r2
 8000be8:	4a2c      	ldr	r2, [pc, #176]	; (8000c9c <num2+0x244>)
 8000bea:	fb82 1203 	smull	r1, r2, r2, r3
 8000bee:	1092      	asrs	r2, r2, #2
 8000bf0:	17db      	asrs	r3, r3, #31
 8000bf2:	1a9b      	subs	r3, r3, r2
 8000bf4:	441c      	add	r4, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a2a      	ldr	r2, [pc, #168]	; (8000ca4 <num2+0x24c>)
 8000bfa:	fb82 1203 	smull	r1, r2, r2, r3
 8000bfe:	1191      	asrs	r1, r2, #6
 8000c00:	17da      	asrs	r2, r3, #31
 8000c02:	1a89      	subs	r1, r1, r2
 8000c04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c08:	fb01 f202 	mul.w	r2, r1, r2
 8000c0c:	1a99      	subs	r1, r3, r2
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <num2+0x244>)
 8000c12:	fb83 2300 	smull	r2, r3, r3, r0
 8000c16:	109a      	asrs	r2, r3, #2
 8000c18:	17c3      	asrs	r3, r0, #31
 8000c1a:	1ad2      	subs	r2, r2, r3
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	1ac2      	subs	r2, r0, r3
 8000c26:	1a8d      	subs	r5, r1, r2
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a1d      	ldr	r2, [pc, #116]	; (8000ca0 <num2+0x248>)
 8000c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c30:	1151      	asrs	r1, r2, #5
 8000c32:	17da      	asrs	r2, r3, #31
 8000c34:	1a89      	subs	r1, r1, r2
 8000c36:	2264      	movs	r2, #100	; 0x64
 8000c38:	fb01 f202 	mul.w	r2, r1, r2
 8000c3c:	1a99      	subs	r1, r3, r2
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <num2+0x244>)
 8000c42:	fb83 2300 	smull	r2, r3, r3, r0
 8000c46:	109a      	asrs	r2, r3, #2
 8000c48:	17c3      	asrs	r3, r0, #31
 8000c4a:	1ad2      	subs	r2, r2, r3
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	1ac2      	subs	r2, r0, r3
 8000c56:	1a8b      	subs	r3, r1, r2
 8000c58:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <num2+0x244>)
 8000c5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c5e:	1092      	asrs	r2, r2, #2
 8000c60:	17db      	asrs	r3, r3, #31
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	442b      	add	r3, r5
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <num2+0x248>)
 8000c68:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6c:	1152      	asrs	r2, r2, #5
 8000c6e:	17db      	asrs	r3, r3, #31
 8000c70:	1a9b      	subs	r3, r3, r2
 8000c72:	4423      	add	r3, r4
 8000c74:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <num2+0x24c>)
 8000c76:	fb82 1203 	smull	r1, r2, r2, r3
 8000c7a:	1192      	asrs	r2, r2, #6
 8000c7c:	17db      	asrs	r3, r3, #31
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	2120      	movs	r1, #32
 8000c86:	4803      	ldr	r0, [pc, #12]	; (8000c94 <num2+0x23c>)
 8000c88:	f000 fe48 	bl	800191c <HAL_GPIO_WritePin>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bdb0      	pop	{r4, r5, r7, pc}
 8000c94:	48000c00 	.word	0x48000c00
 8000c98:	48000800 	.word	0x48000800
 8000c9c:	66666667 	.word	0x66666667
 8000ca0:	51eb851f 	.word	0x51eb851f
 8000ca4:	10624dd3 	.word	0x10624dd3
 8000ca8:	68db8bad 	.word	0x68db8bad

08000cac <num3>:

void num3(int c){
 8000cac:	b5b0      	push	{r4, r5, r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	488b      	ldr	r0, [pc, #556]	; (8000ee8 <num3+0x23c>)
 8000cba:	f000 fe2f 	bl	800191c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,1);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	4889      	ldr	r0, [pc, #548]	; (8000ee8 <num3+0x23c>)
 8000cc4:	f000 fe2a 	bl	800191c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2104      	movs	r1, #4
 8000ccc:	4886      	ldr	r0, [pc, #536]	; (8000ee8 <num3+0x23c>)
 8000cce:	f000 fe25 	bl	800191c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	4884      	ldr	r0, [pc, #528]	; (8000ee8 <num3+0x23c>)
 8000cd8:	f000 fe20 	bl	800191c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2108      	movs	r1, #8
 8000ce0:	4882      	ldr	r0, [pc, #520]	; (8000eec <num3+0x240>)
 8000ce2:	f000 fe1b 	bl	800191c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 ,c%10);
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	4b81      	ldr	r3, [pc, #516]	; (8000ef0 <num3+0x244>)
 8000cea:	fb83 1302 	smull	r1, r3, r3, r2
 8000cee:	1099      	asrs	r1, r3, #2
 8000cf0:	17d3      	asrs	r3, r2, #31
 8000cf2:	1ac9      	subs	r1, r1, r3
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	1ad1      	subs	r1, r2, r3
 8000cfe:	b2cb      	uxtb	r3, r1
 8000d00:	461a      	mov	r2, r3
 8000d02:	2110      	movs	r1, #16
 8000d04:	4878      	ldr	r0, [pc, #480]	; (8000ee8 <num3+0x23c>)
 8000d06:	f000 fe09 	bl	800191c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,((c%100)-c%10)/10);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a79      	ldr	r2, [pc, #484]	; (8000ef4 <num3+0x248>)
 8000d0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d12:	1151      	asrs	r1, r2, #5
 8000d14:	17da      	asrs	r2, r3, #31
 8000d16:	1a89      	subs	r1, r1, r2
 8000d18:	2264      	movs	r2, #100	; 0x64
 8000d1a:	fb01 f202 	mul.w	r2, r1, r2
 8000d1e:	1a99      	subs	r1, r3, r2
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	4b73      	ldr	r3, [pc, #460]	; (8000ef0 <num3+0x244>)
 8000d24:	fb83 2300 	smull	r2, r3, r3, r0
 8000d28:	109a      	asrs	r2, r3, #2
 8000d2a:	17c3      	asrs	r3, r0, #31
 8000d2c:	1ad2      	subs	r2, r2, r3
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	1ac2      	subs	r2, r0, r3
 8000d38:	1a8b      	subs	r3, r1, r2
 8000d3a:	4a6d      	ldr	r2, [pc, #436]	; (8000ef0 <num3+0x244>)
 8000d3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d40:	1092      	asrs	r2, r2, #2
 8000d42:	17db      	asrs	r3, r3, #31
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	461a      	mov	r2, r3
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	4866      	ldr	r0, [pc, #408]	; (8000ee8 <num3+0x23c>)
 8000d4e:	f000 fde5 	bl	800191c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, ((c%1000)-c%10-(((c%100)-c%10)/10))/100);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a68      	ldr	r2, [pc, #416]	; (8000ef8 <num3+0x24c>)
 8000d56:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5a:	1191      	asrs	r1, r2, #6
 8000d5c:	17da      	asrs	r2, r3, #31
 8000d5e:	1a89      	subs	r1, r1, r2
 8000d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d64:	fb01 f202 	mul.w	r2, r1, r2
 8000d68:	1a99      	subs	r1, r3, r2
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	4b60      	ldr	r3, [pc, #384]	; (8000ef0 <num3+0x244>)
 8000d6e:	fb83 2300 	smull	r2, r3, r3, r0
 8000d72:	109a      	asrs	r2, r3, #2
 8000d74:	17c3      	asrs	r3, r0, #31
 8000d76:	1ad2      	subs	r2, r2, r3
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	1ac2      	subs	r2, r0, r3
 8000d82:	1a8c      	subs	r4, r1, r2
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a5b      	ldr	r2, [pc, #364]	; (8000ef4 <num3+0x248>)
 8000d88:	fb82 1203 	smull	r1, r2, r2, r3
 8000d8c:	1151      	asrs	r1, r2, #5
 8000d8e:	17da      	asrs	r2, r3, #31
 8000d90:	1a89      	subs	r1, r1, r2
 8000d92:	2264      	movs	r2, #100	; 0x64
 8000d94:	fb01 f202 	mul.w	r2, r1, r2
 8000d98:	1a99      	subs	r1, r3, r2
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	4b54      	ldr	r3, [pc, #336]	; (8000ef0 <num3+0x244>)
 8000d9e:	fb83 2300 	smull	r2, r3, r3, r0
 8000da2:	109a      	asrs	r2, r3, #2
 8000da4:	17c3      	asrs	r3, r0, #31
 8000da6:	1ad2      	subs	r2, r2, r3
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	1ac2      	subs	r2, r0, r3
 8000db2:	1a8b      	subs	r3, r1, r2
 8000db4:	4a4e      	ldr	r2, [pc, #312]	; (8000ef0 <num3+0x244>)
 8000db6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dba:	1092      	asrs	r2, r2, #2
 8000dbc:	17db      	asrs	r3, r3, #31
 8000dbe:	1a9b      	subs	r3, r3, r2
 8000dc0:	4423      	add	r3, r4
 8000dc2:	4a4c      	ldr	r2, [pc, #304]	; (8000ef4 <num3+0x248>)
 8000dc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc8:	1152      	asrs	r2, r2, #5
 8000dca:	17db      	asrs	r3, r3, #31
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	2140      	movs	r1, #64	; 0x40
 8000dd4:	4844      	ldr	r0, [pc, #272]	; (8000ee8 <num3+0x23c>)
 8000dd6:	f000 fda1 	bl	800191c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, ((c%10000)-c%10-(((c%100)-c%10)/10)-(((c%1000)-c%10-(((c%100)-c%10)/10))/100))/1000);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a47      	ldr	r2, [pc, #284]	; (8000efc <num3+0x250>)
 8000dde:	fb82 1203 	smull	r1, r2, r2, r3
 8000de2:	1311      	asrs	r1, r2, #12
 8000de4:	17da      	asrs	r2, r3, #31
 8000de6:	1a89      	subs	r1, r1, r2
 8000de8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000dec:	fb01 f202 	mul.w	r2, r1, r2
 8000df0:	1a99      	subs	r1, r3, r2
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	4b3e      	ldr	r3, [pc, #248]	; (8000ef0 <num3+0x244>)
 8000df6:	fb83 2300 	smull	r2, r3, r3, r0
 8000dfa:	109a      	asrs	r2, r3, #2
 8000dfc:	17c3      	asrs	r3, r0, #31
 8000dfe:	1ad2      	subs	r2, r2, r3
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	1ac2      	subs	r2, r0, r3
 8000e0a:	1a8c      	subs	r4, r1, r2
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a39      	ldr	r2, [pc, #228]	; (8000ef4 <num3+0x248>)
 8000e10:	fb82 1203 	smull	r1, r2, r2, r3
 8000e14:	1151      	asrs	r1, r2, #5
 8000e16:	17da      	asrs	r2, r3, #31
 8000e18:	1a89      	subs	r1, r1, r2
 8000e1a:	2264      	movs	r2, #100	; 0x64
 8000e1c:	fb01 f202 	mul.w	r2, r1, r2
 8000e20:	1a99      	subs	r1, r3, r2
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	4b32      	ldr	r3, [pc, #200]	; (8000ef0 <num3+0x244>)
 8000e26:	fb83 2300 	smull	r2, r3, r3, r0
 8000e2a:	109a      	asrs	r2, r3, #2
 8000e2c:	17c3      	asrs	r3, r0, #31
 8000e2e:	1ad2      	subs	r2, r2, r3
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	1ac2      	subs	r2, r0, r3
 8000e3a:	1a8b      	subs	r3, r1, r2
 8000e3c:	4a2c      	ldr	r2, [pc, #176]	; (8000ef0 <num3+0x244>)
 8000e3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e42:	1092      	asrs	r2, r2, #2
 8000e44:	17db      	asrs	r3, r3, #31
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	441c      	add	r4, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a2a      	ldr	r2, [pc, #168]	; (8000ef8 <num3+0x24c>)
 8000e4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e52:	1191      	asrs	r1, r2, #6
 8000e54:	17da      	asrs	r2, r3, #31
 8000e56:	1a89      	subs	r1, r1, r2
 8000e58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e5c:	fb01 f202 	mul.w	r2, r1, r2
 8000e60:	1a99      	subs	r1, r3, r2
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <num3+0x244>)
 8000e66:	fb83 2300 	smull	r2, r3, r3, r0
 8000e6a:	109a      	asrs	r2, r3, #2
 8000e6c:	17c3      	asrs	r3, r0, #31
 8000e6e:	1ad2      	subs	r2, r2, r3
 8000e70:	4613      	mov	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	1ac2      	subs	r2, r0, r3
 8000e7a:	1a8d      	subs	r5, r1, r2
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <num3+0x248>)
 8000e80:	fb82 1203 	smull	r1, r2, r2, r3
 8000e84:	1151      	asrs	r1, r2, #5
 8000e86:	17da      	asrs	r2, r3, #31
 8000e88:	1a89      	subs	r1, r1, r2
 8000e8a:	2264      	movs	r2, #100	; 0x64
 8000e8c:	fb01 f202 	mul.w	r2, r1, r2
 8000e90:	1a99      	subs	r1, r3, r2
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <num3+0x244>)
 8000e96:	fb83 2300 	smull	r2, r3, r3, r0
 8000e9a:	109a      	asrs	r2, r3, #2
 8000e9c:	17c3      	asrs	r3, r0, #31
 8000e9e:	1ad2      	subs	r2, r2, r3
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	1ac2      	subs	r2, r0, r3
 8000eaa:	1a8b      	subs	r3, r1, r2
 8000eac:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <num3+0x244>)
 8000eae:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb2:	1092      	asrs	r2, r2, #2
 8000eb4:	17db      	asrs	r3, r3, #31
 8000eb6:	1a9b      	subs	r3, r3, r2
 8000eb8:	442b      	add	r3, r5
 8000eba:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <num3+0x248>)
 8000ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec0:	1152      	asrs	r2, r2, #5
 8000ec2:	17db      	asrs	r3, r3, #31
 8000ec4:	1a9b      	subs	r3, r3, r2
 8000ec6:	4423      	add	r3, r4
 8000ec8:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <num3+0x24c>)
 8000eca:	fb82 1203 	smull	r1, r2, r2, r3
 8000ece:	1192      	asrs	r2, r2, #6
 8000ed0:	17db      	asrs	r3, r3, #31
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	2120      	movs	r1, #32
 8000eda:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <num3+0x23c>)
 8000edc:	f000 fd1e 	bl	800191c <HAL_GPIO_WritePin>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee8:	48000c00 	.word	0x48000c00
 8000eec:	48000800 	.word	0x48000800
 8000ef0:	66666667 	.word	0x66666667
 8000ef4:	51eb851f 	.word	0x51eb851f
 8000ef8:	10624dd3 	.word	0x10624dd3
 8000efc:	68db8bad 	.word	0x68db8bad

08000f00 <num4>:
void num4(int d){
 8000f00:	b5b0      	push	{r4, r5, r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	488b      	ldr	r0, [pc, #556]	; (800113c <num4+0x23c>)
 8000f0e:	f000 fd05 	bl	800191c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2102      	movs	r1, #2
 8000f16:	4889      	ldr	r0, [pc, #548]	; (800113c <num4+0x23c>)
 8000f18:	f000 fd00 	bl	800191c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2104      	movs	r1, #4
 8000f20:	4886      	ldr	r0, [pc, #536]	; (800113c <num4+0x23c>)
 8000f22:	f000 fcfb 	bl	800191c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2108      	movs	r1, #8
 8000f2a:	4884      	ldr	r0, [pc, #528]	; (800113c <num4+0x23c>)
 8000f2c:	f000 fcf6 	bl	800191c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2101      	movs	r1, #1
 8000f34:	4882      	ldr	r0, [pc, #520]	; (8001140 <num4+0x240>)
 8000f36:	f000 fcf1 	bl	800191c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 ,d%10);
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	4b81      	ldr	r3, [pc, #516]	; (8001144 <num4+0x244>)
 8000f3e:	fb83 1302 	smull	r1, r3, r3, r2
 8000f42:	1099      	asrs	r1, r3, #2
 8000f44:	17d3      	asrs	r3, r2, #31
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	460b      	mov	r3, r1
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	1ad1      	subs	r1, r2, r3
 8000f52:	b2cb      	uxtb	r3, r1
 8000f54:	461a      	mov	r2, r3
 8000f56:	2110      	movs	r1, #16
 8000f58:	4878      	ldr	r0, [pc, #480]	; (800113c <num4+0x23c>)
 8000f5a:	f000 fcdf 	bl	800191c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,((d%100)-d%10)/10);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a79      	ldr	r2, [pc, #484]	; (8001148 <num4+0x248>)
 8000f62:	fb82 1203 	smull	r1, r2, r2, r3
 8000f66:	1151      	asrs	r1, r2, #5
 8000f68:	17da      	asrs	r2, r3, #31
 8000f6a:	1a89      	subs	r1, r1, r2
 8000f6c:	2264      	movs	r2, #100	; 0x64
 8000f6e:	fb01 f202 	mul.w	r2, r1, r2
 8000f72:	1a99      	subs	r1, r3, r2
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	4b73      	ldr	r3, [pc, #460]	; (8001144 <num4+0x244>)
 8000f78:	fb83 2300 	smull	r2, r3, r3, r0
 8000f7c:	109a      	asrs	r2, r3, #2
 8000f7e:	17c3      	asrs	r3, r0, #31
 8000f80:	1ad2      	subs	r2, r2, r3
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	1ac2      	subs	r2, r0, r3
 8000f8c:	1a8b      	subs	r3, r1, r2
 8000f8e:	4a6d      	ldr	r2, [pc, #436]	; (8001144 <num4+0x244>)
 8000f90:	fb82 1203 	smull	r1, r2, r2, r3
 8000f94:	1092      	asrs	r2, r2, #2
 8000f96:	17db      	asrs	r3, r3, #31
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	2180      	movs	r1, #128	; 0x80
 8000fa0:	4866      	ldr	r0, [pc, #408]	; (800113c <num4+0x23c>)
 8000fa2:	f000 fcbb 	bl	800191c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, ((d%1000)-d%10-(((d%100)-d%10)/10))/100);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a68      	ldr	r2, [pc, #416]	; (800114c <num4+0x24c>)
 8000faa:	fb82 1203 	smull	r1, r2, r2, r3
 8000fae:	1191      	asrs	r1, r2, #6
 8000fb0:	17da      	asrs	r2, r3, #31
 8000fb2:	1a89      	subs	r1, r1, r2
 8000fb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fb8:	fb01 f202 	mul.w	r2, r1, r2
 8000fbc:	1a99      	subs	r1, r3, r2
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	4b60      	ldr	r3, [pc, #384]	; (8001144 <num4+0x244>)
 8000fc2:	fb83 2300 	smull	r2, r3, r3, r0
 8000fc6:	109a      	asrs	r2, r3, #2
 8000fc8:	17c3      	asrs	r3, r0, #31
 8000fca:	1ad2      	subs	r2, r2, r3
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	1ac2      	subs	r2, r0, r3
 8000fd6:	1a8c      	subs	r4, r1, r2
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a5b      	ldr	r2, [pc, #364]	; (8001148 <num4+0x248>)
 8000fdc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe0:	1151      	asrs	r1, r2, #5
 8000fe2:	17da      	asrs	r2, r3, #31
 8000fe4:	1a89      	subs	r1, r1, r2
 8000fe6:	2264      	movs	r2, #100	; 0x64
 8000fe8:	fb01 f202 	mul.w	r2, r1, r2
 8000fec:	1a99      	subs	r1, r3, r2
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	4b54      	ldr	r3, [pc, #336]	; (8001144 <num4+0x244>)
 8000ff2:	fb83 2300 	smull	r2, r3, r3, r0
 8000ff6:	109a      	asrs	r2, r3, #2
 8000ff8:	17c3      	asrs	r3, r0, #31
 8000ffa:	1ad2      	subs	r2, r2, r3
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	1ac2      	subs	r2, r0, r3
 8001006:	1a8b      	subs	r3, r1, r2
 8001008:	4a4e      	ldr	r2, [pc, #312]	; (8001144 <num4+0x244>)
 800100a:	fb82 1203 	smull	r1, r2, r2, r3
 800100e:	1092      	asrs	r2, r2, #2
 8001010:	17db      	asrs	r3, r3, #31
 8001012:	1a9b      	subs	r3, r3, r2
 8001014:	4423      	add	r3, r4
 8001016:	4a4c      	ldr	r2, [pc, #304]	; (8001148 <num4+0x248>)
 8001018:	fb82 1203 	smull	r1, r2, r2, r3
 800101c:	1152      	asrs	r2, r2, #5
 800101e:	17db      	asrs	r3, r3, #31
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	461a      	mov	r2, r3
 8001026:	2140      	movs	r1, #64	; 0x40
 8001028:	4844      	ldr	r0, [pc, #272]	; (800113c <num4+0x23c>)
 800102a:	f000 fc77 	bl	800191c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, ((d%10000)-d%10-(((d%100)-d%10)/10)-(((d%1000)-d%10-(((d%100)-d%10)/10))/100))/1000);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a47      	ldr	r2, [pc, #284]	; (8001150 <num4+0x250>)
 8001032:	fb82 1203 	smull	r1, r2, r2, r3
 8001036:	1311      	asrs	r1, r2, #12
 8001038:	17da      	asrs	r2, r3, #31
 800103a:	1a89      	subs	r1, r1, r2
 800103c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001040:	fb01 f202 	mul.w	r2, r1, r2
 8001044:	1a99      	subs	r1, r3, r2
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	4b3e      	ldr	r3, [pc, #248]	; (8001144 <num4+0x244>)
 800104a:	fb83 2300 	smull	r2, r3, r3, r0
 800104e:	109a      	asrs	r2, r3, #2
 8001050:	17c3      	asrs	r3, r0, #31
 8001052:	1ad2      	subs	r2, r2, r3
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	1ac2      	subs	r2, r0, r3
 800105e:	1a8c      	subs	r4, r1, r2
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a39      	ldr	r2, [pc, #228]	; (8001148 <num4+0x248>)
 8001064:	fb82 1203 	smull	r1, r2, r2, r3
 8001068:	1151      	asrs	r1, r2, #5
 800106a:	17da      	asrs	r2, r3, #31
 800106c:	1a89      	subs	r1, r1, r2
 800106e:	2264      	movs	r2, #100	; 0x64
 8001070:	fb01 f202 	mul.w	r2, r1, r2
 8001074:	1a99      	subs	r1, r3, r2
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	4b32      	ldr	r3, [pc, #200]	; (8001144 <num4+0x244>)
 800107a:	fb83 2300 	smull	r2, r3, r3, r0
 800107e:	109a      	asrs	r2, r3, #2
 8001080:	17c3      	asrs	r3, r0, #31
 8001082:	1ad2      	subs	r2, r2, r3
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	1ac2      	subs	r2, r0, r3
 800108e:	1a8b      	subs	r3, r1, r2
 8001090:	4a2c      	ldr	r2, [pc, #176]	; (8001144 <num4+0x244>)
 8001092:	fb82 1203 	smull	r1, r2, r2, r3
 8001096:	1092      	asrs	r2, r2, #2
 8001098:	17db      	asrs	r3, r3, #31
 800109a:	1a9b      	subs	r3, r3, r2
 800109c:	441c      	add	r4, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a2a      	ldr	r2, [pc, #168]	; (800114c <num4+0x24c>)
 80010a2:	fb82 1203 	smull	r1, r2, r2, r3
 80010a6:	1191      	asrs	r1, r2, #6
 80010a8:	17da      	asrs	r2, r3, #31
 80010aa:	1a89      	subs	r1, r1, r2
 80010ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010b0:	fb01 f202 	mul.w	r2, r1, r2
 80010b4:	1a99      	subs	r1, r3, r2
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <num4+0x244>)
 80010ba:	fb83 2300 	smull	r2, r3, r3, r0
 80010be:	109a      	asrs	r2, r3, #2
 80010c0:	17c3      	asrs	r3, r0, #31
 80010c2:	1ad2      	subs	r2, r2, r3
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	1ac2      	subs	r2, r0, r3
 80010ce:	1a8d      	subs	r5, r1, r2
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <num4+0x248>)
 80010d4:	fb82 1203 	smull	r1, r2, r2, r3
 80010d8:	1151      	asrs	r1, r2, #5
 80010da:	17da      	asrs	r2, r3, #31
 80010dc:	1a89      	subs	r1, r1, r2
 80010de:	2264      	movs	r2, #100	; 0x64
 80010e0:	fb01 f202 	mul.w	r2, r1, r2
 80010e4:	1a99      	subs	r1, r3, r2
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <num4+0x244>)
 80010ea:	fb83 2300 	smull	r2, r3, r3, r0
 80010ee:	109a      	asrs	r2, r3, #2
 80010f0:	17c3      	asrs	r3, r0, #31
 80010f2:	1ad2      	subs	r2, r2, r3
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	1ac2      	subs	r2, r0, r3
 80010fe:	1a8b      	subs	r3, r1, r2
 8001100:	4a10      	ldr	r2, [pc, #64]	; (8001144 <num4+0x244>)
 8001102:	fb82 1203 	smull	r1, r2, r2, r3
 8001106:	1092      	asrs	r2, r2, #2
 8001108:	17db      	asrs	r3, r3, #31
 800110a:	1a9b      	subs	r3, r3, r2
 800110c:	442b      	add	r3, r5
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <num4+0x248>)
 8001110:	fb82 1203 	smull	r1, r2, r2, r3
 8001114:	1152      	asrs	r2, r2, #5
 8001116:	17db      	asrs	r3, r3, #31
 8001118:	1a9b      	subs	r3, r3, r2
 800111a:	4423      	add	r3, r4
 800111c:	4a0b      	ldr	r2, [pc, #44]	; (800114c <num4+0x24c>)
 800111e:	fb82 1203 	smull	r1, r2, r2, r3
 8001122:	1192      	asrs	r2, r2, #6
 8001124:	17db      	asrs	r3, r3, #31
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	461a      	mov	r2, r3
 800112c:	2120      	movs	r1, #32
 800112e:	4803      	ldr	r0, [pc, #12]	; (800113c <num4+0x23c>)
 8001130:	f000 fbf4 	bl	800191c <HAL_GPIO_WritePin>

}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bdb0      	pop	{r4, r5, r7, pc}
 800113c:	48000c00 	.word	0x48000c00
 8001140:	48000800 	.word	0x48000800
 8001144:	66666667 	.word	0x66666667
 8001148:	51eb851f 	.word	0x51eb851f
 800114c:	10624dd3 	.word	0x10624dd3
 8001150:	68db8bad 	.word	0x68db8bad

08001154 <decimalToBinary>:
int decimalToBinary(int num) {
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    if (num == 0) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <decimalToBinary+0x12>
        return 0;
 8001162:	2300      	movs	r3, #0
 8001164:	e035      	b.n	80011d2 <decimalToBinary+0x7e>
    }

   // Stores binary representation of number.
   int binaryNum[4]={0,0,0,0}; // Assuming 32 bit integer.
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
   int i=0;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]

   for ( ;num > 0; ){
 8001178:	e012      	b.n	80011a0 <decimalToBinary+0x4c>
      binaryNum[i++] = num % 2;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	1c5a      	adds	r2, r3, #1
 800117e:	61fa      	str	r2, [r7, #28]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	2a00      	cmp	r2, #0
 8001184:	f002 0201 	and.w	r2, r2, #1
 8001188:	bfb8      	it	lt
 800118a:	4252      	neglt	r2, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	3320      	adds	r3, #32
 8001190:	443b      	add	r3, r7
 8001192:	f843 2c18 	str.w	r2, [r3, #-24]
      num /= 2;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	0fda      	lsrs	r2, r3, #31
 800119a:	4413      	add	r3, r2
 800119c:	105b      	asrs	r3, r3, #1
 800119e:	607b      	str	r3, [r7, #4]
   for ( ;num > 0; ){
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	dce9      	bgt.n	800117a <decimalToBinary+0x26>
   }
   int k=0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
   k=binaryNum[3]*1000+binaryNum[2]*100+binaryNum[1]*10+binaryNum[0];
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011b0:	fb03 f202 	mul.w	r2, r3, r2
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2164      	movs	r1, #100	; 0x64
 80011b8:	fb01 f303 	mul.w	r3, r1, r3
 80011bc:	18d1      	adds	r1, r2, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	18ca      	adds	r2, r1, r3
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	4413      	add	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
   return k;
 80011d0:	69bb      	ldr	r3, [r7, #24]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <NMI_Handler+0x4>

080011e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <HardFault_Handler+0x4>

080011ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <MemManage_Handler+0x4>

080011f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <BusFault_Handler+0x4>

080011f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <UsageFault_Handler+0x4>

080011fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122a:	f000 f8cb 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
		if (state == 0) {
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <TIM2_IRQHandler+0x84>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10a      	bne.n	8001256 <TIM2_IRQHandler+0x22>
			num1(decimalToBinary(6));
 8001240:	2006      	movs	r0, #6
 8001242:	f7ff ff87 	bl	8001154 <decimalToBinary>
 8001246:	4603      	mov	r3, r0
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fadb 	bl	8000804 <num1>
			state = 1;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <TIM2_IRQHandler+0x84>)
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	e02b      	b.n	80012ae <TIM2_IRQHandler+0x7a>
		} else if (state == 1) {
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <TIM2_IRQHandler+0x84>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d10a      	bne.n	8001274 <TIM2_IRQHandler+0x40>
			num2(decimalToBinary(7));
 800125e:	2007      	movs	r0, #7
 8001260:	f7ff ff78 	bl	8001154 <decimalToBinary>
 8001264:	4603      	mov	r3, r0
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fbf6 	bl	8000a58 <num2>
			state = 2;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <TIM2_IRQHandler+0x84>)
 800126e:	2202      	movs	r2, #2
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	e01c      	b.n	80012ae <TIM2_IRQHandler+0x7a>
		} else if(state == 2) {
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <TIM2_IRQHandler+0x84>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d10a      	bne.n	8001292 <TIM2_IRQHandler+0x5e>
			num3(decimalToBinary(3));
 800127c:	2003      	movs	r0, #3
 800127e:	f7ff ff69 	bl	8001154 <decimalToBinary>
 8001282:	4603      	mov	r3, r0
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fd11 	bl	8000cac <num3>
			state = 3;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <TIM2_IRQHandler+0x84>)
 800128c:	2203      	movs	r2, #3
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	e00d      	b.n	80012ae <TIM2_IRQHandler+0x7a>
		} else if (state == 3) {
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <TIM2_IRQHandler+0x84>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b03      	cmp	r3, #3
 8001298:	d109      	bne.n	80012ae <TIM2_IRQHandler+0x7a>
			num4(decimalToBinary(4));
 800129a:	2004      	movs	r0, #4
 800129c:	f7ff ff5a 	bl	8001154 <decimalToBinary>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fe2c 	bl	8000f00 <num4>
			state = 0;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <TIM2_IRQHandler+0x84>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012ae:	4803      	ldr	r0, [pc, #12]	; (80012bc <TIM2_IRQHandler+0x88>)
 80012b0:	f002 fa84 	bl	80037bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000418 	.word	0x20000418
 80012bc:	200000e0 	.word	0x200000e0

080012c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <SystemInit+0x20>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <SystemInit+0x20>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800131c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012e8:	f7ff ffea 	bl	80012c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ee:	490d      	ldr	r1, [pc, #52]	; (8001324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <LoopForever+0xe>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f4:	e002      	b.n	80012fc <LoopCopyDataInit>

080012f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fa:	3304      	adds	r3, #4

080012fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001300:	d3f9      	bcc.n	80012f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001304:	4c0a      	ldr	r4, [pc, #40]	; (8001330 <LoopForever+0x16>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001308:	e001      	b.n	800130e <LoopFillZerobss>

0800130a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800130c:	3204      	adds	r2, #4

0800130e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001310:	d3fb      	bcc.n	800130a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001312:	f002 fe71 	bl	8003ff8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001316:	f7fe ff57 	bl	80001c8 <main>

0800131a <LoopForever>:

LoopForever:
    b LoopForever
 800131a:	e7fe      	b.n	800131a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800131c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001324:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001328:	080040a0 	.word	0x080040a0
  ldr r2, =_sbss
 800132c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001330:	20000420 	.word	0x20000420

08001334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC1_2_IRQHandler>
	...

08001338 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_Init+0x28>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_Init+0x28>)
 8001342:	f043 0310 	orr.w	r3, r3, #16
 8001346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001348:	2003      	movs	r0, #3
 800134a:	f000 f92b 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134e:	2000      	movs	r0, #0
 8001350:	f000 f808 	bl	8001364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001354:	f7ff f944 	bl	80005e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40022000 	.word	0x40022000

08001364 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_InitTick+0x54>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x58>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f943 	bl	800160e <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00e      	b.n	80013b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d80a      	bhi.n	80013ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f000 f90b 	bl	80015ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <HAL_InitTick+0x5c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008
 80013e8:	2000041c 	.word	0x2000041c

080013ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	2000041c 	.word	0x2000041c

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4907      	ldr	r1, [pc, #28]	; (80014a0 <__NVIC_EnableIRQ+0x38>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff29 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff3e 	bl	800144c <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff8e 	bl	80014f8 <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5d 	bl	80014a4 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff31 	bl	8001468 <__NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffa2 	bl	8001560 <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001636:	e154      	b.n	80018e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2101      	movs	r1, #1
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8146 	beq.w	80018dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b01      	cmp	r3, #1
 800165a:	d005      	beq.n	8001668 <HAL_GPIO_Init+0x40>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d130      	bne.n	80016ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800169e:	2201      	movs	r2, #1
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	f003 0201 	and.w	r2, r3, #1
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d017      	beq.n	8001706 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	2203      	movs	r2, #3
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d123      	bne.n	800175a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	08da      	lsrs	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3208      	adds	r2, #8
 800171a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	08da      	lsrs	r2, r3, #3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3208      	adds	r2, #8
 8001754:	6939      	ldr	r1, [r7, #16]
 8001756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	2203      	movs	r2, #3
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0203 	and.w	r2, r3, #3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 80a0 	beq.w	80018dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179c:	4b58      	ldr	r3, [pc, #352]	; (8001900 <HAL_GPIO_Init+0x2d8>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a57      	ldr	r2, [pc, #348]	; (8001900 <HAL_GPIO_Init+0x2d8>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b55      	ldr	r3, [pc, #340]	; (8001900 <HAL_GPIO_Init+0x2d8>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017b4:	4a53      	ldr	r2, [pc, #332]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	3302      	adds	r3, #2
 80017bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017de:	d019      	beq.n	8001814 <HAL_GPIO_Init+0x1ec>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a49      	ldr	r2, [pc, #292]	; (8001908 <HAL_GPIO_Init+0x2e0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d013      	beq.n	8001810 <HAL_GPIO_Init+0x1e8>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a48      	ldr	r2, [pc, #288]	; (800190c <HAL_GPIO_Init+0x2e4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d00d      	beq.n	800180c <HAL_GPIO_Init+0x1e4>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a47      	ldr	r2, [pc, #284]	; (8001910 <HAL_GPIO_Init+0x2e8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d007      	beq.n	8001808 <HAL_GPIO_Init+0x1e0>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a46      	ldr	r2, [pc, #280]	; (8001914 <HAL_GPIO_Init+0x2ec>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d101      	bne.n	8001804 <HAL_GPIO_Init+0x1dc>
 8001800:	2304      	movs	r3, #4
 8001802:	e008      	b.n	8001816 <HAL_GPIO_Init+0x1ee>
 8001804:	2305      	movs	r3, #5
 8001806:	e006      	b.n	8001816 <HAL_GPIO_Init+0x1ee>
 8001808:	2303      	movs	r3, #3
 800180a:	e004      	b.n	8001816 <HAL_GPIO_Init+0x1ee>
 800180c:	2302      	movs	r3, #2
 800180e:	e002      	b.n	8001816 <HAL_GPIO_Init+0x1ee>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <HAL_GPIO_Init+0x1ee>
 8001814:	2300      	movs	r3, #0
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	f002 0203 	and.w	r2, r2, #3
 800181c:	0092      	lsls	r2, r2, #2
 800181e:	4093      	lsls	r3, r2
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001826:	4937      	ldr	r1, [pc, #220]	; (8001904 <HAL_GPIO_Init+0x2dc>)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	3302      	adds	r3, #2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001834:	4b38      	ldr	r3, [pc, #224]	; (8001918 <HAL_GPIO_Init+0x2f0>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001858:	4a2f      	ldr	r2, [pc, #188]	; (8001918 <HAL_GPIO_Init+0x2f0>)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <HAL_GPIO_Init+0x2f0>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001882:	4a25      	ldr	r2, [pc, #148]	; (8001918 <HAL_GPIO_Init+0x2f0>)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001888:	4b23      	ldr	r3, [pc, #140]	; (8001918 <HAL_GPIO_Init+0x2f0>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	43db      	mvns	r3, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018ac:	4a1a      	ldr	r2, [pc, #104]	; (8001918 <HAL_GPIO_Init+0x2f0>)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_GPIO_Init+0x2f0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <HAL_GPIO_Init+0x2f0>)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3301      	adds	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f47f aea3 	bne.w	8001638 <HAL_GPIO_Init+0x10>
  }
}
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40021000 	.word	0x40021000
 8001904:	40010000 	.word	0x40010000
 8001908:	48000400 	.word	0x48000400
 800190c:	48000800 	.word	0x48000800
 8001910:	48000c00 	.word	0x48000c00
 8001914:	48001000 	.word	0x48001000
 8001918:	40010400 	.word	0x40010400

0800191c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
 8001928:	4613      	mov	r3, r2
 800192a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800192c:	787b      	ldrb	r3, [r7, #1]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001932:	887a      	ldrh	r2, [r7, #2]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001938:	e002      	b.n	8001940 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e081      	b.n	8001a62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d106      	bne.n	8001978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7fe fe58 	bl	8000628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2224      	movs	r2, #36	; 0x24
 800197c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800199c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	e006      	b.n	80019d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d104      	bne.n	80019e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69d9      	ldr	r1, [r3, #28]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a1a      	ldr	r2, [r3, #32]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	d138      	bne.n	8001af2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e032      	b.n	8001af4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2224      	movs	r2, #36	; 0x24
 8001a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0201 	bic.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001abc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6819      	ldr	r1, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0201 	orr.w	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001af2:	2302      	movs	r3, #2
  }
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b20      	cmp	r3, #32
 8001b14:	d139      	bne.n	8001b8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e033      	b.n	8001b8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2224      	movs	r2, #36	; 0x24
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0201 	bic.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e000      	b.n	8001b8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b8a:	2302      	movs	r3, #2
  }
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9a:	b08b      	sub	sp, #44	; 0x2c
 8001b9c:	af06      	add	r7, sp, #24
 8001b9e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e0c4      	b.n	8001d34 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7fe fddc 	bl	800077c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f002 f9d5 	bl	8003f80 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
 8001bda:	e040      	b.n	8001c5e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	3301      	adds	r3, #1
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	3303      	adds	r3, #3
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	440b      	add	r3, r1
 8001c2a:	3338      	adds	r3, #56	; 0x38
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	440b      	add	r3, r1
 8001c3e:	333c      	adds	r3, #60	; 0x3c
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	3340      	adds	r3, #64	; 0x40
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	7bfa      	ldrb	r2, [r7, #15]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d3b9      	bcc.n	8001bdc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e044      	b.n	8001cf8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3b5      	bcc.n	8001c6e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	687e      	ldr	r6, [r7, #4]
 8001d0a:	466d      	mov	r5, sp
 8001d0c:	f106 0410 	add.w	r4, r6, #16
 8001d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	602b      	str	r3, [r5, #0]
 8001d18:	1d33      	adds	r3, r6, #4
 8001d1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d1c:	6838      	ldr	r0, [r7, #0]
 8001d1e:	f002 f94a 	bl	8003fb6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d4c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	f001 b823 	b.w	8002da8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 817d 	beq.w	8002072 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d78:	4bbc      	ldr	r3, [pc, #752]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 030c 	and.w	r3, r3, #12
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d00c      	beq.n	8001d9e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d84:	4bb9      	ldr	r3, [pc, #740]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d15c      	bne.n	8001e4a <HAL_RCC_OscConfig+0x10e>
 8001d90:	4bb6      	ldr	r3, [pc, #728]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9c:	d155      	bne.n	8001e4a <HAL_RCC_OscConfig+0x10e>
 8001d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001db2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	095b      	lsrs	r3, r3, #5
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d102      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x94>
 8001dca:	4ba8      	ldr	r3, [pc, #672]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	e015      	b.n	8001dfc <HAL_RCC_OscConfig+0xc0>
 8001dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001dec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001df8:	4b9c      	ldr	r3, [pc, #624]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e00:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e04:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e08:	fa92 f2a2 	rbit	r2, r2
 8001e0c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e10:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e14:	fab2 f282 	clz	r2, r2
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	f042 0220 	orr.w	r2, r2, #32
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	f002 021f 	and.w	r2, r2, #31
 8001e24:	2101      	movs	r1, #1
 8001e26:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 811f 	beq.w	8002070 <HAL_RCC_OscConfig+0x334>
 8001e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f040 8116 	bne.w	8002070 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	f000 bfaf 	b.w	8002da8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12e>
 8001e5c:	4b83      	ldr	r3, [pc, #524]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a82      	ldr	r2, [pc, #520]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	e036      	b.n	8001ed8 <HAL_RCC_OscConfig+0x19c>
 8001e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x158>
 8001e7a:	4b7c      	ldr	r3, [pc, #496]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a7b      	ldr	r2, [pc, #492]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b79      	ldr	r3, [pc, #484]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a78      	ldr	r2, [pc, #480]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e021      	b.n	8001ed8 <HAL_RCC_OscConfig+0x19c>
 8001e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x184>
 8001ea6:	4b71      	ldr	r3, [pc, #452]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a70      	ldr	r2, [pc, #448]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	4b6e      	ldr	r3, [pc, #440]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a6d      	ldr	r2, [pc, #436]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e00b      	b.n	8001ed8 <HAL_RCC_OscConfig+0x19c>
 8001ec0:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a69      	ldr	r2, [pc, #420]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4b67      	ldr	r3, [pc, #412]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a66      	ldr	r2, [pc, #408]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ed8:	4b64      	ldr	r3, [pc, #400]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	f023 020f 	bic.w	r2, r3, #15
 8001ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	495f      	ldr	r1, [pc, #380]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d059      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7ff fa73 	bl	80013ec <HAL_GetTick>
 8001f06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fa6e 	bl	80013ec <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b64      	cmp	r3, #100	; 0x64
 8001f1a:	d902      	bls.n	8001f22 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	f000 bf43 	b.w	8002da8 <HAL_RCC_OscConfig+0x106c>
 8001f22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f26:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f36:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d102      	bne.n	8001f54 <HAL_RCC_OscConfig+0x218>
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	e015      	b.n	8001f80 <HAL_RCC_OscConfig+0x244>
 8001f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f58:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f6c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f70:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f7c:	4b3b      	ldr	r3, [pc, #236]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f84:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f88:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f8c:	fa92 f2a2 	rbit	r2, r2
 8001f90:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f94:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f98:	fab2 f282 	clz	r2, r2
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	f042 0220 	orr.w	r2, r2, #32
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	f002 021f 	and.w	r2, r2, #31
 8001fa8:	2101      	movs	r1, #1
 8001faa:	fa01 f202 	lsl.w	r2, r1, r2
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ab      	beq.n	8001f0c <HAL_RCC_OscConfig+0x1d0>
 8001fb4:	e05d      	b.n	8002072 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7ff fa19 	bl	80013ec <HAL_GetTick>
 8001fba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fa14 	bl	80013ec <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b64      	cmp	r3, #100	; 0x64
 8001fce:	d902      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	f000 bee9 	b.w	8002da8 <HAL_RCC_OscConfig+0x106c>
 8001fd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fda:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001fea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d102      	bne.n	8002008 <HAL_RCC_OscConfig+0x2cc>
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	e015      	b.n	8002034 <HAL_RCC_OscConfig+0x2f8>
 8002008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800200c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800201c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002020:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002024:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_RCC_OscConfig+0x330>)
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002038:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800203c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002040:	fa92 f2a2 	rbit	r2, r2
 8002044:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002048:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800204c:	fab2 f282 	clz	r2, r2
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	f042 0220 	orr.w	r2, r2, #32
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	f002 021f 	and.w	r2, r2, #31
 800205c:	2101      	movs	r1, #1
 800205e:	fa01 f202 	lsl.w	r2, r1, r2
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ab      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x284>
 8002068:	e003      	b.n	8002072 <HAL_RCC_OscConfig+0x336>
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 817d 	beq.w	8002382 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002088:	4ba6      	ldr	r3, [pc, #664]	; (8002324 <HAL_RCC_OscConfig+0x5e8>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00b      	beq.n	80020ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002094:	4ba3      	ldr	r3, [pc, #652]	; (8002324 <HAL_RCC_OscConfig+0x5e8>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	2b08      	cmp	r3, #8
 800209e:	d172      	bne.n	8002186 <HAL_RCC_OscConfig+0x44a>
 80020a0:	4ba0      	ldr	r3, [pc, #640]	; (8002324 <HAL_RCC_OscConfig+0x5e8>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d16c      	bne.n	8002186 <HAL_RCC_OscConfig+0x44a>
 80020ac:	2302      	movs	r3, #2
 80020ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80020be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	095b      	lsrs	r3, r3, #5
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d102      	bne.n	80020dc <HAL_RCC_OscConfig+0x3a0>
 80020d6:	4b93      	ldr	r3, [pc, #588]	; (8002324 <HAL_RCC_OscConfig+0x5e8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	e013      	b.n	8002104 <HAL_RCC_OscConfig+0x3c8>
 80020dc:	2302      	movs	r3, #2
 80020de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80020ee:	2302      	movs	r3, #2
 80020f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002100:	4b88      	ldr	r3, [pc, #544]	; (8002324 <HAL_RCC_OscConfig+0x5e8>)
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	2202      	movs	r2, #2
 8002106:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800210a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800210e:	fa92 f2a2 	rbit	r2, r2
 8002112:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002116:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800211a:	fab2 f282 	clz	r2, r2
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	f042 0220 	orr.w	r2, r2, #32
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	f002 021f 	and.w	r2, r2, #31
 800212a:	2101      	movs	r1, #1
 800212c:	fa01 f202 	lsl.w	r2, r1, r2
 8002130:	4013      	ands	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCC_OscConfig+0x410>
 8002136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d002      	beq.n	800214c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	f000 be2e 	b.w	8002da8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	4b75      	ldr	r3, [pc, #468]	; (8002324 <HAL_RCC_OscConfig+0x5e8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	21f8      	movs	r1, #248	; 0xf8
 8002162:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800216a:	fa91 f1a1 	rbit	r1, r1
 800216e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002172:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002176:	fab1 f181 	clz	r1, r1
 800217a:	b2c9      	uxtb	r1, r1
 800217c:	408b      	lsls	r3, r1
 800217e:	4969      	ldr	r1, [pc, #420]	; (8002324 <HAL_RCC_OscConfig+0x5e8>)
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002184:	e0fd      	b.n	8002382 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 8088 	beq.w	80022a8 <HAL_RCC_OscConfig+0x56c>
 8002198:	2301      	movs	r3, #1
 800219a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80021aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	461a      	mov	r2, r3
 80021c0:	2301      	movs	r3, #1
 80021c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff f912 	bl	80013ec <HAL_GetTick>
 80021c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ce:	f7ff f90d 	bl	80013ec <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d902      	bls.n	80021e4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	f000 bde2 	b.w	8002da8 <HAL_RCC_OscConfig+0x106c>
 80021e4:	2302      	movs	r3, #2
 80021e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80021f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d102      	bne.n	8002214 <HAL_RCC_OscConfig+0x4d8>
 800220e:	4b45      	ldr	r3, [pc, #276]	; (8002324 <HAL_RCC_OscConfig+0x5e8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	e013      	b.n	800223c <HAL_RCC_OscConfig+0x500>
 8002214:	2302      	movs	r3, #2
 8002216:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002226:	2302      	movs	r3, #2
 8002228:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800222c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002230:	fa93 f3a3 	rbit	r3, r3
 8002234:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002238:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <HAL_RCC_OscConfig+0x5e8>)
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	2202      	movs	r2, #2
 800223e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002242:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002246:	fa92 f2a2 	rbit	r2, r2
 800224a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800224e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002252:	fab2 f282 	clz	r2, r2
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	f042 0220 	orr.w	r2, r2, #32
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	f002 021f 	and.w	r2, r2, #31
 8002262:	2101      	movs	r1, #1
 8002264:	fa01 f202 	lsl.w	r2, r1, r2
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0af      	beq.n	80021ce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_RCC_OscConfig+0x5e8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	21f8      	movs	r1, #248	; 0xf8
 8002284:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800228c:	fa91 f1a1 	rbit	r1, r1
 8002290:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002294:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002298:	fab1 f181 	clz	r1, r1
 800229c:	b2c9      	uxtb	r1, r1
 800229e:	408b      	lsls	r3, r1
 80022a0:	4920      	ldr	r1, [pc, #128]	; (8002324 <HAL_RCC_OscConfig+0x5e8>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
 80022a6:	e06c      	b.n	8002382 <HAL_RCC_OscConfig+0x646>
 80022a8:	2301      	movs	r3, #1
 80022aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80022ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	461a      	mov	r2, r3
 80022d0:	2300      	movs	r3, #0
 80022d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff f88a 	bl	80013ec <HAL_GetTick>
 80022d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022de:	f7ff f885 	bl	80013ec <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d902      	bls.n	80022f4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	f000 bd5a 	b.w	8002da8 <HAL_RCC_OscConfig+0x106c>
 80022f4:	2302      	movs	r3, #2
 80022f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d104      	bne.n	8002328 <HAL_RCC_OscConfig+0x5ec>
 800231e:	4b01      	ldr	r3, [pc, #4]	; (8002324 <HAL_RCC_OscConfig+0x5e8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	e015      	b.n	8002350 <HAL_RCC_OscConfig+0x614>
 8002324:	40021000 	.word	0x40021000
 8002328:	2302      	movs	r3, #2
 800232a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800233a:	2302      	movs	r3, #2
 800233c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002340:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800234c:	4bc8      	ldr	r3, [pc, #800]	; (8002670 <HAL_RCC_OscConfig+0x934>)
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	2202      	movs	r2, #2
 8002352:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002356:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800235a:	fa92 f2a2 	rbit	r2, r2
 800235e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002362:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002366:	fab2 f282 	clz	r2, r2
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f042 0220 	orr.w	r2, r2, #32
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	f002 021f 	and.w	r2, r2, #31
 8002376:	2101      	movs	r1, #1
 8002378:	fa01 f202 	lsl.w	r2, r1, r2
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1ad      	bne.n	80022de <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 8110 	beq.w	80025b8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d079      	beq.n	800249c <HAL_RCC_OscConfig+0x760>
 80023a8:	2301      	movs	r3, #1
 80023aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80023ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	4bab      	ldr	r3, [pc, #684]	; (8002674 <HAL_RCC_OscConfig+0x938>)
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	461a      	mov	r2, r3
 80023ce:	2301      	movs	r3, #1
 80023d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d2:	f7ff f80b 	bl	80013ec <HAL_GetTick>
 80023d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	e00a      	b.n	80023f2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023dc:	f7ff f806 	bl	80013ec <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d902      	bls.n	80023f2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	f000 bcdb 	b.w	8002da8 <HAL_RCC_OscConfig+0x106c>
 80023f2:	2302      	movs	r3, #2
 80023f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002408:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800240c:	2202      	movs	r2, #2
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002414:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	fa93 f2a3 	rbit	r2, r3
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002430:	2202      	movs	r2, #2
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	fa93 f2a3 	rbit	r2, r3
 8002442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002446:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800244a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244c:	4b88      	ldr	r3, [pc, #544]	; (8002670 <HAL_RCC_OscConfig+0x934>)
 800244e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002454:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002458:	2102      	movs	r1, #2
 800245a:	6019      	str	r1, [r3, #0]
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	fa93 f1a3 	rbit	r1, r3
 800246a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002472:	6019      	str	r1, [r3, #0]
  return result;
 8002474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002478:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2101      	movs	r1, #1
 8002490:	fa01 f303 	lsl.w	r3, r1, r3
 8002494:	4013      	ands	r3, r2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0a0      	beq.n	80023dc <HAL_RCC_OscConfig+0x6a0>
 800249a:	e08d      	b.n	80025b8 <HAL_RCC_OscConfig+0x87c>
 800249c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	fa93 f2a3 	rbit	r2, r3
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024be:	601a      	str	r2, [r3, #0]
  return result;
 80024c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b68      	ldr	r3, [pc, #416]	; (8002674 <HAL_RCC_OscConfig+0x938>)
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	461a      	mov	r2, r3
 80024da:	2300      	movs	r3, #0
 80024dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024de:	f7fe ff85 	bl	80013ec <HAL_GetTick>
 80024e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e8:	f7fe ff80 	bl	80013ec <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d902      	bls.n	80024fe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	f000 bc55 	b.w	8002da8 <HAL_RCC_OscConfig+0x106c>
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002506:	2202      	movs	r2, #2
 8002508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	fa93 f2a3 	rbit	r2, r3
 8002518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002526:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800252a:	2202      	movs	r2, #2
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	fa93 f2a3 	rbit	r2, r3
 800253c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002540:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800254e:	2202      	movs	r2, #2
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	fa93 f2a3 	rbit	r2, r3
 8002560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002564:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002568:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256a:	4b41      	ldr	r3, [pc, #260]	; (8002670 <HAL_RCC_OscConfig+0x934>)
 800256c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800256e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002572:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002576:	2102      	movs	r1, #2
 8002578:	6019      	str	r1, [r3, #0]
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f1a3 	rbit	r1, r3
 8002588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002590:	6019      	str	r1, [r3, #0]
  return result;
 8002592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002596:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d197      	bne.n	80024e8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 81a1 	beq.w	8002910 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d4:	4b26      	ldr	r3, [pc, #152]	; (8002670 <HAL_RCC_OscConfig+0x934>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d116      	bne.n	800260e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e0:	4b23      	ldr	r3, [pc, #140]	; (8002670 <HAL_RCC_OscConfig+0x934>)
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	4a22      	ldr	r2, [pc, #136]	; (8002670 <HAL_RCC_OscConfig+0x934>)
 80025e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ea:	61d3      	str	r3, [r2, #28]
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_RCC_OscConfig+0x934>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002606:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <HAL_RCC_OscConfig+0x93c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d11a      	bne.n	8002650 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261a:	4b17      	ldr	r3, [pc, #92]	; (8002678 <HAL_RCC_OscConfig+0x93c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a16      	ldr	r2, [pc, #88]	; (8002678 <HAL_RCC_OscConfig+0x93c>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002626:	f7fe fee1 	bl	80013ec <HAL_GetTick>
 800262a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262e:	e009      	b.n	8002644 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002630:	f7fe fedc 	bl	80013ec <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b64      	cmp	r3, #100	; 0x64
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e3b1      	b.n	8002da8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <HAL_RCC_OscConfig+0x93c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0ef      	beq.n	8002630 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002654:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d10d      	bne.n	800267c <HAL_RCC_OscConfig+0x940>
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <HAL_RCC_OscConfig+0x934>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4a02      	ldr	r2, [pc, #8]	; (8002670 <HAL_RCC_OscConfig+0x934>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6213      	str	r3, [r2, #32]
 800266c:	e03c      	b.n	80026e8 <HAL_RCC_OscConfig+0x9ac>
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000
 8002674:	10908120 	.word	0x10908120
 8002678:	40007000 	.word	0x40007000
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10c      	bne.n	80026a6 <HAL_RCC_OscConfig+0x96a>
 800268c:	4bc1      	ldr	r3, [pc, #772]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4ac0      	ldr	r2, [pc, #768]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	6213      	str	r3, [r2, #32]
 8002698:	4bbe      	ldr	r3, [pc, #760]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4abd      	ldr	r2, [pc, #756]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 800269e:	f023 0304 	bic.w	r3, r3, #4
 80026a2:	6213      	str	r3, [r2, #32]
 80026a4:	e020      	b.n	80026e8 <HAL_RCC_OscConfig+0x9ac>
 80026a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b05      	cmp	r3, #5
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x994>
 80026b6:	4bb7      	ldr	r3, [pc, #732]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4ab6      	ldr	r2, [pc, #728]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 80026bc:	f043 0304 	orr.w	r3, r3, #4
 80026c0:	6213      	str	r3, [r2, #32]
 80026c2:	4bb4      	ldr	r3, [pc, #720]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4ab3      	ldr	r2, [pc, #716]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6213      	str	r3, [r2, #32]
 80026ce:	e00b      	b.n	80026e8 <HAL_RCC_OscConfig+0x9ac>
 80026d0:	4bb0      	ldr	r3, [pc, #704]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	4aaf      	ldr	r2, [pc, #700]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 80026d6:	f023 0301 	bic.w	r3, r3, #1
 80026da:	6213      	str	r3, [r2, #32]
 80026dc:	4bad      	ldr	r3, [pc, #692]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4aac      	ldr	r2, [pc, #688]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 80026e2:	f023 0304 	bic.w	r3, r3, #4
 80026e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8081 	beq.w	80027fc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fa:	f7fe fe77 	bl	80013ec <HAL_GetTick>
 80026fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7fe fe72 	bl	80013ec <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	f241 3288 	movw	r2, #5000	; 0x1388
 8002714:	4293      	cmp	r3, r2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e345      	b.n	8002da8 <HAL_RCC_OscConfig+0x106c>
 800271c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002720:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002724:	2202      	movs	r2, #2
 8002726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	fa93 f2a3 	rbit	r2, r3
 8002736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002744:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002748:	2202      	movs	r2, #2
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002750:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	fa93 f2a3 	rbit	r2, r3
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002762:	601a      	str	r2, [r3, #0]
  return result;
 8002764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002768:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800276c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f043 0302 	orr.w	r3, r3, #2
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d102      	bne.n	8002788 <HAL_RCC_OscConfig+0xa4c>
 8002782:	4b84      	ldr	r3, [pc, #528]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	e013      	b.n	80027b0 <HAL_RCC_OscConfig+0xa74>
 8002788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002790:	2202      	movs	r2, #2
 8002792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002798:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	fa93 f2a3 	rbit	r2, r3
 80027a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	4b79      	ldr	r3, [pc, #484]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027b4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027b8:	2102      	movs	r1, #2
 80027ba:	6011      	str	r1, [r2, #0]
 80027bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	fa92 f1a2 	rbit	r1, r2
 80027ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027d2:	6011      	str	r1, [r2, #0]
  return result;
 80027d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027d8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	fab2 f282 	clz	r2, r2
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	f002 021f 	and.w	r2, r2, #31
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f202 	lsl.w	r2, r1, r2
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d084      	beq.n	8002704 <HAL_RCC_OscConfig+0x9c8>
 80027fa:	e07f      	b.n	80028fc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fc:	f7fe fdf6 	bl	80013ec <HAL_GetTick>
 8002800:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002804:	e00b      	b.n	800281e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fdf1 	bl	80013ec <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e2c4      	b.n	8002da8 <HAL_RCC_OscConfig+0x106c>
 800281e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002822:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002826:	2202      	movs	r2, #2
 8002828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	fa93 f2a3 	rbit	r2, r3
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002846:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800284a:	2202      	movs	r2, #2
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	fa93 f2a3 	rbit	r2, r3
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002864:	601a      	str	r2, [r3, #0]
  return result;
 8002866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800286e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002870:	fab3 f383 	clz	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	b2db      	uxtb	r3, r3
 800287a:	f043 0302 	orr.w	r3, r3, #2
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d102      	bne.n	800288a <HAL_RCC_OscConfig+0xb4e>
 8002884:	4b43      	ldr	r3, [pc, #268]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	e013      	b.n	80028b2 <HAL_RCC_OscConfig+0xb76>
 800288a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002892:	2202      	movs	r2, #2
 8002894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	fa93 f2a3 	rbit	r2, r3
 80028a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	4b39      	ldr	r3, [pc, #228]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028b6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028ba:	2102      	movs	r1, #2
 80028bc:	6011      	str	r1, [r2, #0]
 80028be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	fa92 f1a2 	rbit	r1, r2
 80028cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028d0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028d4:	6011      	str	r1, [r2, #0]
  return result;
 80028d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028da:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	fab2 f282 	clz	r2, r2
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	f002 021f 	and.w	r2, r2, #31
 80028f0:	2101      	movs	r1, #1
 80028f2:	fa01 f202 	lsl.w	r2, r1, r2
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d184      	bne.n	8002806 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028fc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002900:	2b01      	cmp	r3, #1
 8002902:	d105      	bne.n	8002910 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002904:	4b23      	ldr	r3, [pc, #140]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	4a22      	ldr	r2, [pc, #136]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 800290a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800290e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002914:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8242 	beq.w	8002da6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002922:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <HAL_RCC_OscConfig+0xc58>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b08      	cmp	r3, #8
 800292c:	f000 8213 	beq.w	8002d56 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002934:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	2b02      	cmp	r3, #2
 800293e:	f040 8162 	bne.w	8002c06 <HAL_RCC_OscConfig+0xeca>
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800294a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800294e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002954:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	fa93 f2a3 	rbit	r2, r3
 800295e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002962:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002966:	601a      	str	r2, [r3, #0]
  return result;
 8002968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002970:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800297c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	461a      	mov	r2, r3
 8002984:	2300      	movs	r3, #0
 8002986:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe fd30 	bl	80013ec <HAL_GetTick>
 800298c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002990:	e00c      	b.n	80029ac <HAL_RCC_OscConfig+0xc70>
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002998:	f7fe fd28 	bl	80013ec <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e1fd      	b.n	8002da8 <HAL_RCC_OscConfig+0x106c>
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029be:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	fa93 f2a3 	rbit	r2, r3
 80029c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029cc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029d0:	601a      	str	r2, [r3, #0]
  return result;
 80029d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d102      	bne.n	80029f6 <HAL_RCC_OscConfig+0xcba>
 80029f0:	4bb0      	ldr	r3, [pc, #704]	; (8002cb4 <HAL_RCC_OscConfig+0xf78>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	e027      	b.n	8002a46 <HAL_RCC_OscConfig+0xd0a>
 80029f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	fa93 f2a3 	rbit	r2, r3
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a20:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	fa93 f2a3 	rbit	r2, r3
 8002a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	4b9c      	ldr	r3, [pc, #624]	; (8002cb4 <HAL_RCC_OscConfig+0xf78>)
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a4a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a52:	6011      	str	r1, [r2, #0]
 8002a54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a58:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	fa92 f1a2 	rbit	r1, r2
 8002a62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a66:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a6a:	6011      	str	r1, [r2, #0]
  return result;
 8002a6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a70:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	fab2 f282 	clz	r2, r2
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	f042 0220 	orr.w	r2, r2, #32
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	f002 021f 	and.w	r2, r2, #31
 8002a86:	2101      	movs	r1, #1
 8002a88:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d182      	bne.n	8002998 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a92:	4b88      	ldr	r3, [pc, #544]	; (8002cb4 <HAL_RCC_OscConfig+0xf78>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	497f      	ldr	r1, [pc, #508]	; (8002cb4 <HAL_RCC_OscConfig+0xf78>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	604b      	str	r3, [r1, #4]
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ac2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ac6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002acc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	fa93 f2a3 	rbit	r2, r3
 8002ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ada:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ade:	601a      	str	r2, [r3, #0]
  return result;
 8002ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ae8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002af4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	461a      	mov	r2, r3
 8002afc:	2301      	movs	r3, #1
 8002afe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe fc74 	bl	80013ec <HAL_GetTick>
 8002b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b08:	e009      	b.n	8002b1e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0a:	f7fe fc6f 	bl	80013ec <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e144      	b.n	8002da8 <HAL_RCC_OscConfig+0x106c>
 8002b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b22:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b30:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	fa93 f2a3 	rbit	r2, r3
 8002b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b42:	601a      	str	r2, [r3, #0]
  return result;
 8002b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b48:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b4e:	fab3 f383 	clz	r3, r3
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d102      	bne.n	8002b68 <HAL_RCC_OscConfig+0xe2c>
 8002b62:	4b54      	ldr	r3, [pc, #336]	; (8002cb4 <HAL_RCC_OscConfig+0xf78>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	e027      	b.n	8002bb8 <HAL_RCC_OscConfig+0xe7c>
 8002b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	fa93 f2a3 	rbit	r2, r3
 8002b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b92:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	fa93 f2a3 	rbit	r2, r3
 8002baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <HAL_RCC_OscConfig+0xf78>)
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bbc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bc4:	6011      	str	r1, [r2, #0]
 8002bc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bca:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	fa92 f1a2 	rbit	r1, r2
 8002bd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bd8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002bdc:	6011      	str	r1, [r2, #0]
  return result;
 8002bde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002be2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	fab2 f282 	clz	r2, r2
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	f042 0220 	orr.w	r2, r2, #32
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	f002 021f 	and.w	r2, r2, #31
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d082      	beq.n	8002b0a <HAL_RCC_OscConfig+0xdce>
 8002c04:	e0cf      	b.n	8002da6 <HAL_RCC_OscConfig+0x106a>
 8002c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c18:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	fa93 f2a3 	rbit	r2, r3
 8002c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c26:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c2a:	601a      	str	r2, [r3, #0]
  return result;
 8002c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c30:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c34:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	461a      	mov	r2, r3
 8002c48:	2300      	movs	r3, #0
 8002c4a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fbce 	bl	80013ec <HAL_GetTick>
 8002c50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c54:	e009      	b.n	8002c6a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c56:	f7fe fbc9 	bl	80013ec <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e09e      	b.n	8002da8 <HAL_RCC_OscConfig+0x106c>
 8002c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	fa93 f2a3 	rbit	r2, r3
 8002c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c8e:	601a      	str	r2, [r3, #0]
  return result;
 8002c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c94:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	095b      	lsrs	r3, r3, #5
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d104      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xf7c>
 8002cae:	4b01      	ldr	r3, [pc, #4]	; (8002cb4 <HAL_RCC_OscConfig+0xf78>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	e029      	b.n	8002d08 <HAL_RCC_OscConfig+0xfcc>
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	fa93 f2a3 	rbit	r2, r3
 8002cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ce6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	fa93 f2a3 	rbit	r2, r3
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <HAL_RCC_OscConfig+0x1078>)
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d0c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d14:	6011      	str	r1, [r2, #0]
 8002d16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d1a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	fa92 f1a2 	rbit	r1, r2
 8002d24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d28:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d2c:	6011      	str	r1, [r2, #0]
  return result;
 8002d2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d32:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	fab2 f282 	clz	r2, r2
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	f042 0220 	orr.w	r2, r2, #32
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	f002 021f 	and.w	r2, r2, #31
 8002d48:	2101      	movs	r1, #1
 8002d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d180      	bne.n	8002c56 <HAL_RCC_OscConfig+0xf1a>
 8002d54:	e027      	b.n	8002da6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e01e      	b.n	8002da8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_RCC_OscConfig+0x1078>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d72:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d76:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d10b      	bne.n	8002da2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d001      	beq.n	8002da6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000

08002db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b09e      	sub	sp, #120	; 0x78
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e162      	b.n	8003096 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b90      	ldr	r3, [pc, #576]	; (8003014 <HAL_RCC_ClockConfig+0x25c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d910      	bls.n	8002e00 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b8d      	ldr	r3, [pc, #564]	; (8003014 <HAL_RCC_ClockConfig+0x25c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 0207 	bic.w	r2, r3, #7
 8002de6:	498b      	ldr	r1, [pc, #556]	; (8003014 <HAL_RCC_ClockConfig+0x25c>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b89      	ldr	r3, [pc, #548]	; (8003014 <HAL_RCC_ClockConfig+0x25c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e14a      	b.n	8003096 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e0c:	4b82      	ldr	r3, [pc, #520]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	497f      	ldr	r1, [pc, #508]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80dc 	beq.w	8002fe4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d13c      	bne.n	8002eae <HAL_RCC_ClockConfig+0xf6>
 8002e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e38:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e44:	fab3 f383 	clz	r3, r3
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d102      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xa6>
 8002e58:	4b6f      	ldr	r3, [pc, #444]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	e00f      	b.n	8002e7e <HAL_RCC_ClockConfig+0xc6>
 8002e5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	667b      	str	r3, [r7, #100]	; 0x64
 8002e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e70:	663b      	str	r3, [r7, #96]	; 0x60
 8002e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e7a:	4b67      	ldr	r3, [pc, #412]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e82:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e86:	fa92 f2a2 	rbit	r2, r2
 8002e8a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e8e:	fab2 f282 	clz	r2, r2
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	f042 0220 	orr.w	r2, r2, #32
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f002 021f 	and.w	r2, r2, #31
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d17b      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e0f3      	b.n	8003096 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d13c      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x178>
 8002eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d102      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x128>
 8002eda:	4b4f      	ldr	r3, [pc, #316]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	e00f      	b.n	8002f00 <HAL_RCC_ClockConfig+0x148>
 8002ee0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ee4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	647b      	str	r3, [r7, #68]	; 0x44
 8002eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ef2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002efc:	4b46      	ldr	r3, [pc, #280]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f04:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f08:	fa92 f2a2 	rbit	r2, r2
 8002f0c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f10:	fab2 f282 	clz	r2, r2
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	f042 0220 	orr.w	r2, r2, #32
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	f002 021f 	and.w	r2, r2, #31
 8002f20:	2101      	movs	r1, #1
 8002f22:	fa01 f202 	lsl.w	r2, r1, r2
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d13a      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0b2      	b.n	8003096 <HAL_RCC_ClockConfig+0x2de>
 8002f30:	2302      	movs	r3, #2
 8002f32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d102      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x1a0>
 8002f52:	4b31      	ldr	r3, [pc, #196]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	e00d      	b.n	8002f74 <HAL_RCC_ClockConfig+0x1bc>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
 8002f64:	2302      	movs	r3, #2
 8002f66:	623b      	str	r3, [r7, #32]
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	61fb      	str	r3, [r7, #28]
 8002f70:	4b29      	ldr	r3, [pc, #164]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	2202      	movs	r2, #2
 8002f76:	61ba      	str	r2, [r7, #24]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	fa92 f2a2 	rbit	r2, r2
 8002f7e:	617a      	str	r2, [r7, #20]
  return result;
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	fab2 f282 	clz	r2, r2
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	f042 0220 	orr.w	r2, r2, #32
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	f002 021f 	and.w	r2, r2, #31
 8002f92:	2101      	movs	r1, #1
 8002f94:	fa01 f202 	lsl.w	r2, r1, r2
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e079      	b.n	8003096 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa2:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f023 0203 	bic.w	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	491a      	ldr	r1, [pc, #104]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb4:	f7fe fa1a 	bl	80013ec <HAL_GetTick>
 8002fb8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbc:	f7fe fa16 	bl	80013ec <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e061      	b.n	8003096 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd2:	4b11      	ldr	r3, [pc, #68]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 020c 	and.w	r2, r3, #12
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d1eb      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_ClockConfig+0x25c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d214      	bcs.n	800301c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <HAL_RCC_ClockConfig+0x25c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 0207 	bic.w	r2, r3, #7
 8002ffa:	4906      	ldr	r1, [pc, #24]	; (8003014 <HAL_RCC_ClockConfig+0x25c>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b04      	ldr	r3, [pc, #16]	; (8003014 <HAL_RCC_ClockConfig+0x25c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d005      	beq.n	800301c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e040      	b.n	8003096 <HAL_RCC_ClockConfig+0x2de>
 8003014:	40022000 	.word	0x40022000
 8003018:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003028:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_RCC_ClockConfig+0x2e8>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	491a      	ldr	r1, [pc, #104]	; (80030a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4912      	ldr	r1, [pc, #72]	; (80030a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800305a:	f000 f829 	bl	80030b0 <HAL_RCC_GetSysClockFreq>
 800305e:	4601      	mov	r1, r0
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003068:	22f0      	movs	r2, #240	; 0xf0
 800306a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	fa92 f2a2 	rbit	r2, r2
 8003072:	60fa      	str	r2, [r7, #12]
  return result;
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	fab2 f282 	clz	r2, r2
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	40d3      	lsrs	r3, r2
 800307e:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <HAL_RCC_ClockConfig+0x2ec>)
 8003080:	5cd3      	ldrb	r3, [r2, r3]
 8003082:	fa21 f303 	lsr.w	r3, r1, r3
 8003086:	4a08      	ldr	r2, [pc, #32]	; (80030a8 <HAL_RCC_ClockConfig+0x2f0>)
 8003088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800308a:	4b08      	ldr	r3, [pc, #32]	; (80030ac <HAL_RCC_ClockConfig+0x2f4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe f968 	bl	8001364 <HAL_InitTick>
  
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3778      	adds	r7, #120	; 0x78
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000
 80030a4:	08004068 	.word	0x08004068
 80030a8:	20000000 	.word	0x20000000
 80030ac:	20000004 	.word	0x20000004

080030b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b08b      	sub	sp, #44	; 0x2c
 80030b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	2300      	movs	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80030ca:	4b29      	ldr	r3, [pc, #164]	; (8003170 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d002      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x30>
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d003      	beq.n	80030e6 <HAL_RCC_GetSysClockFreq+0x36>
 80030de:	e03c      	b.n	800315a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e0:	4b24      	ldr	r3, [pc, #144]	; (8003174 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030e2:	623b      	str	r3, [r7, #32]
      break;
 80030e4:	e03c      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80030ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80030f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	fa92 f2a2 	rbit	r2, r2
 80030f8:	607a      	str	r2, [r7, #4]
  return result;
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	fab2 f282 	clz	r2, r2
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	40d3      	lsrs	r3, r2
 8003104:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003106:	5cd3      	ldrb	r3, [r2, r3]
 8003108:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800310a:	4b19      	ldr	r3, [pc, #100]	; (8003170 <HAL_RCC_GetSysClockFreq+0xc0>)
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	220f      	movs	r2, #15
 8003114:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	fa92 f2a2 	rbit	r2, r2
 800311c:	60fa      	str	r2, [r7, #12]
  return result;
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	fab2 f282 	clz	r2, r2
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	40d3      	lsrs	r3, r2
 8003128:	4a14      	ldr	r2, [pc, #80]	; (800317c <HAL_RCC_GetSysClockFreq+0xcc>)
 800312a:	5cd3      	ldrb	r3, [r2, r3]
 800312c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003138:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <HAL_RCC_GetSysClockFreq+0xc4>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
 8003148:	e004      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <HAL_RCC_GetSysClockFreq+0xd0>)
 800314e:	fb02 f303 	mul.w	r3, r2, r3
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	623b      	str	r3, [r7, #32]
      break;
 8003158:	e002      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_RCC_GetSysClockFreq+0xc4>)
 800315c:	623b      	str	r3, [r7, #32]
      break;
 800315e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003160:	6a3b      	ldr	r3, [r7, #32]
}
 8003162:	4618      	mov	r0, r3
 8003164:	372c      	adds	r7, #44	; 0x2c
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000
 8003174:	007a1200 	.word	0x007a1200
 8003178:	08004078 	.word	0x08004078
 800317c:	08004088 	.word	0x08004088
 8003180:	003d0900 	.word	0x003d0900

08003184 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b092      	sub	sp, #72	; 0x48
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003194:	2300      	movs	r3, #0
 8003196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80d4 	beq.w	8003350 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a8:	4b4e      	ldr	r3, [pc, #312]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10e      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b4:	4b4b      	ldr	r3, [pc, #300]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	4a4a      	ldr	r2, [pc, #296]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031be:	61d3      	str	r3, [r2, #28]
 80031c0:	4b48      	ldr	r3, [pc, #288]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b45      	ldr	r3, [pc, #276]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031de:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a41      	ldr	r2, [pc, #260]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ea:	f7fe f8ff 	bl	80013ec <HAL_GetTick>
 80031ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	e008      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f2:	f7fe f8fb 	bl	80013ec <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b64      	cmp	r3, #100	; 0x64
 80031fe:	d901      	bls.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e169      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003210:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003218:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8084 	beq.w	800332a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800322c:	429a      	cmp	r2, r3
 800322e:	d07c      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003230:	4b2c      	ldr	r3, [pc, #176]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800323a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800323e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	fa93 f3a3 	rbit	r3, r3
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	4b26      	ldr	r3, [pc, #152]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	461a      	mov	r2, r3
 800325a:	2301      	movs	r3, #1
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003262:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800326c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	461a      	mov	r2, r3
 800327e:	2300      	movs	r3, #0
 8003280:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003282:	4a18      	ldr	r2, [pc, #96]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003286:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d04b      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fe f8ab 	bl	80013ec <HAL_GetTick>
 8003296:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fe f8a7 	bl	80013ec <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e113      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80032b0:	2302      	movs	r3, #2
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
 80032bc:	2302      	movs	r3, #2
 80032be:	623b      	str	r3, [r7, #32]
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	61fb      	str	r3, [r7, #28]
  return result;
 80032c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f043 0302 	orr.w	r3, r3, #2
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d108      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80032de:	4b01      	ldr	r3, [pc, #4]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	e00d      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40007000 	.word	0x40007000
 80032ec:	10908100 	.word	0x10908100
 80032f0:	2302      	movs	r3, #2
 80032f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	4b78      	ldr	r3, [pc, #480]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	2202      	movs	r2, #2
 8003302:	613a      	str	r2, [r7, #16]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	fa92 f2a2 	rbit	r2, r2
 800330a:	60fa      	str	r2, [r7, #12]
  return result;
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	fab2 f282 	clz	r2, r2
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	f002 021f 	and.w	r2, r2, #31
 800331e:	2101      	movs	r1, #1
 8003320:	fa01 f202 	lsl.w	r2, r1, r2
 8003324:	4013      	ands	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0b7      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800332a:	4b6d      	ldr	r3, [pc, #436]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	496a      	ldr	r1, [pc, #424]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003338:	4313      	orrs	r3, r2
 800333a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800333c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003340:	2b01      	cmp	r3, #1
 8003342:	d105      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003344:	4b66      	ldr	r3, [pc, #408]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	4a65      	ldr	r2, [pc, #404]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800334a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800335c:	4b60      	ldr	r3, [pc, #384]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	f023 0203 	bic.w	r2, r3, #3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	495d      	ldr	r1, [pc, #372]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800336a:	4313      	orrs	r3, r2
 800336c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800337a:	4b59      	ldr	r3, [pc, #356]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	4956      	ldr	r1, [pc, #344]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003388:	4313      	orrs	r3, r2
 800338a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003398:	4b51      	ldr	r3, [pc, #324]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	494e      	ldr	r1, [pc, #312]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033b6:	4b4a      	ldr	r3, [pc, #296]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f023 0210 	bic.w	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4947      	ldr	r1, [pc, #284]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80033d4:	4b42      	ldr	r3, [pc, #264]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	493f      	ldr	r1, [pc, #252]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f023 0220 	bic.w	r2, r3, #32
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	4938      	ldr	r1, [pc, #224]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003400:	4313      	orrs	r3, r2
 8003402:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003410:	4b33      	ldr	r3, [pc, #204]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	4930      	ldr	r1, [pc, #192]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800341e:	4313      	orrs	r3, r2
 8003420:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800342e:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	4929      	ldr	r1, [pc, #164]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800343c:	4313      	orrs	r3, r2
 800343e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800344c:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	4921      	ldr	r1, [pc, #132]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800346a:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	491a      	ldr	r1, [pc, #104]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003478:	4313      	orrs	r3, r2
 800347a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003488:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	4912      	ldr	r1, [pc, #72]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003496:	4313      	orrs	r3, r2
 8003498:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	490b      	ldr	r1, [pc, #44]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d0:	4903      	ldr	r1, [pc, #12]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3748      	adds	r7, #72	; 0x48
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000

080034e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e09d      	b.n	8003632 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d108      	bne.n	8003510 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003506:	d009      	beq.n	800351c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	61da      	str	r2, [r3, #28]
 800350e:	e005      	b.n	800351c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fd f8ba 	bl	80006b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003552:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800355c:	d902      	bls.n	8003564 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	e002      	b.n	800356a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003568:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003572:	d007      	beq.n	8003584 <HAL_SPI_Init+0xa0>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800357c:	d002      	beq.n	8003584 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c6:	ea42 0103 	orr.w	r1, r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	0c1b      	lsrs	r3, r3, #16
 80035e0:	f003 0204 	and.w	r2, r3, #4
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003600:	ea42 0103 	orr.w	r1, r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69da      	ldr	r2, [r3, #28]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003620:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e049      	b.n	80036e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d106      	bne.n	8003666 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7fd f867 	bl	8000734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3304      	adds	r3, #4
 8003676:	4619      	mov	r1, r3
 8003678:	4610      	mov	r0, r2
 800367a:	f000 fab9 	bl	8003bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d001      	beq.n	8003700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e04a      	b.n	8003796 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a21      	ldr	r2, [pc, #132]	; (80037a4 <HAL_TIM_Base_Start_IT+0xbc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d018      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x6c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372a:	d013      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x6c>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00e      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x6c>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a1c      	ldr	r2, [pc, #112]	; (80037ac <HAL_TIM_Base_Start_IT+0xc4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d009      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x6c>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1a      	ldr	r2, [pc, #104]	; (80037b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d004      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x6c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a19      	ldr	r2, [pc, #100]	; (80037b4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d115      	bne.n	8003780 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	4b17      	ldr	r3, [pc, #92]	; (80037b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800375c:	4013      	ands	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b06      	cmp	r3, #6
 8003764:	d015      	beq.n	8003792 <HAL_TIM_Base_Start_IT+0xaa>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376c:	d011      	beq.n	8003792 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377e:	e008      	b.n	8003792 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	e000      	b.n	8003794 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003792:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40012c00 	.word	0x40012c00
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40000800 	.word	0x40000800
 80037b0:	40013400 	.word	0x40013400
 80037b4:	40014000 	.word	0x40014000
 80037b8:	00010007 	.word	0x00010007

080037bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d122      	bne.n	8003818 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0202 	mvn.w	r2, #2
 80037e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f9d8 	bl	8003bb4 <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f9ca 	bl	8003ba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f9db 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b04      	cmp	r3, #4
 8003824:	d122      	bne.n	800386c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b04      	cmp	r3, #4
 8003832:	d11b      	bne.n	800386c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0204 	mvn.w	r2, #4
 800383c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2202      	movs	r2, #2
 8003842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f9ae 	bl	8003bb4 <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f9a0 	bl	8003ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f9b1 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b08      	cmp	r3, #8
 8003878:	d122      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b08      	cmp	r3, #8
 8003886:	d11b      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0208 	mvn.w	r2, #8
 8003890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2204      	movs	r2, #4
 8003896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f984 	bl	8003bb4 <HAL_TIM_IC_CaptureCallback>
 80038ac:	e005      	b.n	80038ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f976 	bl	8003ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f987 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2b10      	cmp	r3, #16
 80038cc:	d122      	bne.n	8003914 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d11b      	bne.n	8003914 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0210 	mvn.w	r2, #16
 80038e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2208      	movs	r2, #8
 80038ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f95a 	bl	8003bb4 <HAL_TIM_IC_CaptureCallback>
 8003900:	e005      	b.n	800390e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f94c 	bl	8003ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f95d 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b01      	cmp	r3, #1
 8003920:	d10e      	bne.n	8003940 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b01      	cmp	r3, #1
 800392e:	d107      	bne.n	8003940 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0201 	mvn.w	r2, #1
 8003938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f926 	bl	8003b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394a:	2b80      	cmp	r3, #128	; 0x80
 800394c:	d10e      	bne.n	800396c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003958:	2b80      	cmp	r3, #128	; 0x80
 800395a:	d107      	bne.n	800396c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 faf6 	bl	8003f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397a:	d10e      	bne.n	800399a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003986:	2b80      	cmp	r3, #128	; 0x80
 8003988:	d107      	bne.n	800399a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fae9 	bl	8003f6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d10e      	bne.n	80039c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d107      	bne.n	80039c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f90b 	bl	8003bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d10e      	bne.n	80039f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d107      	bne.n	80039f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f06f 0220 	mvn.w	r2, #32
 80039ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 faa9 	bl	8003f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_TIM_ConfigClockSource+0x1c>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e0b6      	b.n	8003b84 <HAL_TIM_ConfigClockSource+0x18a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2202      	movs	r2, #2
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a34:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a38:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a40:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a52:	d03e      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0xd8>
 8003a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a58:	f200 8087 	bhi.w	8003b6a <HAL_TIM_ConfigClockSource+0x170>
 8003a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a60:	f000 8086 	beq.w	8003b70 <HAL_TIM_ConfigClockSource+0x176>
 8003a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a68:	d87f      	bhi.n	8003b6a <HAL_TIM_ConfigClockSource+0x170>
 8003a6a:	2b70      	cmp	r3, #112	; 0x70
 8003a6c:	d01a      	beq.n	8003aa4 <HAL_TIM_ConfigClockSource+0xaa>
 8003a6e:	2b70      	cmp	r3, #112	; 0x70
 8003a70:	d87b      	bhi.n	8003b6a <HAL_TIM_ConfigClockSource+0x170>
 8003a72:	2b60      	cmp	r3, #96	; 0x60
 8003a74:	d050      	beq.n	8003b18 <HAL_TIM_ConfigClockSource+0x11e>
 8003a76:	2b60      	cmp	r3, #96	; 0x60
 8003a78:	d877      	bhi.n	8003b6a <HAL_TIM_ConfigClockSource+0x170>
 8003a7a:	2b50      	cmp	r3, #80	; 0x50
 8003a7c:	d03c      	beq.n	8003af8 <HAL_TIM_ConfigClockSource+0xfe>
 8003a7e:	2b50      	cmp	r3, #80	; 0x50
 8003a80:	d873      	bhi.n	8003b6a <HAL_TIM_ConfigClockSource+0x170>
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d058      	beq.n	8003b38 <HAL_TIM_ConfigClockSource+0x13e>
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	d86f      	bhi.n	8003b6a <HAL_TIM_ConfigClockSource+0x170>
 8003a8a:	2b30      	cmp	r3, #48	; 0x30
 8003a8c:	d064      	beq.n	8003b58 <HAL_TIM_ConfigClockSource+0x15e>
 8003a8e:	2b30      	cmp	r3, #48	; 0x30
 8003a90:	d86b      	bhi.n	8003b6a <HAL_TIM_ConfigClockSource+0x170>
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d060      	beq.n	8003b58 <HAL_TIM_ConfigClockSource+0x15e>
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d867      	bhi.n	8003b6a <HAL_TIM_ConfigClockSource+0x170>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d05c      	beq.n	8003b58 <HAL_TIM_ConfigClockSource+0x15e>
 8003a9e:	2b10      	cmp	r3, #16
 8003aa0:	d05a      	beq.n	8003b58 <HAL_TIM_ConfigClockSource+0x15e>
 8003aa2:	e062      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6899      	ldr	r1, [r3, #8]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f000 f9a6 	bl	8003e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ac6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	609a      	str	r2, [r3, #8]
      break;
 8003ad0:	e04f      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6899      	ldr	r1, [r3, #8]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f000 f98f 	bl	8003e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003af4:	609a      	str	r2, [r3, #8]
      break;
 8003af6:	e03c      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	6859      	ldr	r1, [r3, #4]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	461a      	mov	r2, r3
 8003b06:	f000 f903 	bl	8003d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2150      	movs	r1, #80	; 0x50
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 f95c 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003b16:	e02c      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	6859      	ldr	r1, [r3, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	461a      	mov	r2, r3
 8003b26:	f000 f922 	bl	8003d6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2160      	movs	r1, #96	; 0x60
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 f94c 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003b36:	e01c      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	461a      	mov	r2, r3
 8003b46:	f000 f8e3 	bl	8003d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2140      	movs	r1, #64	; 0x40
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 f93c 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003b56:	e00c      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4619      	mov	r1, r3
 8003b62:	4610      	mov	r0, r2
 8003b64:	f000 f933 	bl	8003dce <TIM_ITRx_SetConfig>
      break;
 8003b68:	e003      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6e:	e000      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a3c      	ldr	r2, [pc, #240]	; (8003cf4 <TIM_Base_SetConfig+0x104>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00f      	beq.n	8003c28 <TIM_Base_SetConfig+0x38>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0e:	d00b      	beq.n	8003c28 <TIM_Base_SetConfig+0x38>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a39      	ldr	r2, [pc, #228]	; (8003cf8 <TIM_Base_SetConfig+0x108>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d007      	beq.n	8003c28 <TIM_Base_SetConfig+0x38>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a38      	ldr	r2, [pc, #224]	; (8003cfc <TIM_Base_SetConfig+0x10c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <TIM_Base_SetConfig+0x38>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a37      	ldr	r2, [pc, #220]	; (8003d00 <TIM_Base_SetConfig+0x110>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d108      	bne.n	8003c3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a2d      	ldr	r2, [pc, #180]	; (8003cf4 <TIM_Base_SetConfig+0x104>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d01b      	beq.n	8003c7a <TIM_Base_SetConfig+0x8a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c48:	d017      	beq.n	8003c7a <TIM_Base_SetConfig+0x8a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a2a      	ldr	r2, [pc, #168]	; (8003cf8 <TIM_Base_SetConfig+0x108>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <TIM_Base_SetConfig+0x8a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a29      	ldr	r2, [pc, #164]	; (8003cfc <TIM_Base_SetConfig+0x10c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00f      	beq.n	8003c7a <TIM_Base_SetConfig+0x8a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a28      	ldr	r2, [pc, #160]	; (8003d00 <TIM_Base_SetConfig+0x110>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00b      	beq.n	8003c7a <TIM_Base_SetConfig+0x8a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a27      	ldr	r2, [pc, #156]	; (8003d04 <TIM_Base_SetConfig+0x114>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d007      	beq.n	8003c7a <TIM_Base_SetConfig+0x8a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a26      	ldr	r2, [pc, #152]	; (8003d08 <TIM_Base_SetConfig+0x118>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d003      	beq.n	8003c7a <TIM_Base_SetConfig+0x8a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a25      	ldr	r2, [pc, #148]	; (8003d0c <TIM_Base_SetConfig+0x11c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d108      	bne.n	8003c8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a10      	ldr	r2, [pc, #64]	; (8003cf4 <TIM_Base_SetConfig+0x104>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00f      	beq.n	8003cd8 <TIM_Base_SetConfig+0xe8>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a11      	ldr	r2, [pc, #68]	; (8003d00 <TIM_Base_SetConfig+0x110>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00b      	beq.n	8003cd8 <TIM_Base_SetConfig+0xe8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a10      	ldr	r2, [pc, #64]	; (8003d04 <TIM_Base_SetConfig+0x114>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d007      	beq.n	8003cd8 <TIM_Base_SetConfig+0xe8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a0f      	ldr	r2, [pc, #60]	; (8003d08 <TIM_Base_SetConfig+0x118>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d003      	beq.n	8003cd8 <TIM_Base_SetConfig+0xe8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a0e      	ldr	r2, [pc, #56]	; (8003d0c <TIM_Base_SetConfig+0x11c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d103      	bne.n	8003ce0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	615a      	str	r2, [r3, #20]
}
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800
 8003d00:	40013400 	.word	0x40013400
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40014400 	.word	0x40014400
 8003d0c:	40014800 	.word	0x40014800

08003d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f023 0201 	bic.w	r2, r3, #1
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f023 030a 	bic.w	r3, r3, #10
 8003d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b087      	sub	sp, #28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f023 0210 	bic.w	r2, r3, #16
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	031b      	lsls	r3, r3, #12
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003daa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f043 0307 	orr.w	r3, r3, #7
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	609a      	str	r2, [r3, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	021a      	lsls	r2, r3, #8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	609a      	str	r2, [r3, #8]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e063      	b.n	8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a2b      	ldr	r2, [pc, #172]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d004      	beq.n	8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a2a      	ldr	r2, [pc, #168]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d108      	bne.n	8003ea2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1b      	ldr	r2, [pc, #108]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d018      	beq.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ece:	d013      	beq.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a18      	ldr	r2, [pc, #96]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00e      	beq.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a17      	ldr	r2, [pc, #92]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d009      	beq.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d004      	beq.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d10c      	bne.n	8003f12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003efe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40013400 	.word	0x40013400
 8003f38:	40000400 	.word	0x40000400
 8003f3c:	40000800 	.word	0x40000800
 8003f40:	40014000 	.word	0x40014000

08003f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f88:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f8c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	f107 0014 	add.w	r0, r7, #20
 8003fc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	b004      	add	sp, #16
 8003ff6:	4770      	bx	lr

08003ff8 <__libc_init_array>:
 8003ff8:	b570      	push	{r4, r5, r6, lr}
 8003ffa:	4d0d      	ldr	r5, [pc, #52]	; (8004030 <__libc_init_array+0x38>)
 8003ffc:	4c0d      	ldr	r4, [pc, #52]	; (8004034 <__libc_init_array+0x3c>)
 8003ffe:	1b64      	subs	r4, r4, r5
 8004000:	10a4      	asrs	r4, r4, #2
 8004002:	2600      	movs	r6, #0
 8004004:	42a6      	cmp	r6, r4
 8004006:	d109      	bne.n	800401c <__libc_init_array+0x24>
 8004008:	4d0b      	ldr	r5, [pc, #44]	; (8004038 <__libc_init_array+0x40>)
 800400a:	4c0c      	ldr	r4, [pc, #48]	; (800403c <__libc_init_array+0x44>)
 800400c:	f000 f820 	bl	8004050 <_init>
 8004010:	1b64      	subs	r4, r4, r5
 8004012:	10a4      	asrs	r4, r4, #2
 8004014:	2600      	movs	r6, #0
 8004016:	42a6      	cmp	r6, r4
 8004018:	d105      	bne.n	8004026 <__libc_init_array+0x2e>
 800401a:	bd70      	pop	{r4, r5, r6, pc}
 800401c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004020:	4798      	blx	r3
 8004022:	3601      	adds	r6, #1
 8004024:	e7ee      	b.n	8004004 <__libc_init_array+0xc>
 8004026:	f855 3b04 	ldr.w	r3, [r5], #4
 800402a:	4798      	blx	r3
 800402c:	3601      	adds	r6, #1
 800402e:	e7f2      	b.n	8004016 <__libc_init_array+0x1e>
 8004030:	08004098 	.word	0x08004098
 8004034:	08004098 	.word	0x08004098
 8004038:	08004098 	.word	0x08004098
 800403c:	0800409c 	.word	0x0800409c

08004040 <memset>:
 8004040:	4402      	add	r2, r0
 8004042:	4603      	mov	r3, r0
 8004044:	4293      	cmp	r3, r2
 8004046:	d100      	bne.n	800404a <memset+0xa>
 8004048:	4770      	bx	lr
 800404a:	f803 1b01 	strb.w	r1, [r3], #1
 800404e:	e7f9      	b.n	8004044 <memset+0x4>

08004050 <_init>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	bf00      	nop
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr

0800405c <_fini>:
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	bf00      	nop
 8004060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004062:	bc08      	pop	{r3}
 8004064:	469e      	mov	lr, r3
 8004066:	4770      	bx	lr
