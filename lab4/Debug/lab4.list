
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004e80  08004e80  00014e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec0  08004ec0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ec0  08004ec0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ec0  08004ec0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec0  08004ec0  00014ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000004e4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004f0  200004f0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001892d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b90  00000000  00000000  00038969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  0003b500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e0  00000000  00000000  0003c8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f051  00000000  00000000  0003dbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018fda  00000000  00000000  0005cc19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bcd87  00000000  00000000  00075bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013297a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005604  00000000  00000000  001329cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e68 	.word	0x08004e68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004e68 	.word	0x08004e68

080001c8 <contains>:
unsigned char sentence_1[20]="";
unsigned char sentence_2[20]="";
extern int sentence_counter = 0;
int position = 0;

int contains(char *string1, char *string2) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
    if (strstr(string1, string2) != NULL) {
 80001d2:	6839      	ldr	r1, [r7, #0]
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f004 fe31 	bl	8004e3c <strstr>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d001      	beq.n	80001e4 <contains+0x1c>
        return 1;
 80001e0:	2301      	movs	r3, #1
 80001e2:	e000      	b.n	80001e6 <contains+0x1e>
    } else {
        return 0;
 80001e4:	2300      	movs	r3, #0
    }
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3708      	adds	r7, #8
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
	...

080001f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a31      	ldr	r2, [pc, #196]	; (80002c4 <HAL_UART_RxCpltCallback+0xd4>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d156      	bne.n	80002b0 <HAL_UART_RxCpltCallback+0xc0>
		if (data[0] != 0x0D) {
 8000202:	4b31      	ldr	r3, [pc, #196]	; (80002c8 <HAL_UART_RxCpltCallback+0xd8>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	2b0d      	cmp	r3, #13
 8000208:	d010      	beq.n	800022c <HAL_UART_RxCpltCallback+0x3c>
			buffer[position] = data[0];
 800020a:	4b30      	ldr	r3, [pc, #192]	; (80002cc <HAL_UART_RxCpltCallback+0xdc>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a2e      	ldr	r2, [pc, #184]	; (80002c8 <HAL_UART_RxCpltCallback+0xd8>)
 8000210:	7811      	ldrb	r1, [r2, #0]
 8000212:	4a2f      	ldr	r2, [pc, #188]	; (80002d0 <HAL_UART_RxCpltCallback+0xe0>)
 8000214:	54d1      	strb	r1, [r2, r3]
			buffer[++position] = '\0';
 8000216:	4b2d      	ldr	r3, [pc, #180]	; (80002cc <HAL_UART_RxCpltCallback+0xdc>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	3301      	adds	r3, #1
 800021c:	4a2b      	ldr	r2, [pc, #172]	; (80002cc <HAL_UART_RxCpltCallback+0xdc>)
 800021e:	6013      	str	r3, [r2, #0]
 8000220:	4b2a      	ldr	r3, [pc, #168]	; (80002cc <HAL_UART_RxCpltCallback+0xdc>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a2a      	ldr	r2, [pc, #168]	; (80002d0 <HAL_UART_RxCpltCallback+0xe0>)
 8000226:	2100      	movs	r1, #0
 8000228:	54d1      	strb	r1, [r2, r3]
 800022a:	e041      	b.n	80002b0 <HAL_UART_RxCpltCallback+0xc0>
		} else if (data[0] == 0x0D) {
 800022c:	4b26      	ldr	r3, [pc, #152]	; (80002c8 <HAL_UART_RxCpltCallback+0xd8>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b0d      	cmp	r3, #13
 8000232:	d13d      	bne.n	80002b0 <HAL_UART_RxCpltCallback+0xc0>

			switch(sentence_counter){
 8000234:	4b27      	ldr	r3, [pc, #156]	; (80002d4 <HAL_UART_RxCpltCallback+0xe4>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d002      	beq.n	8000242 <HAL_UART_RxCpltCallback+0x52>
 800023c:	2b01      	cmp	r3, #1
 800023e:	d009      	beq.n	8000254 <HAL_UART_RxCpltCallback+0x64>
 8000240:	e011      	b.n	8000266 <HAL_UART_RxCpltCallback+0x76>
				case 0:
					strcpy(sentence_1, buffer);
 8000242:	4923      	ldr	r1, [pc, #140]	; (80002d0 <HAL_UART_RxCpltCallback+0xe0>)
 8000244:	4824      	ldr	r0, [pc, #144]	; (80002d8 <HAL_UART_RxCpltCallback+0xe8>)
 8000246:	f004 fdf1 	bl	8004e2c <strcpy>
					sentence_counter++;
 800024a:	4b22      	ldr	r3, [pc, #136]	; (80002d4 <HAL_UART_RxCpltCallback+0xe4>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	3301      	adds	r3, #1
 8000250:	4a20      	ldr	r2, [pc, #128]	; (80002d4 <HAL_UART_RxCpltCallback+0xe4>)
 8000252:	6013      	str	r3, [r2, #0]
				case 1:
					strcpy(sentence_2, buffer);
 8000254:	491e      	ldr	r1, [pc, #120]	; (80002d0 <HAL_UART_RxCpltCallback+0xe0>)
 8000256:	4821      	ldr	r0, [pc, #132]	; (80002dc <HAL_UART_RxCpltCallback+0xec>)
 8000258:	f004 fde8 	bl	8004e2c <strcpy>
					sentence_counter++;
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <HAL_UART_RxCpltCallback+0xe4>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	3301      	adds	r3, #1
 8000262:	4a1c      	ldr	r2, [pc, #112]	; (80002d4 <HAL_UART_RxCpltCallback+0xe4>)
 8000264:	6013      	str	r3, [r2, #0]
			}

//			double similarity_percentage = jaro_winkler_similarity(sentence_1, sentence_2) * 100;

			int is_on = contains(buffer, "on");
 8000266:	491e      	ldr	r1, [pc, #120]	; (80002e0 <HAL_UART_RxCpltCallback+0xf0>)
 8000268:	4819      	ldr	r0, [pc, #100]	; (80002d0 <HAL_UART_RxCpltCallback+0xe0>)
 800026a:	f7ff ffad 	bl	80001c8 <contains>
 800026e:	60f8      	str	r0, [r7, #12]
			int is_off = contains(buffer, "off");
 8000270:	491c      	ldr	r1, [pc, #112]	; (80002e4 <HAL_UART_RxCpltCallback+0xf4>)
 8000272:	4817      	ldr	r0, [pc, #92]	; (80002d0 <HAL_UART_RxCpltCallback+0xe0>)
 8000274:	f7ff ffa8 	bl	80001c8 <contains>
 8000278:	60b8      	str	r0, [r7, #8]
			if (is_on) {
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d006      	beq.n	800028e <HAL_UART_RxCpltCallback+0x9e>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8000280:	2201      	movs	r2, #1
 8000282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000286:	4818      	ldr	r0, [pc, #96]	; (80002e8 <HAL_UART_RxCpltCallback+0xf8>)
 8000288:	f000 ffea 	bl	8001260 <HAL_GPIO_WritePin>
 800028c:	e008      	b.n	80002a0 <HAL_UART_RxCpltCallback+0xb0>
			}else if (is_off){
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d005      	beq.n	80002a0 <HAL_UART_RxCpltCallback+0xb0>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8000294:	2200      	movs	r2, #0
 8000296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800029a:	4813      	ldr	r0, [pc, #76]	; (80002e8 <HAL_UART_RxCpltCallback+0xf8>)
 800029c:	f000 ffe0 	bl	8001260 <HAL_GPIO_WritePin>
			}

			position = 0;
 80002a0:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <HAL_UART_RxCpltCallback+0xdc>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
			memset(buffer, 0, sizeof(buffer));
 80002a6:	2214      	movs	r2, #20
 80002a8:	2100      	movs	r1, #0
 80002aa:	4809      	ldr	r0, [pc, #36]	; (80002d0 <HAL_UART_RxCpltCallback+0xe0>)
 80002ac:	f004 fdb6 	bl	8004e1c <memset>

		}
	}
	HAL_UART_Receive_IT(&huart1, data, 1);
 80002b0:	2201      	movs	r2, #1
 80002b2:	4905      	ldr	r1, [pc, #20]	; (80002c8 <HAL_UART_RxCpltCallback+0xd8>)
 80002b4:	480d      	ldr	r0, [pc, #52]	; (80002ec <HAL_UART_RxCpltCallback+0xfc>)
 80002b6:	f003 fb77 	bl	80039a8 <HAL_UART_Receive_IT>
//		        	 HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
//		     }
//		  HAL_UART_Receive_IT(&huart1, data, sizeof(data));
//	}

}
 80002ba:	bf00      	nop
 80002bc:	3710      	adds	r7, #16
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40013800 	.word	0x40013800
 80002c8:	200004a0 	.word	0x200004a0
 80002cc:	200004e4 	.word	0x200004e4
 80002d0:	200004a4 	.word	0x200004a4
 80002d4:	200004e0 	.word	0x200004e0
 80002d8:	200004b8 	.word	0x200004b8
 80002dc:	200004cc 	.word	0x200004cc
 80002e0:	08004e80 	.word	0x08004e80
 80002e4:	08004e84 	.word	0x08004e84
 80002e8:	48001000 	.word	0x48001000
 80002ec:	2000012c 	.word	0x2000012c

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f000 fc4c 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f816 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fc:	f000 f998 	bl	8000630 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000300:	f000 f876 	bl	80003f0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000304:	f000 f8b4 	bl	8000470 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000308:	f000 f970 	bl	80005ec <MX_USB_PCD_Init>
  MX_TIM4_Init();
 800030c:	f000 f8ee 	bl	80004ec <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000310:	f000 f93c 	bl	800058c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

//  unsigned char hello[8] = "hello \n";

//  HAL_UART_Transmit(&huart1, hello, sizeof(unsigned char) * 8, 1000);
  HAL_UART_Receive_IT(&huart1, data, sizeof(data));
 8000314:	2201      	movs	r2, #1
 8000316:	4902      	ldr	r1, [pc, #8]	; (8000320 <main+0x30>)
 8000318:	4802      	ldr	r0, [pc, #8]	; (8000324 <main+0x34>)
 800031a:	f003 fb45 	bl	80039a8 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800031e:	e7fe      	b.n	800031e <main+0x2e>
 8000320:	200004a0 	.word	0x200004a0
 8000324:	2000012c 	.word	0x2000012c

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b09e      	sub	sp, #120	; 0x78
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000332:	2228      	movs	r2, #40	; 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f004 fd70 	bl	8004e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	609a      	str	r2, [r3, #8]
 8000348:	60da      	str	r2, [r3, #12]
 800034a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800034c:	463b      	mov	r3, r7
 800034e:	223c      	movs	r2, #60	; 0x3c
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f004 fd62 	bl	8004e1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000358:	2303      	movs	r3, #3
 800035a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800035c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000360:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000366:	2301      	movs	r3, #1
 8000368:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036a:	2310      	movs	r3, #16
 800036c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036e:	2302      	movs	r3, #2
 8000370:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000372:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000376:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000378:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800037c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000382:	4618      	mov	r0, r3
 8000384:	f001 f9ba 	bl	80016fc <HAL_RCC_OscConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800038e:	f000 f9d7 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000392:	230f      	movs	r3, #15
 8000394:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000396:	2302      	movs	r3, #2
 8000398:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003ac:	2101      	movs	r1, #1
 80003ae:	4618      	mov	r0, r3
 80003b0:	f002 f9e2 	bl	8002778 <HAL_RCC_ClockConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003ba:	f000 f9c1 	bl	8000740 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <SystemClock_Config+0xc4>)
 80003c0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80003ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d0:	463b      	mov	r3, r7
 80003d2:	4618      	mov	r0, r3
 80003d4:	f002 fc06 	bl	8002be4 <HAL_RCCEx_PeriphCLKConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003de:	f000 f9af 	bl	8000740 <Error_Handler>
  }
}
 80003e2:	bf00      	nop
 80003e4:	3778      	adds	r7, #120	; 0x78
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	00020021 	.word	0x00020021

080003f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <MX_I2C1_Init+0x74>)
 80003f6:	4a1c      	ldr	r2, [pc, #112]	; (8000468 <MX_I2C1_Init+0x78>)
 80003f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003fa:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <MX_I2C1_Init+0x74>)
 80003fc:	4a1b      	ldr	r2, [pc, #108]	; (800046c <MX_I2C1_Init+0x7c>)
 80003fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <MX_I2C1_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000406:	4b17      	ldr	r3, [pc, #92]	; (8000464 <MX_I2C1_Init+0x74>)
 8000408:	2201      	movs	r2, #1
 800040a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <MX_I2C1_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000412:	4b14      	ldr	r3, [pc, #80]	; (8000464 <MX_I2C1_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_I2C1_Init+0x74>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800041e:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MX_I2C1_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_I2C1_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800042a:	480e      	ldr	r0, [pc, #56]	; (8000464 <MX_I2C1_Init+0x74>)
 800042c:	f000 ff6d 	bl	800130a <HAL_I2C_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000436:	f000 f983 	bl	8000740 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800043a:	2100      	movs	r1, #0
 800043c:	4809      	ldr	r0, [pc, #36]	; (8000464 <MX_I2C1_Init+0x74>)
 800043e:	f000 fff3 	bl	8001428 <HAL_I2CEx_ConfigAnalogFilter>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000448:	f000 f97a 	bl	8000740 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800044c:	2100      	movs	r1, #0
 800044e:	4805      	ldr	r0, [pc, #20]	; (8000464 <MX_I2C1_Init+0x74>)
 8000450:	f001 f835 	bl	80014be <HAL_I2CEx_ConfigDigitalFilter>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800045a:	f000 f971 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000028 	.word	0x20000028
 8000468:	40005400 	.word	0x40005400
 800046c:	2000090e 	.word	0x2000090e

08000470 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000474:	4b1b      	ldr	r3, [pc, #108]	; (80004e4 <MX_SPI1_Init+0x74>)
 8000476:	4a1c      	ldr	r2, [pc, #112]	; (80004e8 <MX_SPI1_Init+0x78>)
 8000478:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800047a:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <MX_SPI1_Init+0x74>)
 800047c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000480:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000482:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <MX_SPI1_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <MX_SPI1_Init+0x74>)
 800048a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800048e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <MX_SPI1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000496:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <MX_SPI1_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800049c:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <MX_SPI1_Init+0x74>)
 800049e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_SPI1_Init+0x74>)
 80004a6:	2208      	movs	r2, #8
 80004a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <MX_SPI1_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MX_SPI1_Init+0x74>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <MX_SPI1_Init+0x74>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <MX_SPI1_Init+0x74>)
 80004be:	2207      	movs	r2, #7
 80004c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <MX_SPI1_Init+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <MX_SPI1_Init+0x74>)
 80004ca:	2208      	movs	r2, #8
 80004cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_SPI1_Init+0x74>)
 80004d0:	f002 fd38 	bl	8002f44 <HAL_SPI_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004da:	f000 f931 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	2000007c 	.word	0x2000007c
 80004e8:	40013000 	.word	0x40013000

080004ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004f2:	f107 0310 	add.w	r3, r7, #16
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800050a:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <MX_TIM4_Init+0x98>)
 800050c:	4a1e      	ldr	r2, [pc, #120]	; (8000588 <MX_TIM4_Init+0x9c>)
 800050e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2399;
 8000510:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <MX_TIM4_Init+0x98>)
 8000512:	f640 125f 	movw	r2, #2399	; 0x95f
 8000516:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000518:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <MX_TIM4_Init+0x98>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <MX_TIM4_Init+0x98>)
 8000520:	f242 7210 	movw	r2, #10000	; 0x2710
 8000524:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000526:	4b17      	ldr	r3, [pc, #92]	; (8000584 <MX_TIM4_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <MX_TIM4_Init+0x98>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000532:	4814      	ldr	r0, [pc, #80]	; (8000584 <MX_TIM4_Init+0x98>)
 8000534:	f002 fdb1 	bl	800309a <HAL_TIM_Base_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800053e:	f000 f8ff 	bl	8000740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000546:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	4619      	mov	r1, r3
 800054e:	480d      	ldr	r0, [pc, #52]	; (8000584 <MX_TIM4_Init+0x98>)
 8000550:	f002 ff19 	bl	8003386 <HAL_TIM_ConfigClockSource>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800055a:	f000 f8f1 	bl	8000740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	4619      	mov	r1, r3
 800056a:	4806      	ldr	r0, [pc, #24]	; (8000584 <MX_TIM4_Init+0x98>)
 800056c:	f003 f930 	bl	80037d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000576:	f000 f8e3 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200000e0 	.word	0x200000e0
 8000588:	40000800 	.word	0x40000800

0800058c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <MX_USART1_UART_Init+0x58>)
 8000592:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <MX_USART1_UART_Init+0x5c>)
 8000594:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <MX_USART1_UART_Init+0x58>)
 8000598:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800059c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800059e:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_USART1_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MX_USART1_UART_Init+0x58>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_USART1_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_USART1_UART_Init+0x58>)
 80005b2:	220c      	movs	r2, #12
 80005b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <MX_USART1_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_USART1_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <MX_USART1_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_USART1_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_USART1_UART_Init+0x58>)
 80005d0:	f003 f99c 	bl	800390c <HAL_UART_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005da:	f000 f8b1 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000012c 	.word	0x2000012c
 80005e8:	40013800 	.word	0x40013800

080005ec <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <MX_USB_PCD_Init+0x3c>)
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <MX_USB_PCD_Init+0x40>)
 80005f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USB_PCD_Init+0x3c>)
 80005f8:	2208      	movs	r2, #8
 80005fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_USB_PCD_Init+0x3c>)
 80005fe:	2202      	movs	r2, #2
 8000600:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USB_PCD_Init+0x3c>)
 8000604:	2202      	movs	r2, #2
 8000606:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MX_USB_PCD_Init+0x3c>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USB_PCD_Init+0x3c>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_USB_PCD_Init+0x3c>)
 8000616:	f000 ff9e 	bl	8001556 <HAL_PCD_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000620:	f000 f88e 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200001b4 	.word	0x200001b4
 800062c:	40005c00 	.word	0x40005c00

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000646:	4b3c      	ldr	r3, [pc, #240]	; (8000738 <MX_GPIO_Init+0x108>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a3b      	ldr	r2, [pc, #236]	; (8000738 <MX_GPIO_Init+0x108>)
 800064c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000650:	6153      	str	r3, [r2, #20]
 8000652:	4b39      	ldr	r3, [pc, #228]	; (8000738 <MX_GPIO_Init+0x108>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	4b36      	ldr	r3, [pc, #216]	; (8000738 <MX_GPIO_Init+0x108>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a35      	ldr	r2, [pc, #212]	; (8000738 <MX_GPIO_Init+0x108>)
 8000664:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000668:	6153      	str	r3, [r2, #20]
 800066a:	4b33      	ldr	r3, [pc, #204]	; (8000738 <MX_GPIO_Init+0x108>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000676:	4b30      	ldr	r3, [pc, #192]	; (8000738 <MX_GPIO_Init+0x108>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	4a2f      	ldr	r2, [pc, #188]	; (8000738 <MX_GPIO_Init+0x108>)
 800067c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000680:	6153      	str	r3, [r2, #20]
 8000682:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <MX_GPIO_Init+0x108>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <MX_GPIO_Init+0x108>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a29      	ldr	r2, [pc, #164]	; (8000738 <MX_GPIO_Init+0x108>)
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000698:	6153      	str	r3, [r2, #20]
 800069a:	4b27      	ldr	r3, [pc, #156]	; (8000738 <MX_GPIO_Init+0x108>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b24      	ldr	r3, [pc, #144]	; (8000738 <MX_GPIO_Init+0x108>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a23      	ldr	r2, [pc, #140]	; (8000738 <MX_GPIO_Init+0x108>)
 80006ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b0:	6153      	str	r3, [r2, #20]
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_GPIO_Init+0x108>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006be:	2200      	movs	r2, #0
 80006c0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80006c4:	481d      	ldr	r0, [pc, #116]	; (800073c <MX_GPIO_Init+0x10c>)
 80006c6:	f000 fdcb 	bl	8001260 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 80006ca:	2336      	movs	r3, #54	; 0x36
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	4817      	ldr	r0, [pc, #92]	; (800073c <MX_GPIO_Init+0x10c>)
 80006e0:	f000 fc44 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006e4:	f64f 7308 	movw	r3, #65288	; 0xff08
 80006e8:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	480f      	ldr	r0, [pc, #60]	; (800073c <MX_GPIO_Init+0x10c>)
 80006fe:	f000 fc35 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000702:	2301      	movs	r3, #1
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000706:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800070a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800070c:	2302      	movs	r3, #2
 800070e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4619      	mov	r1, r3
 8000716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071a:	f000 fc27 	bl	8000f6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	2006      	movs	r0, #6
 8000724:	f000 fb75 	bl	8000e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000728:	2006      	movs	r0, #6
 800072a:	f000 fb8e 	bl	8000e4a <HAL_NVIC_EnableIRQ>

}
 800072e:	bf00      	nop
 8000730:	3728      	adds	r7, #40	; 0x28
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000
 800073c:	48001000 	.word	0x48001000

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <Error_Handler+0x8>
	...

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <HAL_MspInit+0x44>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <HAL_MspInit+0x44>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6193      	str	r3, [r2, #24]
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <HAL_MspInit+0x44>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_MspInit+0x44>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_MspInit+0x44>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_MspInit+0x44>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000782:	2007      	movs	r0, #7
 8000784:	f000 fb3a 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000

08000794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a17      	ldr	r2, [pc, #92]	; (8000810 <HAL_I2C_MspInit+0x7c>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d127      	bne.n	8000806 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <HAL_I2C_MspInit+0x80>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	4a16      	ldr	r2, [pc, #88]	; (8000814 <HAL_I2C_MspInit+0x80>)
 80007bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007c0:	6153      	str	r3, [r2, #20]
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <HAL_I2C_MspInit+0x80>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80007ce:	23c0      	movs	r3, #192	; 0xc0
 80007d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d2:	2312      	movs	r3, #18
 80007d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007de:	2304      	movs	r3, #4
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <HAL_I2C_MspInit+0x84>)
 80007ea:	f000 fbbf 	bl	8000f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_I2C_MspInit+0x80>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_I2C_MspInit+0x80>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007f8:	61d3      	str	r3, [r2, #28]
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_I2C_MspInit+0x80>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40005400 	.word	0x40005400
 8000814:	40021000 	.word	0x40021000
 8000818:	48000400 	.word	0x48000400

0800081c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a17      	ldr	r2, [pc, #92]	; (8000898 <HAL_SPI_MspInit+0x7c>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d128      	bne.n	8000890 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_SPI_MspInit+0x80>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a16      	ldr	r2, [pc, #88]	; (800089c <HAL_SPI_MspInit+0x80>)
 8000844:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000848:	6193      	str	r3, [r2, #24]
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_SPI_MspInit+0x80>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_SPI_MspInit+0x80>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	4a10      	ldr	r2, [pc, #64]	; (800089c <HAL_SPI_MspInit+0x80>)
 800085c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000860:	6153      	str	r3, [r2, #20]
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <HAL_SPI_MspInit+0x80>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800086e:	23e0      	movs	r3, #224	; 0xe0
 8000870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800087e:	2305      	movs	r3, #5
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f000 fb6e 	bl	8000f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40013000 	.word	0x40013000
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <HAL_TIM_Base_MspInit+0x44>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d113      	bne.n	80008da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <HAL_TIM_Base_MspInit+0x48>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <HAL_TIM_Base_MspInit+0x48>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_TIM_Base_MspInit+0x48>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	201e      	movs	r0, #30
 80008d0:	f000 fa9f 	bl	8000e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008d4:	201e      	movs	r0, #30
 80008d6:	f000 fab8 	bl	8000e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40000800 	.word	0x40000800
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <HAL_UART_MspInit+0x8c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d12f      	bne.n	800096e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800090e:	4b1b      	ldr	r3, [pc, #108]	; (800097c <HAL_UART_MspInit+0x90>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4a1a      	ldr	r2, [pc, #104]	; (800097c <HAL_UART_MspInit+0x90>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6193      	str	r3, [r2, #24]
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <HAL_UART_MspInit+0x90>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_UART_MspInit+0x90>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <HAL_UART_MspInit+0x90>)
 800092c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000930:	6153      	str	r3, [r2, #20]
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_UART_MspInit+0x90>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800093e:	2330      	movs	r3, #48	; 0x30
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800094e:	2307      	movs	r3, #7
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <HAL_UART_MspInit+0x94>)
 800095a:	f000 fb07 	bl	8000f6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2025      	movs	r0, #37	; 0x25
 8000964:	f000 fa55 	bl	8000e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000968:	2025      	movs	r0, #37	; 0x25
 800096a:	f000 fa6e 	bl	8000e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800096e:	bf00      	nop
 8000970:	3728      	adds	r7, #40	; 0x28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40013800 	.word	0x40013800
 800097c:	40021000 	.word	0x40021000
 8000980:	48000800 	.word	0x48000800

08000984 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a18      	ldr	r2, [pc, #96]	; (8000a04 <HAL_PCD_MspInit+0x80>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d129      	bne.n	80009fa <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_PCD_MspInit+0x84>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_PCD_MspInit+0x84>)
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b0:	6153      	str	r3, [r2, #20]
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_PCD_MspInit+0x84>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80009be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80009d0:	230e      	movs	r3, #14
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009de:	f000 fac5 	bl	8000f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_PCD_MspInit+0x84>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_PCD_MspInit+0x84>)
 80009e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009ec:	61d3      	str	r3, [r2, #28]
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_PCD_MspInit+0x84>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80009fa:	bf00      	nop
 80009fc:	3728      	adds	r7, #40	; 0x28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40005c00 	.word	0x40005c00
 8000a08:	40021000 	.word	0x40021000

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <NMI_Handler+0x4>

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f8e0 	bl	8000c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f000 fc2d 	bl	80012c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a76:	4820      	ldr	r0, [pc, #128]	; (8000af8 <TIM4_IRQHandler+0x88>)
 8000a78:	f002 fb66 	bl	8003148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  int mod = count%4;
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <TIM4_IRQHandler+0x8c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	425a      	negs	r2, r3
 8000a82:	f003 0303 	and.w	r3, r3, #3
 8000a86:	f002 0203 	and.w	r2, r2, #3
 8000a8a:	bf58      	it	pl
 8000a8c:	4253      	negpl	r3, r2
 8000a8e:	607b      	str	r3, [r7, #4]
  switch(mod)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d822      	bhi.n	8000adc <TIM4_IRQHandler+0x6c>
 8000a96:	a201      	add	r2, pc, #4	; (adr r2, 8000a9c <TIM4_IRQHandler+0x2c>)
 8000a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9c:	08000aad 	.word	0x08000aad
 8000aa0:	08000ab9 	.word	0x08000ab9
 8000aa4:	08000ac5 	.word	0x08000ac5
 8000aa8:	08000ad1 	.word	0x08000ad1
     {
         case 0:
        	 HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 8000aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab0:	4813      	ldr	r0, [pc, #76]	; (8000b00 <TIM4_IRQHandler+0x90>)
 8000ab2:	f000 fbed 	bl	8001290 <HAL_GPIO_TogglePin>
//        	 HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);

        	 break;
 8000ab6:	e016      	b.n	8000ae6 <TIM4_IRQHandler+0x76>

         case 1:
        	 HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	4810      	ldr	r0, [pc, #64]	; (8000b00 <TIM4_IRQHandler+0x90>)
 8000abe:	f000 fbe7 	bl	8001290 <HAL_GPIO_TogglePin>
             break;
 8000ac2:	e010      	b.n	8000ae6 <TIM4_IRQHandler+0x76>

         case 2:
        	 HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8000ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <TIM4_IRQHandler+0x90>)
 8000aca:	f000 fbe1 	bl	8001290 <HAL_GPIO_TogglePin>
             break;
 8000ace:	e00a      	b.n	8000ae6 <TIM4_IRQHandler+0x76>

         case 3:
        	 HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 8000ad0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ad4:	480a      	ldr	r0, [pc, #40]	; (8000b00 <TIM4_IRQHandler+0x90>)
 8000ad6:	f000 fbdb 	bl	8001290 <HAL_GPIO_TogglePin>
             break;
 8000ada:	e004      	b.n	8000ae6 <TIM4_IRQHandler+0x76>
         default:
        	 HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8000adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae0:	4807      	ldr	r0, [pc, #28]	; (8000b00 <TIM4_IRQHandler+0x90>)
 8000ae2:	f000 fbd5 	bl	8001290 <HAL_GPIO_TogglePin>
     }
  count++;
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <TIM4_IRQHandler+0x8c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	3301      	adds	r3, #1
 8000aec:	4a03      	ldr	r2, [pc, #12]	; (8000afc <TIM4_IRQHandler+0x8c>)
 8000aee:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM4_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200000e0 	.word	0x200000e0
 8000afc:	200004e8 	.word	0x200004e8
 8000b00:	48001000 	.word	0x48001000

08000b04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <USART1_IRQHandler+0x10>)
 8000b0a:	f002 ff91 	bl	8003a30 <HAL_UART_IRQHandler>
//        	 HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
//     }
//  HAL_UART_Receive_IT(&huart1, data, sizeof(data));

  /* USER CODE END USART1_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000012c 	.word	0x2000012c

08000b18 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b74 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b40:	f7ff ffea 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	; (8000b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <LoopForever+0xe>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	; (8000b88 <LoopForever+0x16>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f004 f933 	bl	8004dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b6e:	f7ff fbbf 	bl	80002f0 <main>

08000b72 <LoopForever>:

LoopForever:
    b LoopForever
 8000b72:	e7fe      	b.n	8000b72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b74:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b80:	08004ec8 	.word	0x08004ec8
  ldr r2, =_sbss
 8000b84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b88:	200004f0 	.word	0x200004f0

08000b8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC1_2_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_Init+0x28>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <HAL_Init+0x28>)
 8000b9a:	f043 0310 	orr.w	r3, r3, #16
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 f92b 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 f808 	bl	8000bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bac:	f7ff fdce 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40022000 	.word	0x40022000

08000bbc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_InitTick+0x54>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x58>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f943 	bl	8000e66 <HAL_SYSTICK_Config>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00e      	b.n	8000c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d80a      	bhi.n	8000c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f000 f90b 	bl	8000e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <HAL_InitTick+0x5c>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	e000      	b.n	8000c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000000 	.word	0x20000000
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000004 	.word	0x20000004

08000c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	200004ec 	.word	0x200004ec

08000c44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	200004ec 	.word	0x200004ec

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4907      	ldr	r1, [pc, #28]	; (8000cf8 <__NVIC_EnableIRQ+0x38>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc8:	d301      	bcc.n	8000dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <SysTick_Config+0x40>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f7ff ff8e 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SysTick_Config+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SysTick_Config+0x40>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff29 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e24:	f7ff ff3e 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	6978      	ldr	r0, [r7, #20]
 8000e30:	f7ff ff8e 	bl	8000d50 <NVIC_EncodePriority>
 8000e34:	4602      	mov	r2, r0
 8000e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff5d 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff31 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ffa2 	bl	8000db8 <SysTick_Config>
 8000e74:	4603      	mov	r3, r0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d008      	beq.n	8000ea2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2204      	movs	r2, #4
 8000e94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e020      	b.n	8000ee4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 020e 	bic.w	r2, r2, #14
 8000eb0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0201 	bic.w	r2, r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eca:	2101      	movs	r1, #1
 8000ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d005      	beq.n	8000f12 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2204      	movs	r2, #4
 8000f0a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e027      	b.n	8000f62 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 020e 	bic.w	r2, r2, #14
 8000f20:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 0201 	bic.w	r2, r2, #1
 8000f30:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f40:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	4798      	blx	r3
    } 
  }
  return status;
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7a:	e154      	b.n	8001226 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	2101      	movs	r1, #1
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 8146 	beq.w	8001220 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d005      	beq.n	8000fac <HAL_GPIO_Init+0x40>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d130      	bne.n	800100e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	091b      	lsrs	r3, r3, #4
 8000ff8:	f003 0201 	and.w	r2, r3, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b03      	cmp	r3, #3
 8001018:	d017      	beq.n	800104a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d123      	bne.n	800109e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	08da      	lsrs	r2, r3, #3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3208      	adds	r2, #8
 800105e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	691a      	ldr	r2, [r3, #16]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	08da      	lsrs	r2, r3, #3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3208      	adds	r2, #8
 8001098:	6939      	ldr	r1, [r7, #16]
 800109a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0203 	and.w	r2, r3, #3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 80a0 	beq.w	8001220 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e0:	4b58      	ldr	r3, [pc, #352]	; (8001244 <HAL_GPIO_Init+0x2d8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a57      	ldr	r2, [pc, #348]	; (8001244 <HAL_GPIO_Init+0x2d8>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b55      	ldr	r3, [pc, #340]	; (8001244 <HAL_GPIO_Init+0x2d8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f8:	4a53      	ldr	r2, [pc, #332]	; (8001248 <HAL_GPIO_Init+0x2dc>)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001122:	d019      	beq.n	8001158 <HAL_GPIO_Init+0x1ec>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a49      	ldr	r2, [pc, #292]	; (800124c <HAL_GPIO_Init+0x2e0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d013      	beq.n	8001154 <HAL_GPIO_Init+0x1e8>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a48      	ldr	r2, [pc, #288]	; (8001250 <HAL_GPIO_Init+0x2e4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d00d      	beq.n	8001150 <HAL_GPIO_Init+0x1e4>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a47      	ldr	r2, [pc, #284]	; (8001254 <HAL_GPIO_Init+0x2e8>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d007      	beq.n	800114c <HAL_GPIO_Init+0x1e0>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a46      	ldr	r2, [pc, #280]	; (8001258 <HAL_GPIO_Init+0x2ec>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d101      	bne.n	8001148 <HAL_GPIO_Init+0x1dc>
 8001144:	2304      	movs	r3, #4
 8001146:	e008      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001148:	2305      	movs	r3, #5
 800114a:	e006      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 800114c:	2303      	movs	r3, #3
 800114e:	e004      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001150:	2302      	movs	r3, #2
 8001152:	e002      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001158:	2300      	movs	r3, #0
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	f002 0203 	and.w	r2, r2, #3
 8001160:	0092      	lsls	r2, r2, #2
 8001162:	4093      	lsls	r3, r2
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800116a:	4937      	ldr	r1, [pc, #220]	; (8001248 <HAL_GPIO_Init+0x2dc>)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001178:	4b38      	ldr	r3, [pc, #224]	; (800125c <HAL_GPIO_Init+0x2f0>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800119c:	4a2f      	ldr	r2, [pc, #188]	; (800125c <HAL_GPIO_Init+0x2f0>)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a2:	4b2e      	ldr	r3, [pc, #184]	; (800125c <HAL_GPIO_Init+0x2f0>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011c6:	4a25      	ldr	r2, [pc, #148]	; (800125c <HAL_GPIO_Init+0x2f0>)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <HAL_GPIO_Init+0x2f0>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011f0:	4a1a      	ldr	r2, [pc, #104]	; (800125c <HAL_GPIO_Init+0x2f0>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_GPIO_Init+0x2f0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800121a:	4a10      	ldr	r2, [pc, #64]	; (800125c <HAL_GPIO_Init+0x2f0>)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	fa22 f303 	lsr.w	r3, r2, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	f47f aea3 	bne.w	8000f7c <HAL_GPIO_Init+0x10>
  }
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	371c      	adds	r7, #28
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	40021000 	.word	0x40021000
 8001248:	40010000 	.word	0x40010000
 800124c:	48000400 	.word	0x48000400
 8001250:	48000800 	.word	0x48000800
 8001254:	48000c00 	.word	0x48000c00
 8001258:	48001000 	.word	0x48001000
 800125c:	40010400 	.word	0x40010400

08001260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
 800126c:	4613      	mov	r3, r2
 800126e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800127c:	e002      	b.n	8001284 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4013      	ands	r3, r2
 80012a8:	041a      	lsls	r2, r3, #16
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43d9      	mvns	r1, r3
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	400b      	ands	r3, r1
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d006      	beq.n	80012e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f806 	bl	80012f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40010400 	.word	0x40010400

080012f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e081      	b.n	8001420 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d106      	bne.n	8001336 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fa2f 	bl	8000794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2224      	movs	r2, #36	; 0x24
 800133a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0201 	bic.w	r2, r2, #1
 800134c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800135a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800136a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d107      	bne.n	8001384 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	e006      	b.n	8001392 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001390:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d104      	bne.n	80013a4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6812      	ldr	r2, [r2, #0]
 80013ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013b6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69d9      	ldr	r1, [r3, #28]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1a      	ldr	r2, [r3, #32]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0201 	orr.w	r2, r2, #1
 8001400:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2220      	movs	r2, #32
 800140c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b20      	cmp	r3, #32
 800143c:	d138      	bne.n	80014b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001444:	2b01      	cmp	r3, #1
 8001446:	d101      	bne.n	800144c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001448:	2302      	movs	r3, #2
 800144a:	e032      	b.n	80014b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2224      	movs	r2, #36	; 0x24
 8001458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0201 	bic.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800147a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6819      	ldr	r1, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0201 	orr.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2220      	movs	r2, #32
 80014a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	e000      	b.n	80014b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014b0:	2302      	movs	r3, #2
  }
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014be:	b480      	push	{r7}
 80014c0:	b085      	sub	sp, #20
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b20      	cmp	r3, #32
 80014d2:	d139      	bne.n	8001548 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d101      	bne.n	80014e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014de:	2302      	movs	r3, #2
 80014e0:	e033      	b.n	800154a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2224      	movs	r2, #36	; 0x24
 80014ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0201 	bic.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001510:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2220      	movs	r2, #32
 8001538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	e000      	b.n	800154a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001548:	2302      	movs	r3, #2
  }
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001558:	b08b      	sub	sp, #44	; 0x2c
 800155a:	af06      	add	r7, sp, #24
 800155c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0c4      	b.n	80016f2 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d106      	bne.n	8001582 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fa01 	bl	8000984 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2203      	movs	r2, #3
 8001586:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f003 fbe4 	bl	8004d5c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e040      	b.n	800161c <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	3301      	adds	r3, #1
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	3303      	adds	r3, #3
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	3338      	adds	r3, #56	; 0x38
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015ee:	7bfa      	ldrb	r2, [r7, #15]
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	440b      	add	r3, r1
 80015fc:	333c      	adds	r3, #60	; 0x3c
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	440b      	add	r3, r1
 8001610:	3340      	adds	r3, #64	; 0x40
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	3301      	adds	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	429a      	cmp	r2, r3
 8001624:	d3b9      	bcc.n	800159a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001626:	2300      	movs	r3, #0
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	e044      	b.n	80016b6 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	440b      	add	r3, r1
 800163a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	440b      	add	r3, r1
 8001650:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001684:	7bfa      	ldrb	r2, [r7, #15]
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	3301      	adds	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
 80016b6:	7bfa      	ldrb	r2, [r7, #15]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d3b5      	bcc.n	800162c <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	687e      	ldr	r6, [r7, #4]
 80016c8:	466d      	mov	r5, sp
 80016ca:	f106 0410 	add.w	r4, r6, #16
 80016ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	602b      	str	r3, [r5, #0]
 80016d6:	1d33      	adds	r3, r6, #4
 80016d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016da:	6838      	ldr	r0, [r7, #0]
 80016dc:	f003 fb59 	bl	8004d92 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001702:	af00      	add	r7, sp, #0
 8001704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001708:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800170c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800170e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001712:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	f001 b823 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001726:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 817d 	beq.w	8001a32 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001738:	4bbc      	ldr	r3, [pc, #752]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b04      	cmp	r3, #4
 8001742:	d00c      	beq.n	800175e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001744:	4bb9      	ldr	r3, [pc, #740]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d15c      	bne.n	800180a <HAL_RCC_OscConfig+0x10e>
 8001750:	4bb6      	ldr	r3, [pc, #728]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175c:	d155      	bne.n	800180a <HAL_RCC_OscConfig+0x10e>
 800175e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001762:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001766:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800176a:	fa93 f3a3 	rbit	r3, r3
 800176e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001772:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001776:	fab3 f383 	clz	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	095b      	lsrs	r3, r3, #5
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b01      	cmp	r3, #1
 8001788:	d102      	bne.n	8001790 <HAL_RCC_OscConfig+0x94>
 800178a:	4ba8      	ldr	r3, [pc, #672]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	e015      	b.n	80017bc <HAL_RCC_OscConfig+0xc0>
 8001790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001794:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001798:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800179c:	fa93 f3a3 	rbit	r3, r3
 80017a0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80017a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017a8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80017ac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80017b0:	fa93 f3a3 	rbit	r3, r3
 80017b4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80017b8:	4b9c      	ldr	r3, [pc, #624]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017c0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80017c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017c8:	fa92 f2a2 	rbit	r2, r2
 80017cc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80017d0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80017d4:	fab2 f282 	clz	r2, r2
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	f042 0220 	orr.w	r2, r2, #32
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	f002 021f 	and.w	r2, r2, #31
 80017e4:	2101      	movs	r1, #1
 80017e6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 811f 	beq.w	8001a30 <HAL_RCC_OscConfig+0x334>
 80017f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 8116 	bne.w	8001a30 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	f000 bfaf 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181a:	d106      	bne.n	800182a <HAL_RCC_OscConfig+0x12e>
 800181c:	4b83      	ldr	r3, [pc, #524]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a82      	ldr	r2, [pc, #520]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	e036      	b.n	8001898 <HAL_RCC_OscConfig+0x19c>
 800182a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x158>
 800183a:	4b7c      	ldr	r3, [pc, #496]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a7b      	ldr	r2, [pc, #492]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b79      	ldr	r3, [pc, #484]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a78      	ldr	r2, [pc, #480]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 800184c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e021      	b.n	8001898 <HAL_RCC_OscConfig+0x19c>
 8001854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001858:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0x184>
 8001866:	4b71      	ldr	r3, [pc, #452]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a70      	ldr	r2, [pc, #448]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 800186c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	4b6e      	ldr	r3, [pc, #440]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a6d      	ldr	r2, [pc, #436]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e00b      	b.n	8001898 <HAL_RCC_OscConfig+0x19c>
 8001880:	4b6a      	ldr	r3, [pc, #424]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a69      	ldr	r2, [pc, #420]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b67      	ldr	r3, [pc, #412]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a66      	ldr	r2, [pc, #408]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001896:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001898:	4b64      	ldr	r3, [pc, #400]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	f023 020f 	bic.w	r2, r3, #15
 80018a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	495f      	ldr	r1, [pc, #380]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d059      	beq.n	8001976 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7ff f9bf 	bl	8000c44 <HAL_GetTick>
 80018c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff f9ba 	bl	8000c44 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b64      	cmp	r3, #100	; 0x64
 80018da:	d902      	bls.n	80018e2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	f000 bf43 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>
 80018e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018e6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80018f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	fab3 f383 	clz	r3, r3
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	095b      	lsrs	r3, r3, #5
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d102      	bne.n	8001914 <HAL_RCC_OscConfig+0x218>
 800190e:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	e015      	b.n	8001940 <HAL_RCC_OscConfig+0x244>
 8001914:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001918:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800192c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001930:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001934:	fa93 f3a3 	rbit	r3, r3
 8001938:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800193c:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001944:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001948:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800194c:	fa92 f2a2 	rbit	r2, r2
 8001950:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001954:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001958:	fab2 f282 	clz	r2, r2
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	f042 0220 	orr.w	r2, r2, #32
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	f002 021f 	and.w	r2, r2, #31
 8001968:	2101      	movs	r1, #1
 800196a:	fa01 f202 	lsl.w	r2, r1, r2
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0ab      	beq.n	80018cc <HAL_RCC_OscConfig+0x1d0>
 8001974:	e05d      	b.n	8001a32 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff f965 	bl	8000c44 <HAL_GetTick>
 800197a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197e:	e00a      	b.n	8001996 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff f960 	bl	8000c44 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b64      	cmp	r3, #100	; 0x64
 800198e:	d902      	bls.n	8001996 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	f000 bee9 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>
 8001996:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800199a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80019a2:	fa93 f3a3 	rbit	r3, r3
 80019a6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80019aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	095b      	lsrs	r3, r3, #5
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d102      	bne.n	80019c8 <HAL_RCC_OscConfig+0x2cc>
 80019c2:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	e015      	b.n	80019f4 <HAL_RCC_OscConfig+0x2f8>
 80019c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019cc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80019dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80019e4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80019e8:	fa93 f3a3 	rbit	r3, r3
 80019ec:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_RCC_OscConfig+0x330>)
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019f8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80019fc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a00:	fa92 f2a2 	rbit	r2, r2
 8001a04:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a08:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a0c:	fab2 f282 	clz	r2, r2
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	f042 0220 	orr.w	r2, r2, #32
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	f002 021f 	and.w	r2, r2, #31
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1ab      	bne.n	8001980 <HAL_RCC_OscConfig+0x284>
 8001a28:	e003      	b.n	8001a32 <HAL_RCC_OscConfig+0x336>
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 817d 	beq.w	8001d42 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a48:	4ba6      	ldr	r3, [pc, #664]	; (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00b      	beq.n	8001a6c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a54:	4ba3      	ldr	r3, [pc, #652]	; (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d172      	bne.n	8001b46 <HAL_RCC_OscConfig+0x44a>
 8001a60:	4ba0      	ldr	r3, [pc, #640]	; (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d16c      	bne.n	8001b46 <HAL_RCC_OscConfig+0x44a>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a76:	fa93 f3a3 	rbit	r3, r3
 8001a7a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001a7e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	095b      	lsrs	r3, r3, #5
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d102      	bne.n	8001a9c <HAL_RCC_OscConfig+0x3a0>
 8001a96:	4b93      	ldr	r3, [pc, #588]	; (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	e013      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3c8>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ab4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ab8:	fa93 f3a3 	rbit	r3, r3
 8001abc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001ac0:	4b88      	ldr	r3, [pc, #544]	; (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001aca:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ace:	fa92 f2a2 	rbit	r2, r2
 8001ad2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ad6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001ada:	fab2 f282 	clz	r2, r2
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	f042 0220 	orr.w	r2, r2, #32
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	f002 021f 	and.w	r2, r2, #31
 8001aea:	2101      	movs	r1, #1
 8001aec:	fa01 f202 	lsl.w	r2, r1, r2
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00a      	beq.n	8001b0c <HAL_RCC_OscConfig+0x410>
 8001af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	f000 be2e 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0c:	4b75      	ldr	r3, [pc, #468]	; (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	21f8      	movs	r1, #248	; 0xf8
 8001b22:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b2a:	fa91 f1a1 	rbit	r1, r1
 8001b2e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b32:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b36:	fab1 f181 	clz	r1, r1
 8001b3a:	b2c9      	uxtb	r1, r1
 8001b3c:	408b      	lsls	r3, r1
 8001b3e:	4969      	ldr	r1, [pc, #420]	; (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b44:	e0fd      	b.n	8001d42 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8088 	beq.w	8001c68 <HAL_RCC_OscConfig+0x56c>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001b6a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2301      	movs	r3, #1
 8001b82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff f85e 	bl	8000c44 <HAL_GetTick>
 8001b88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8e:	f7ff f859 	bl	8000c44 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d902      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	f000 bde2 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001bb6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	095b      	lsrs	r3, r3, #5
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d102      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x4d8>
 8001bce:	4b45      	ldr	r3, [pc, #276]	; (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	e013      	b.n	8001bfc <HAL_RCC_OscConfig+0x500>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001be6:	2302      	movs	r3, #2
 8001be8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001bec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001bf8:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c02:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c06:	fa92 f2a2 	rbit	r2, r2
 8001c0a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c0e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c12:	fab2 f282 	clz	r2, r2
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	f042 0220 	orr.w	r2, r2, #32
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	f002 021f 	and.w	r2, r2, #31
 8001c22:	2101      	movs	r1, #1
 8001c24:	fa01 f202 	lsl.w	r2, r1, r2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0af      	beq.n	8001b8e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	21f8      	movs	r1, #248	; 0xf8
 8001c44:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c4c:	fa91 f1a1 	rbit	r1, r1
 8001c50:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c54:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c58:	fab1 f181 	clz	r1, r1
 8001c5c:	b2c9      	uxtb	r1, r1
 8001c5e:	408b      	lsls	r3, r1
 8001c60:	4920      	ldr	r1, [pc, #128]	; (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
 8001c66:	e06c      	b.n	8001d42 <HAL_RCC_OscConfig+0x646>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001c7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	461a      	mov	r2, r3
 8001c90:	2300      	movs	r3, #0
 8001c92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7fe ffd6 	bl	8000c44 <HAL_GetTick>
 8001c98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7fe ffd1 	bl	8000c44 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d902      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	f000 bd5a 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cca:	fab3 f383 	clz	r3, r3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	095b      	lsrs	r3, r3, #5
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d104      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x5ec>
 8001cde:	4b01      	ldr	r3, [pc, #4]	; (8001ce4 <HAL_RCC_OscConfig+0x5e8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	e015      	b.n	8001d10 <HAL_RCC_OscConfig+0x614>
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	2302      	movs	r3, #2
 8001cea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d00:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d0c:	4bc8      	ldr	r3, [pc, #800]	; (8002030 <HAL_RCC_OscConfig+0x934>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	2202      	movs	r2, #2
 8001d12:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d16:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d1a:	fa92 f2a2 	rbit	r2, r2
 8001d1e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d22:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d26:	fab2 f282 	clz	r2, r2
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	f042 0220 	orr.w	r2, r2, #32
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	f002 021f 	and.w	r2, r2, #31
 8001d36:	2101      	movs	r1, #1
 8001d38:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1ad      	bne.n	8001c9e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8110 	beq.w	8001f78 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d079      	beq.n	8001e5c <HAL_RCC_OscConfig+0x760>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	4bab      	ldr	r3, [pc, #684]	; (8002034 <HAL_RCC_OscConfig+0x938>)
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2301      	movs	r3, #1
 8001d90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d92:	f7fe ff57 	bl	8000c44 <HAL_GetTick>
 8001d96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7fe ff52 	bl	8000c44 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d902      	bls.n	8001db2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	f000 bcdb 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>
 8001db2:	2302      	movs	r3, #2
 8001db4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001dcc:	2202      	movs	r2, #2
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	fa93 f2a3 	rbit	r2, r3
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001df0:	2202      	movs	r2, #2
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	fa93 f2a3 	rbit	r2, r3
 8001e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e0a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0c:	4b88      	ldr	r3, [pc, #544]	; (8002030 <HAL_RCC_OscConfig+0x934>)
 8001e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e18:	2102      	movs	r1, #2
 8001e1a:	6019      	str	r1, [r3, #0]
 8001e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	fa93 f1a3 	rbit	r1, r3
 8001e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e32:	6019      	str	r1, [r3, #0]
  return result;
 8001e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e38:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	2101      	movs	r1, #1
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0a0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x6a0>
 8001e5a:	e08d      	b.n	8001f78 <HAL_RCC_OscConfig+0x87c>
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e64:	2201      	movs	r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	fa93 f2a3 	rbit	r2, r3
 8001e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e7e:	601a      	str	r2, [r3, #0]
  return result;
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e88:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b68      	ldr	r3, [pc, #416]	; (8002034 <HAL_RCC_OscConfig+0x938>)
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9e:	f7fe fed1 	bl	8000c44 <HAL_GetTick>
 8001ea2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea6:	e00a      	b.n	8001ebe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea8:	f7fe fecc 	bl	8000c44 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d902      	bls.n	8001ebe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	f000 bc55 	b.w	8002768 <HAL_RCC_OscConfig+0x106c>
 8001ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ece:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	fa93 f2a3 	rbit	r2, r3
 8001ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001edc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001eea:	2202      	movs	r2, #2
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	fa93 f2a3 	rbit	r2, r3
 8001efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f0e:	2202      	movs	r2, #2
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	fa93 f2a3 	rbit	r2, r3
 8001f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f24:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f28:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2a:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_RCC_OscConfig+0x934>)
 8001f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f32:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f36:	2102      	movs	r1, #2
 8001f38:	6019      	str	r1, [r3, #0]
 8001f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	fa93 f1a3 	rbit	r1, r3
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f50:	6019      	str	r1, [r3, #0]
  return result;
 8001f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f56:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	fab3 f383 	clz	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f003 031f 	and.w	r3, r3, #31
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d197      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 81a1 	beq.w	80022d0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f94:	4b26      	ldr	r3, [pc, #152]	; (8002030 <HAL_RCC_OscConfig+0x934>)
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d116      	bne.n	8001fce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa0:	4b23      	ldr	r3, [pc, #140]	; (8002030 <HAL_RCC_OscConfig+0x934>)
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	4a22      	ldr	r2, [pc, #136]	; (8002030 <HAL_RCC_OscConfig+0x934>)
 8001fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001faa:	61d3      	str	r3, [r2, #28]
 8001fac:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_RCC_OscConfig+0x934>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001fc6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <HAL_RCC_OscConfig+0x93c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d11a      	bne.n	8002010 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <HAL_RCC_OscConfig+0x93c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a16      	ldr	r2, [pc, #88]	; (8002038 <HAL_RCC_OscConfig+0x93c>)
 8001fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe6:	f7fe fe2d 	bl	8000c44 <HAL_GetTick>
 8001fea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	e009      	b.n	8002004 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff0:	f7fe fe28 	bl	8000c44 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b64      	cmp	r3, #100	; 0x64
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e3b1      	b.n	8002768 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <HAL_RCC_OscConfig+0x93c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0ef      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002014:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d10d      	bne.n	800203c <HAL_RCC_OscConfig+0x940>
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_RCC_OscConfig+0x934>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4a02      	ldr	r2, [pc, #8]	; (8002030 <HAL_RCC_OscConfig+0x934>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6213      	str	r3, [r2, #32]
 800202c:	e03c      	b.n	80020a8 <HAL_RCC_OscConfig+0x9ac>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	10908120 	.word	0x10908120
 8002038:	40007000 	.word	0x40007000
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10c      	bne.n	8002066 <HAL_RCC_OscConfig+0x96a>
 800204c:	4bc1      	ldr	r3, [pc, #772]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4ac0      	ldr	r2, [pc, #768]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	4bbe      	ldr	r3, [pc, #760]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4abd      	ldr	r2, [pc, #756]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 800205e:	f023 0304 	bic.w	r3, r3, #4
 8002062:	6213      	str	r3, [r2, #32]
 8002064:	e020      	b.n	80020a8 <HAL_RCC_OscConfig+0x9ac>
 8002066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b05      	cmp	r3, #5
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x994>
 8002076:	4bb7      	ldr	r3, [pc, #732]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4ab6      	ldr	r2, [pc, #728]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	6213      	str	r3, [r2, #32]
 8002082:	4bb4      	ldr	r3, [pc, #720]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4ab3      	ldr	r2, [pc, #716]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6213      	str	r3, [r2, #32]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0x9ac>
 8002090:	4bb0      	ldr	r3, [pc, #704]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4aaf      	ldr	r2, [pc, #700]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	4bad      	ldr	r3, [pc, #692]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4aac      	ldr	r2, [pc, #688]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 80020a2:	f023 0304 	bic.w	r3, r3, #4
 80020a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8081 	beq.w	80021bc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7fe fdc3 	bl	8000c44 <HAL_GetTick>
 80020be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c4:	f7fe fdbe 	bl	8000c44 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e345      	b.n	8002768 <HAL_RCC_OscConfig+0x106c>
 80020dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020e4:	2202      	movs	r2, #2
 80020e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	fa93 f2a3 	rbit	r2, r3
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002104:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002108:	2202      	movs	r2, #2
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002110:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	fa93 f2a3 	rbit	r2, r3
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002122:	601a      	str	r2, [r3, #0]
  return result;
 8002124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002128:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800212c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	b2db      	uxtb	r3, r3
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d102      	bne.n	8002148 <HAL_RCC_OscConfig+0xa4c>
 8002142:	4b84      	ldr	r3, [pc, #528]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	e013      	b.n	8002170 <HAL_RCC_OscConfig+0xa74>
 8002148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002150:	2202      	movs	r2, #2
 8002152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	fa93 f2a3 	rbit	r2, r3
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	4b79      	ldr	r3, [pc, #484]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002174:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002178:	2102      	movs	r1, #2
 800217a:	6011      	str	r1, [r2, #0]
 800217c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002180:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	fa92 f1a2 	rbit	r1, r2
 800218a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800218e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002192:	6011      	str	r1, [r2, #0]
  return result;
 8002194:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002198:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	fab2 f282 	clz	r2, r2
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	f002 021f 	and.w	r2, r2, #31
 80021ae:	2101      	movs	r1, #1
 80021b0:	fa01 f202 	lsl.w	r2, r1, r2
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d084      	beq.n	80020c4 <HAL_RCC_OscConfig+0x9c8>
 80021ba:	e07f      	b.n	80022bc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021bc:	f7fe fd42 	bl	8000c44 <HAL_GetTick>
 80021c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c4:	e00b      	b.n	80021de <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c6:	f7fe fd3d 	bl	8000c44 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e2c4      	b.n	8002768 <HAL_RCC_OscConfig+0x106c>
 80021de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80021e6:	2202      	movs	r2, #2
 80021e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	fa93 f2a3 	rbit	r2, r3
 80021f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002206:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800220a:	2202      	movs	r2, #2
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002212:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	fa93 f2a3 	rbit	r2, r3
 800221c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002220:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002224:	601a      	str	r2, [r3, #0]
  return result;
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800222e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f043 0302 	orr.w	r3, r3, #2
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d102      	bne.n	800224a <HAL_RCC_OscConfig+0xb4e>
 8002244:	4b43      	ldr	r3, [pc, #268]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	e013      	b.n	8002272 <HAL_RCC_OscConfig+0xb76>
 800224a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002252:	2202      	movs	r2, #2
 8002254:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	fa93 f2a3 	rbit	r2, r3
 8002264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002268:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	4b39      	ldr	r3, [pc, #228]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002276:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800227a:	2102      	movs	r1, #2
 800227c:	6011      	str	r1, [r2, #0]
 800227e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002282:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	fa92 f1a2 	rbit	r1, r2
 800228c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002290:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002294:	6011      	str	r1, [r2, #0]
  return result;
 8002296:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800229a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	fab2 f282 	clz	r2, r2
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	f002 021f 	and.w	r2, r2, #31
 80022b0:	2101      	movs	r1, #1
 80022b2:	fa01 f202 	lsl.w	r2, r1, r2
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d184      	bne.n	80021c6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d105      	bne.n	80022d0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c4:	4b23      	ldr	r3, [pc, #140]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	4a22      	ldr	r2, [pc, #136]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 80022ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 8242 	beq.w	8002766 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e2:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <HAL_RCC_OscConfig+0xc58>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	f000 8213 	beq.w	8002716 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	f040 8162 	bne.w	80025c6 <HAL_RCC_OscConfig+0xeca>
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800230a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800230e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	fa93 f2a3 	rbit	r2, r3
 800231e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002322:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002326:	601a      	str	r2, [r3, #0]
  return result;
 8002328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002330:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800233c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	461a      	mov	r2, r3
 8002344:	2300      	movs	r3, #0
 8002346:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe fc7c 	bl	8000c44 <HAL_GetTick>
 800234c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002350:	e00c      	b.n	800236c <HAL_RCC_OscConfig+0xc70>
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe fc74 	bl	8000c44 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e1fd      	b.n	8002768 <HAL_RCC_OscConfig+0x106c>
 800236c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002370:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002374:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fa93 f2a3 	rbit	r2, r3
 8002388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002390:	601a      	str	r2, [r3, #0]
  return result;
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800239a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d102      	bne.n	80023b6 <HAL_RCC_OscConfig+0xcba>
 80023b0:	4bb0      	ldr	r3, [pc, #704]	; (8002674 <HAL_RCC_OscConfig+0xf78>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	e027      	b.n	8002406 <HAL_RCC_OscConfig+0xd0a>
 80023b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fa93 f2a3 	rbit	r2, r3
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80023e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	fa93 f2a3 	rbit	r2, r3
 80023f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	4b9c      	ldr	r3, [pc, #624]	; (8002674 <HAL_RCC_OscConfig+0xf78>)
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800240a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800240e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002412:	6011      	str	r1, [r2, #0]
 8002414:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002418:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	fa92 f1a2 	rbit	r1, r2
 8002422:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002426:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800242a:	6011      	str	r1, [r2, #0]
  return result;
 800242c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002430:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	fab2 f282 	clz	r2, r2
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	f042 0220 	orr.w	r2, r2, #32
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f002 021f 	and.w	r2, r2, #31
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f202 	lsl.w	r2, r1, r2
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d182      	bne.n	8002358 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002452:	4b88      	ldr	r3, [pc, #544]	; (8002674 <HAL_RCC_OscConfig+0xf78>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800245a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	430b      	orrs	r3, r1
 8002474:	497f      	ldr	r1, [pc, #508]	; (8002674 <HAL_RCC_OscConfig+0xf78>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
 800247a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002482:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f2a3 	rbit	r2, r3
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800249e:	601a      	str	r2, [r3, #0]
  return result;
 80024a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024a8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	461a      	mov	r2, r3
 80024bc:	2301      	movs	r3, #1
 80024be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fbc0 	bl	8000c44 <HAL_GetTick>
 80024c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c8:	e009      	b.n	80024de <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ca:	f7fe fbbb 	bl	8000c44 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e144      	b.n	8002768 <HAL_RCC_OscConfig+0x106c>
 80024de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80024e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	fa93 f2a3 	rbit	r2, r3
 80024fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002502:	601a      	str	r2, [r3, #0]
  return result;
 8002504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002508:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800250c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d102      	bne.n	8002528 <HAL_RCC_OscConfig+0xe2c>
 8002522:	4b54      	ldr	r3, [pc, #336]	; (8002674 <HAL_RCC_OscConfig+0xf78>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	e027      	b.n	8002578 <HAL_RCC_OscConfig+0xe7c>
 8002528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002530:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f2a3 	rbit	r2, r3
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002552:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002556:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002560:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	fa93 f2a3 	rbit	r2, r3
 800256a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	4b3f      	ldr	r3, [pc, #252]	; (8002674 <HAL_RCC_OscConfig+0xf78>)
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800257c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002580:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002584:	6011      	str	r1, [r2, #0]
 8002586:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800258a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	fa92 f1a2 	rbit	r1, r2
 8002594:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002598:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800259c:	6011      	str	r1, [r2, #0]
  return result;
 800259e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025a2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f002 021f 	and.w	r2, r2, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d082      	beq.n	80024ca <HAL_RCC_OscConfig+0xdce>
 80025c4:	e0cf      	b.n	8002766 <HAL_RCC_OscConfig+0x106a>
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80025ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	fa93 f2a3 	rbit	r2, r3
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80025ea:	601a      	str	r2, [r3, #0]
  return result;
 80025ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80025f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002600:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	461a      	mov	r2, r3
 8002608:	2300      	movs	r3, #0
 800260a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe fb1a 	bl	8000c44 <HAL_GetTick>
 8002610:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	e009      	b.n	800262a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002616:	f7fe fb15 	bl	8000c44 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e09e      	b.n	8002768 <HAL_RCC_OscConfig+0x106c>
 800262a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002632:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	fa93 f2a3 	rbit	r2, r3
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800264e:	601a      	str	r2, [r3, #0]
  return result;
 8002650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002654:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002658:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d104      	bne.n	8002678 <HAL_RCC_OscConfig+0xf7c>
 800266e:	4b01      	ldr	r3, [pc, #4]	; (8002674 <HAL_RCC_OscConfig+0xf78>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	e029      	b.n	80026c8 <HAL_RCC_OscConfig+0xfcc>
 8002674:	40021000 	.word	0x40021000
 8002678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002680:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	fa93 f2a3 	rbit	r2, r3
 8002694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002698:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80026a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	fa93 f2a3 	rbit	r2, r3
 80026ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026be:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <HAL_RCC_OscConfig+0x1078>)
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026cc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80026d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026d4:	6011      	str	r1, [r2, #0]
 80026d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026da:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	fa92 f1a2 	rbit	r1, r2
 80026e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026e8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80026ec:	6011      	str	r1, [r2, #0]
  return result;
 80026ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026f2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	fab2 f282 	clz	r2, r2
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	f042 0220 	orr.w	r2, r2, #32
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	f002 021f 	and.w	r2, r2, #31
 8002708:	2101      	movs	r1, #1
 800270a:	fa01 f202 	lsl.w	r2, r1, r2
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d180      	bne.n	8002616 <HAL_RCC_OscConfig+0xf1a>
 8002714:	e027      	b.n	8002766 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e01e      	b.n	8002768 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_RCC_OscConfig+0x1078>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002732:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002736:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800273a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	429a      	cmp	r2, r3
 8002748:	d10b      	bne.n	8002762 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800274a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800274e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002756:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800275e:	429a      	cmp	r2, r3
 8002760:	d001      	beq.n	8002766 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000

08002778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b09e      	sub	sp, #120	; 0x78
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e162      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002790:	4b90      	ldr	r3, [pc, #576]	; (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d910      	bls.n	80027c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b8d      	ldr	r3, [pc, #564]	; (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 0207 	bic.w	r2, r3, #7
 80027a6:	498b      	ldr	r1, [pc, #556]	; (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b89      	ldr	r3, [pc, #548]	; (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e14a      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027cc:	4b82      	ldr	r3, [pc, #520]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	497f      	ldr	r1, [pc, #508]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 80dc 	beq.w	80029a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d13c      	bne.n	800286e <HAL_RCC_ClockConfig+0xf6>
 80027f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d102      	bne.n	800281e <HAL_RCC_ClockConfig+0xa6>
 8002818:	4b6f      	ldr	r3, [pc, #444]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	e00f      	b.n	800283e <HAL_RCC_ClockConfig+0xc6>
 800281e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002822:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	667b      	str	r3, [r7, #100]	; 0x64
 800282c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002830:	663b      	str	r3, [r7, #96]	; 0x60
 8002832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	65fb      	str	r3, [r7, #92]	; 0x5c
 800283a:	4b67      	ldr	r3, [pc, #412]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002842:	65ba      	str	r2, [r7, #88]	; 0x58
 8002844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002846:	fa92 f2a2 	rbit	r2, r2
 800284a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800284c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800284e:	fab2 f282 	clz	r2, r2
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f042 0220 	orr.w	r2, r2, #32
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	f002 021f 	and.w	r2, r2, #31
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f202 	lsl.w	r2, r1, r2
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d17b      	bne.n	8002962 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0f3      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d13c      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x178>
 8002876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800287a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d102      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x128>
 800289a:	4b4f      	ldr	r3, [pc, #316]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	e00f      	b.n	80028c0 <HAL_RCC_ClockConfig+0x148>
 80028a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	647b      	str	r3, [r7, #68]	; 0x44
 80028ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028b2:	643b      	str	r3, [r7, #64]	; 0x40
 80028b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028bc:	4b46      	ldr	r3, [pc, #280]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80028c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028c8:	fa92 f2a2 	rbit	r2, r2
 80028cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80028ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028d0:	fab2 f282 	clz	r2, r2
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	f042 0220 	orr.w	r2, r2, #32
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	f002 021f 	and.w	r2, r2, #31
 80028e0:	2101      	movs	r1, #1
 80028e2:	fa01 f202 	lsl.w	r2, r1, r2
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d13a      	bne.n	8002962 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0b2      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
 80028f0:	2302      	movs	r3, #2
 80028f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d102      	bne.n	8002918 <HAL_RCC_ClockConfig+0x1a0>
 8002912:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	e00d      	b.n	8002934 <HAL_RCC_ClockConfig+0x1bc>
 8002918:	2302      	movs	r3, #2
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
 8002924:	2302      	movs	r3, #2
 8002926:	623b      	str	r3, [r7, #32]
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	2202      	movs	r2, #2
 8002936:	61ba      	str	r2, [r7, #24]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	fa92 f2a2 	rbit	r2, r2
 800293e:	617a      	str	r2, [r7, #20]
  return result;
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	fab2 f282 	clz	r2, r2
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	f042 0220 	orr.w	r2, r2, #32
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	f002 021f 	and.w	r2, r2, #31
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f202 	lsl.w	r2, r1, r2
 8002958:	4013      	ands	r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e079      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f023 0203 	bic.w	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	491a      	ldr	r1, [pc, #104]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002974:	f7fe f966 	bl	8000c44 <HAL_GetTick>
 8002978:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	e00a      	b.n	8002992 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297c:	f7fe f962 	bl	8000c44 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e061      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_RCC_ClockConfig+0x260>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 020c 	and.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1eb      	bne.n	800297c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d214      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 0207 	bic.w	r2, r3, #7
 80029ba:	4906      	ldr	r1, [pc, #24]	; (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <HAL_RCC_ClockConfig+0x25c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e040      	b.n	8002a56 <HAL_RCC_ClockConfig+0x2de>
 80029d4:	40022000 	.word	0x40022000
 80029d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <HAL_RCC_ClockConfig+0x2e8>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	491a      	ldr	r1, [pc, #104]	; (8002a60 <HAL_RCC_ClockConfig+0x2e8>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a06:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <HAL_RCC_ClockConfig+0x2e8>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4912      	ldr	r1, [pc, #72]	; (8002a60 <HAL_RCC_ClockConfig+0x2e8>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a1a:	f000 f829 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8002a1e:	4601      	mov	r1, r0
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <HAL_RCC_ClockConfig+0x2e8>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a28:	22f0      	movs	r2, #240	; 0xf0
 8002a2a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	fa92 f2a2 	rbit	r2, r2
 8002a32:	60fa      	str	r2, [r7, #12]
  return result;
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	fab2 f282 	clz	r2, r2
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	40d3      	lsrs	r3, r2
 8002a3e:	4a09      	ldr	r2, [pc, #36]	; (8002a64 <HAL_RCC_ClockConfig+0x2ec>)
 8002a40:	5cd3      	ldrb	r3, [r2, r3]
 8002a42:	fa21 f303 	lsr.w	r3, r1, r3
 8002a46:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <HAL_RCC_ClockConfig+0x2f0>)
 8002a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <HAL_RCC_ClockConfig+0x2f4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe f8b4 	bl	8000bbc <HAL_InitTick>
  
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3778      	adds	r7, #120	; 0x78
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08004e88 	.word	0x08004e88
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	20000004 	.word	0x20000004

08002a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b08b      	sub	sp, #44	; 0x2c
 8002a74:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a8a:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d002      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x30>
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d003      	beq.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x36>
 8002a9e:	e03c      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aa0:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002aa2:	623b      	str	r3, [r7, #32]
      break;
 8002aa4:	e03c      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002aac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ab0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	fa92 f2a2 	rbit	r2, r2
 8002ab8:	607a      	str	r2, [r7, #4]
  return result;
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	fab2 f282 	clz	r2, r2
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	40d3      	lsrs	r3, r2
 8002ac4:	4a1c      	ldr	r2, [pc, #112]	; (8002b38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ac6:	5cd3      	ldrb	r3, [r2, r3]
 8002ac8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002aca:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	fa92 f2a2 	rbit	r2, r2
 8002adc:	60fa      	str	r2, [r7, #12]
  return result;
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	fab2 f282 	clz	r2, r2
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	40d3      	lsrs	r3, r2
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002af8:	4a0e      	ldr	r2, [pc, #56]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	e004      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	4a0c      	ldr	r2, [pc, #48]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	623b      	str	r3, [r7, #32]
      break;
 8002b18:	e002      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b1c:	623b      	str	r3, [r7, #32]
      break;
 8002b1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b20:	6a3b      	ldr	r3, [r7, #32]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	372c      	adds	r7, #44	; 0x2c
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	007a1200 	.word	0x007a1200
 8002b38:	08004ea0 	.word	0x08004ea0
 8002b3c:	08004eb0 	.word	0x08004eb0
 8002b40:	003d0900 	.word	0x003d0900

08002b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000000 	.word	0x20000000

08002b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b62:	f7ff ffef 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b66:	4601      	mov	r1, r0
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b70:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	fa92 f2a2 	rbit	r2, r2
 8002b7c:	603a      	str	r2, [r7, #0]
  return result;
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	fab2 f282 	clz	r2, r2
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	40d3      	lsrs	r3, r2
 8002b88:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b8a:	5cd3      	ldrb	r3, [r2, r3]
 8002b8c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08004e98 	.word	0x08004e98

08002ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ba6:	f7ff ffcd 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002baa:	4601      	mov	r1, r0
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002bb4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002bb8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	fa92 f2a2 	rbit	r2, r2
 8002bc0:	603a      	str	r2, [r7, #0]
  return result;
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	fab2 f282 	clz	r2, r2
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	40d3      	lsrs	r3, r2
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bce:	5cd3      	ldrb	r3, [r2, r3]
 8002bd0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	08004e98 	.word	0x08004e98

08002be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b092      	sub	sp, #72	; 0x48
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80d4 	beq.w	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c08:	4b4e      	ldr	r3, [pc, #312]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10e      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c14:	4b4b      	ldr	r3, [pc, #300]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	4a4a      	ldr	r2, [pc, #296]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	61d3      	str	r3, [r2, #28]
 8002c20:	4b48      	ldr	r3, [pc, #288]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c32:	4b45      	ldr	r3, [pc, #276]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d118      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a41      	ldr	r2, [pc, #260]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4a:	f7fd fffb 	bl	8000c44 <HAL_GetTick>
 8002c4e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	e008      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c52:	f7fd fff7 	bl	8000c44 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b64      	cmp	r3, #100	; 0x64
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e169      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c64:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c70:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c78:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8084 	beq.w	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d07c      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c90:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2301      	movs	r3, #1
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2300      	movs	r3, #0
 8002ce0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ce2:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d04b      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf2:	f7fd ffa7 	bl	8000c44 <HAL_GetTick>
 8002cf6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fd ffa3 	bl	8000c44 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e113      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002d10:	2302      	movs	r3, #2
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	623b      	str	r3, [r7, #32]
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	61fb      	str	r3, [r7, #28]
  return result;
 8002d28:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d108      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d3e:	4b01      	ldr	r3, [pc, #4]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	e00d      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	10908100 	.word	0x10908100
 8002d50:	2302      	movs	r3, #2
 8002d52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	4b78      	ldr	r3, [pc, #480]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	2202      	movs	r2, #2
 8002d62:	613a      	str	r2, [r7, #16]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	fa92 f2a2 	rbit	r2, r2
 8002d6a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	fab2 f282 	clz	r2, r2
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	f002 021f 	and.w	r2, r2, #31
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f202 	lsl.w	r2, r1, r2
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0b7      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d8a:	4b6d      	ldr	r3, [pc, #436]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	496a      	ldr	r1, [pc, #424]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d105      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da4:	4b66      	ldr	r3, [pc, #408]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	4a65      	ldr	r2, [pc, #404]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dbc:	4b60      	ldr	r3, [pc, #384]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	f023 0203 	bic.w	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	495d      	ldr	r1, [pc, #372]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dda:	4b59      	ldr	r3, [pc, #356]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	4956      	ldr	r1, [pc, #344]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002df8:	4b51      	ldr	r3, [pc, #324]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	494e      	ldr	r1, [pc, #312]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e16:	4b4a      	ldr	r3, [pc, #296]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f023 0210 	bic.w	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	4947      	ldr	r1, [pc, #284]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e34:	4b42      	ldr	r3, [pc, #264]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	493f      	ldr	r1, [pc, #252]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e52:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f023 0220 	bic.w	r2, r3, #32
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4938      	ldr	r1, [pc, #224]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e70:	4b33      	ldr	r3, [pc, #204]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	4930      	ldr	r1, [pc, #192]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e8e:	4b2c      	ldr	r3, [pc, #176]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	4929      	ldr	r1, [pc, #164]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eac:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	4921      	ldr	r1, [pc, #132]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	491a      	ldr	r1, [pc, #104]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ee8:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	4912      	ldr	r1, [pc, #72]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	490b      	ldr	r1, [pc, #44]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f30:	4903      	ldr	r1, [pc, #12]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3748      	adds	r7, #72	; 0x48
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40021000 	.word	0x40021000

08002f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e09d      	b.n	8003092 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d108      	bne.n	8002f70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f66:	d009      	beq.n	8002f7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	61da      	str	r2, [r3, #28]
 8002f6e:	e005      	b.n	8002f7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd fc40 	bl	800081c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fbc:	d902      	bls.n	8002fc4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	e002      	b.n	8002fca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fd2:	d007      	beq.n	8002fe4 <HAL_SPI_Init+0xa0>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fdc:	d002      	beq.n	8002fe4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003026:	ea42 0103 	orr.w	r1, r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	0c1b      	lsrs	r3, r3, #16
 8003040:	f003 0204 	and.w	r2, r3, #4
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003060:	ea42 0103 	orr.w	r1, r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003080:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e049      	b.n	8003140 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d106      	bne.n	80030c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7fd fbed 	bl	80008a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2202      	movs	r2, #2
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3304      	adds	r3, #4
 80030d6:	4619      	mov	r1, r3
 80030d8:	4610      	mov	r0, r2
 80030da:	f000 fa4f 	bl	800357c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b02      	cmp	r3, #2
 800315c:	d122      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b02      	cmp	r3, #2
 800316a:	d11b      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0202 	mvn.w	r2, #2
 8003174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f9d8 	bl	8003540 <HAL_TIM_IC_CaptureCallback>
 8003190:	e005      	b.n	800319e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f9ca 	bl	800352c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f9db 	bl	8003554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d122      	bne.n	80031f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d11b      	bne.n	80031f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0204 	mvn.w	r2, #4
 80031c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2202      	movs	r2, #2
 80031ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f9ae 	bl	8003540 <HAL_TIM_IC_CaptureCallback>
 80031e4:	e005      	b.n	80031f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f9a0 	bl	800352c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f9b1 	bl	8003554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b08      	cmp	r3, #8
 8003204:	d122      	bne.n	800324c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b08      	cmp	r3, #8
 8003212:	d11b      	bne.n	800324c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0208 	mvn.w	r2, #8
 800321c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2204      	movs	r2, #4
 8003222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f984 	bl	8003540 <HAL_TIM_IC_CaptureCallback>
 8003238:	e005      	b.n	8003246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f976 	bl	800352c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f987 	bl	8003554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2b10      	cmp	r3, #16
 8003258:	d122      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b10      	cmp	r3, #16
 8003266:	d11b      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0210 	mvn.w	r2, #16
 8003270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2208      	movs	r2, #8
 8003276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f95a 	bl	8003540 <HAL_TIM_IC_CaptureCallback>
 800328c:	e005      	b.n	800329a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f94c 	bl	800352c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f95d 	bl	8003554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d10e      	bne.n	80032cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d107      	bne.n	80032cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0201 	mvn.w	r2, #1
 80032c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f926 	bl	8003518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d6:	2b80      	cmp	r3, #128	; 0x80
 80032d8:	d10e      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	2b80      	cmp	r3, #128	; 0x80
 80032e6:	d107      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 faf6 	bl	80038e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003306:	d10e      	bne.n	8003326 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003312:	2b80      	cmp	r3, #128	; 0x80
 8003314:	d107      	bne.n	8003326 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800331e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fae9 	bl	80038f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003330:	2b40      	cmp	r3, #64	; 0x40
 8003332:	d10e      	bne.n	8003352 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	2b40      	cmp	r3, #64	; 0x40
 8003340:	d107      	bne.n	8003352 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800334a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f90b 	bl	8003568 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b20      	cmp	r3, #32
 800335e:	d10e      	bne.n	800337e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b20      	cmp	r3, #32
 800336c:	d107      	bne.n	800337e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f06f 0220 	mvn.w	r2, #32
 8003376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 faa9 	bl	80038d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_TIM_ConfigClockSource+0x1c>
 800339e:	2302      	movs	r3, #2
 80033a0:	e0b6      	b.n	8003510 <HAL_TIM_ConfigClockSource+0x18a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033cc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033de:	d03e      	beq.n	800345e <HAL_TIM_ConfigClockSource+0xd8>
 80033e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e4:	f200 8087 	bhi.w	80034f6 <HAL_TIM_ConfigClockSource+0x170>
 80033e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ec:	f000 8086 	beq.w	80034fc <HAL_TIM_ConfigClockSource+0x176>
 80033f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f4:	d87f      	bhi.n	80034f6 <HAL_TIM_ConfigClockSource+0x170>
 80033f6:	2b70      	cmp	r3, #112	; 0x70
 80033f8:	d01a      	beq.n	8003430 <HAL_TIM_ConfigClockSource+0xaa>
 80033fa:	2b70      	cmp	r3, #112	; 0x70
 80033fc:	d87b      	bhi.n	80034f6 <HAL_TIM_ConfigClockSource+0x170>
 80033fe:	2b60      	cmp	r3, #96	; 0x60
 8003400:	d050      	beq.n	80034a4 <HAL_TIM_ConfigClockSource+0x11e>
 8003402:	2b60      	cmp	r3, #96	; 0x60
 8003404:	d877      	bhi.n	80034f6 <HAL_TIM_ConfigClockSource+0x170>
 8003406:	2b50      	cmp	r3, #80	; 0x50
 8003408:	d03c      	beq.n	8003484 <HAL_TIM_ConfigClockSource+0xfe>
 800340a:	2b50      	cmp	r3, #80	; 0x50
 800340c:	d873      	bhi.n	80034f6 <HAL_TIM_ConfigClockSource+0x170>
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d058      	beq.n	80034c4 <HAL_TIM_ConfigClockSource+0x13e>
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d86f      	bhi.n	80034f6 <HAL_TIM_ConfigClockSource+0x170>
 8003416:	2b30      	cmp	r3, #48	; 0x30
 8003418:	d064      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0x15e>
 800341a:	2b30      	cmp	r3, #48	; 0x30
 800341c:	d86b      	bhi.n	80034f6 <HAL_TIM_ConfigClockSource+0x170>
 800341e:	2b20      	cmp	r3, #32
 8003420:	d060      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0x15e>
 8003422:	2b20      	cmp	r3, #32
 8003424:	d867      	bhi.n	80034f6 <HAL_TIM_ConfigClockSource+0x170>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d05c      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0x15e>
 800342a:	2b10      	cmp	r3, #16
 800342c:	d05a      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0x15e>
 800342e:	e062      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	6899      	ldr	r1, [r3, #8]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f000 f9a6 	bl	8003790 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003452:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	609a      	str	r2, [r3, #8]
      break;
 800345c:	e04f      	b.n	80034fe <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6899      	ldr	r1, [r3, #8]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f000 f98f 	bl	8003790 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003480:	609a      	str	r2, [r3, #8]
      break;
 8003482:	e03c      	b.n	80034fe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	6859      	ldr	r1, [r3, #4]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	461a      	mov	r2, r3
 8003492:	f000 f903 	bl	800369c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2150      	movs	r1, #80	; 0x50
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f95c 	bl	800375a <TIM_ITRx_SetConfig>
      break;
 80034a2:	e02c      	b.n	80034fe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	461a      	mov	r2, r3
 80034b2:	f000 f922 	bl	80036fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2160      	movs	r1, #96	; 0x60
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 f94c 	bl	800375a <TIM_ITRx_SetConfig>
      break;
 80034c2:	e01c      	b.n	80034fe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	461a      	mov	r2, r3
 80034d2:	f000 f8e3 	bl	800369c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2140      	movs	r1, #64	; 0x40
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 f93c 	bl	800375a <TIM_ITRx_SetConfig>
      break;
 80034e2:	e00c      	b.n	80034fe <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4619      	mov	r1, r3
 80034ee:	4610      	mov	r0, r2
 80034f0:	f000 f933 	bl	800375a <TIM_ITRx_SetConfig>
      break;
 80034f4:	e003      	b.n	80034fe <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	73fb      	strb	r3, [r7, #15]
      break;
 80034fa:	e000      	b.n	80034fe <HAL_TIM_ConfigClockSource+0x178>
      break;
 80034fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a3c      	ldr	r2, [pc, #240]	; (8003680 <TIM_Base_SetConfig+0x104>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00f      	beq.n	80035b4 <TIM_Base_SetConfig+0x38>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359a:	d00b      	beq.n	80035b4 <TIM_Base_SetConfig+0x38>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a39      	ldr	r2, [pc, #228]	; (8003684 <TIM_Base_SetConfig+0x108>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d007      	beq.n	80035b4 <TIM_Base_SetConfig+0x38>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a38      	ldr	r2, [pc, #224]	; (8003688 <TIM_Base_SetConfig+0x10c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d003      	beq.n	80035b4 <TIM_Base_SetConfig+0x38>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a37      	ldr	r2, [pc, #220]	; (800368c <TIM_Base_SetConfig+0x110>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d108      	bne.n	80035c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a2d      	ldr	r2, [pc, #180]	; (8003680 <TIM_Base_SetConfig+0x104>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01b      	beq.n	8003606 <TIM_Base_SetConfig+0x8a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d4:	d017      	beq.n	8003606 <TIM_Base_SetConfig+0x8a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a2a      	ldr	r2, [pc, #168]	; (8003684 <TIM_Base_SetConfig+0x108>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d013      	beq.n	8003606 <TIM_Base_SetConfig+0x8a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a29      	ldr	r2, [pc, #164]	; (8003688 <TIM_Base_SetConfig+0x10c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00f      	beq.n	8003606 <TIM_Base_SetConfig+0x8a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a28      	ldr	r2, [pc, #160]	; (800368c <TIM_Base_SetConfig+0x110>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00b      	beq.n	8003606 <TIM_Base_SetConfig+0x8a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a27      	ldr	r2, [pc, #156]	; (8003690 <TIM_Base_SetConfig+0x114>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d007      	beq.n	8003606 <TIM_Base_SetConfig+0x8a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a26      	ldr	r2, [pc, #152]	; (8003694 <TIM_Base_SetConfig+0x118>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d003      	beq.n	8003606 <TIM_Base_SetConfig+0x8a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a25      	ldr	r2, [pc, #148]	; (8003698 <TIM_Base_SetConfig+0x11c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d108      	bne.n	8003618 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800360c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a10      	ldr	r2, [pc, #64]	; (8003680 <TIM_Base_SetConfig+0x104>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00f      	beq.n	8003664 <TIM_Base_SetConfig+0xe8>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a11      	ldr	r2, [pc, #68]	; (800368c <TIM_Base_SetConfig+0x110>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00b      	beq.n	8003664 <TIM_Base_SetConfig+0xe8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a10      	ldr	r2, [pc, #64]	; (8003690 <TIM_Base_SetConfig+0x114>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d007      	beq.n	8003664 <TIM_Base_SetConfig+0xe8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a0f      	ldr	r2, [pc, #60]	; (8003694 <TIM_Base_SetConfig+0x118>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d003      	beq.n	8003664 <TIM_Base_SetConfig+0xe8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <TIM_Base_SetConfig+0x11c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d103      	bne.n	800366c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	615a      	str	r2, [r3, #20]
}
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40012c00 	.word	0x40012c00
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800
 800368c:	40013400 	.word	0x40013400
 8003690:	40014000 	.word	0x40014000
 8003694:	40014400 	.word	0x40014400
 8003698:	40014800 	.word	0x40014800

0800369c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	f023 0201 	bic.w	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f023 030a 	bic.w	r3, r3, #10
 80036d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	621a      	str	r2, [r3, #32]
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b087      	sub	sp, #28
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f023 0210 	bic.w	r2, r3, #16
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003724:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	031b      	lsls	r3, r3, #12
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003736:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	621a      	str	r2, [r3, #32]
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800375a:	b480      	push	{r7}
 800375c:	b085      	sub	sp, #20
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003770:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	f043 0307 	orr.w	r3, r3, #7
 800377c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	609a      	str	r2, [r3, #8]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	021a      	lsls	r2, r3, #8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	609a      	str	r2, [r3, #8]
}
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e063      	b.n	80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a2b      	ldr	r2, [pc, #172]	; (80038bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d004      	beq.n	800381c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a2a      	ldr	r2, [pc, #168]	; (80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d108      	bne.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003822:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003834:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1b      	ldr	r2, [pc, #108]	; (80038bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385a:	d013      	beq.n	8003884 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a18      	ldr	r2, [pc, #96]	; (80038c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a13      	ldr	r2, [pc, #76]	; (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d10c      	bne.n	800389e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800388a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	4313      	orrs	r3, r2
 8003894:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	40012c00 	.word	0x40012c00
 80038c0:	40013400 	.word	0x40013400
 80038c4:	40000400 	.word	0x40000400
 80038c8:	40000800 	.word	0x40000800
 80038cc:	40014000 	.word	0x40014000

080038d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e040      	b.n	80039a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fc ffdc 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2224      	movs	r2, #36	; 0x24
 8003938:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fb76 	bl	800403c <UART_SetConfig>
 8003950:	4603      	mov	r3, r0
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e022      	b.n	80039a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fd3e 	bl	80043e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fdc5 	bl	8004528 <UART_CheckIdleState>
 800399e:	4603      	mov	r3, r0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	; 0x28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	4613      	mov	r3, r2
 80039b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d132      	bne.n	8003a26 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_UART_Receive_IT+0x24>
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e02b      	b.n	8003a28 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d018      	beq.n	8003a16 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	613b      	str	r3, [r7, #16]
   return(result);
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	623b      	str	r3, [r7, #32]
 8003a04:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	69f9      	ldr	r1, [r7, #28]
 8003a08:	6a3a      	ldr	r2, [r7, #32]
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e6      	bne.n	80039e4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fe93 	bl	8004748 <UART_Start_Receive_IT>
 8003a22:	4603      	mov	r3, r0
 8003a24:	e000      	b.n	8003a28 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
  }
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3728      	adds	r7, #40	; 0x28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b0ba      	sub	sp, #232	; 0xe8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003a5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a5e:	4013      	ands	r3, r2
 8003a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d115      	bne.n	8003a98 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00f      	beq.n	8003a98 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d009      	beq.n	8003a98 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 82ab 	beq.w	8003fe4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	4798      	blx	r3
      }
      return;
 8003a96:	e2a5      	b.n	8003fe4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 8117 	beq.w	8003cd0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003aae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003ab2:	4b85      	ldr	r3, [pc, #532]	; (8003cc8 <HAL_UART_IRQHandler+0x298>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 810a 	beq.w	8003cd0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d011      	beq.n	8003aec <HAL_UART_IRQHandler+0xbc>
 8003ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00b      	beq.n	8003aec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae2:	f043 0201 	orr.w	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d011      	beq.n	8003b1c <HAL_UART_IRQHandler+0xec>
 8003af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00b      	beq.n	8003b1c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b12:	f043 0204 	orr.w	r2, r3, #4
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d011      	beq.n	8003b4c <HAL_UART_IRQHandler+0x11c>
 8003b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2204      	movs	r2, #4
 8003b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b42:	f043 0202 	orr.w	r2, r3, #2
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d017      	beq.n	8003b88 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d105      	bne.n	8003b70 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00b      	beq.n	8003b88 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2208      	movs	r2, #8
 8003b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7e:	f043 0208 	orr.w	r2, r3, #8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d012      	beq.n	8003bba <HAL_UART_IRQHandler+0x18a>
 8003b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00c      	beq.n	8003bba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb0:	f043 0220 	orr.w	r2, r3, #32
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8211 	beq.w	8003fe8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00d      	beq.n	8003bee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	d005      	beq.n	8003c12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d04f      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fe4c 	bl	80048b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	d141      	bne.n	8003caa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1d9      	bne.n	8003c26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d013      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7e:	4a13      	ldr	r2, [pc, #76]	; (8003ccc <HAL_UART_IRQHandler+0x29c>)
 8003c80:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fd f932 	bl	8000ef0 <HAL_DMA_Abort_IT>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d017      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca0:	e00f      	b.n	8003cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f9b4 	bl	8004010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca8:	e00b      	b.n	8003cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f9b0 	bl	8004010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb0:	e007      	b.n	8003cc2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f9ac 	bl	8004010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003cc0:	e192      	b.n	8003fe8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc2:	bf00      	nop
    return;
 8003cc4:	e190      	b.n	8003fe8 <HAL_UART_IRQHandler+0x5b8>
 8003cc6:	bf00      	nop
 8003cc8:	04000120 	.word	0x04000120
 8003ccc:	08004979 	.word	0x08004979

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	f040 814b 	bne.w	8003f70 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8144 	beq.w	8003f70 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 813d 	beq.w	8003f70 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2210      	movs	r2, #16
 8003cfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b40      	cmp	r3, #64	; 0x40
 8003d0a:	f040 80b5 	bne.w	8003e78 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 8164 	beq.w	8003fec <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	f080 815c 	bcs.w	8003fec <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	f000 8086 	beq.w	8003e56 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d78:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1da      	bne.n	8003d4a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3308      	adds	r3, #8
 8003d9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3308      	adds	r3, #8
 8003db4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003db8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dbc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003dca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e1      	bne.n	8003d94 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3308      	adds	r3, #8
 8003df0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003df4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003df6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dfa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e3      	bne.n	8003dd0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1e:	e853 3f00 	ldrex	r3, [r3]
 8003e22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e26:	f023 0310 	bic.w	r3, r3, #16
 8003e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e38:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e4      	bne.n	8003e16 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fd f814 	bl	8000e7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f8d7 	bl	8004024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e76:	e0b9      	b.n	8003fec <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80ab 	beq.w	8003ff0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003e9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 80a6 	beq.w	8003ff0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ecc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e4      	bne.n	8003ea4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	623b      	str	r3, [r7, #32]
   return(result);
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3308      	adds	r3, #8
 8003efa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003efe:	633a      	str	r2, [r7, #48]	; 0x30
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e3      	bne.n	8003eda <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0310 	bic.w	r3, r3, #16
 8003f3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	69b9      	ldr	r1, [r7, #24]
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	e841 2300 	strex	r3, r2, [r1]
 8003f54:	617b      	str	r3, [r7, #20]
   return(result);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e4      	bne.n	8003f26 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f66:	4619      	mov	r1, r3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f85b 	bl	8004024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f6e:	e03f      	b.n	8003ff0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00e      	beq.n	8003f9a <HAL_UART_IRQHandler+0x56a>
 8003f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fed8 	bl	8004d48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f98:	e02d      	b.n	8003ff6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00e      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01c      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	4798      	blx	r3
    }
    return;
 8003fc2:	e017      	b.n	8003ff4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d012      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x5c6>
 8003fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00c      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fce1 	bl	80049a4 <UART_EndTransmit_IT>
    return;
 8003fe2:	e008      	b.n	8003ff6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003fe4:	bf00      	nop
 8003fe6:	e006      	b.n	8003ff6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003fe8:	bf00      	nop
 8003fea:	e004      	b.n	8003ff6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003fec:	bf00      	nop
 8003fee:	e002      	b.n	8003ff6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003ff0:	bf00      	nop
 8003ff2:	e000      	b.n	8003ff6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003ff4:	bf00      	nop
  }

}
 8003ff6:	37e8      	adds	r7, #232	; 0xe8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800406a:	f023 030c 	bic.w	r3, r3, #12
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	6979      	ldr	r1, [r7, #20]
 8004074:	430b      	orrs	r3, r1
 8004076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4aa7      	ldr	r2, [pc, #668]	; (8004354 <UART_SetConfig+0x318>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d120      	bne.n	80040fe <UART_SetConfig+0xc2>
 80040bc:	4ba6      	ldr	r3, [pc, #664]	; (8004358 <UART_SetConfig+0x31c>)
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d817      	bhi.n	80040f8 <UART_SetConfig+0xbc>
 80040c8:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <UART_SetConfig+0x94>)
 80040ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ce:	bf00      	nop
 80040d0:	080040e1 	.word	0x080040e1
 80040d4:	080040ed 	.word	0x080040ed
 80040d8:	080040f3 	.word	0x080040f3
 80040dc:	080040e7 	.word	0x080040e7
 80040e0:	2301      	movs	r3, #1
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e0b5      	b.n	8004252 <UART_SetConfig+0x216>
 80040e6:	2302      	movs	r3, #2
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e0b2      	b.n	8004252 <UART_SetConfig+0x216>
 80040ec:	2304      	movs	r3, #4
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e0af      	b.n	8004252 <UART_SetConfig+0x216>
 80040f2:	2308      	movs	r3, #8
 80040f4:	77fb      	strb	r3, [r7, #31]
 80040f6:	e0ac      	b.n	8004252 <UART_SetConfig+0x216>
 80040f8:	2310      	movs	r3, #16
 80040fa:	77fb      	strb	r3, [r7, #31]
 80040fc:	e0a9      	b.n	8004252 <UART_SetConfig+0x216>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a96      	ldr	r2, [pc, #600]	; (800435c <UART_SetConfig+0x320>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d124      	bne.n	8004152 <UART_SetConfig+0x116>
 8004108:	4b93      	ldr	r3, [pc, #588]	; (8004358 <UART_SetConfig+0x31c>)
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004110:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004114:	d011      	beq.n	800413a <UART_SetConfig+0xfe>
 8004116:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800411a:	d817      	bhi.n	800414c <UART_SetConfig+0x110>
 800411c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004120:	d011      	beq.n	8004146 <UART_SetConfig+0x10a>
 8004122:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004126:	d811      	bhi.n	800414c <UART_SetConfig+0x110>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <UART_SetConfig+0xf8>
 800412c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004130:	d006      	beq.n	8004140 <UART_SetConfig+0x104>
 8004132:	e00b      	b.n	800414c <UART_SetConfig+0x110>
 8004134:	2300      	movs	r3, #0
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e08b      	b.n	8004252 <UART_SetConfig+0x216>
 800413a:	2302      	movs	r3, #2
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	e088      	b.n	8004252 <UART_SetConfig+0x216>
 8004140:	2304      	movs	r3, #4
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e085      	b.n	8004252 <UART_SetConfig+0x216>
 8004146:	2308      	movs	r3, #8
 8004148:	77fb      	strb	r3, [r7, #31]
 800414a:	e082      	b.n	8004252 <UART_SetConfig+0x216>
 800414c:	2310      	movs	r3, #16
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e07f      	b.n	8004252 <UART_SetConfig+0x216>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a82      	ldr	r2, [pc, #520]	; (8004360 <UART_SetConfig+0x324>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d124      	bne.n	80041a6 <UART_SetConfig+0x16a>
 800415c:	4b7e      	ldr	r3, [pc, #504]	; (8004358 <UART_SetConfig+0x31c>)
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004164:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004168:	d011      	beq.n	800418e <UART_SetConfig+0x152>
 800416a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800416e:	d817      	bhi.n	80041a0 <UART_SetConfig+0x164>
 8004170:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004174:	d011      	beq.n	800419a <UART_SetConfig+0x15e>
 8004176:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800417a:	d811      	bhi.n	80041a0 <UART_SetConfig+0x164>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <UART_SetConfig+0x14c>
 8004180:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004184:	d006      	beq.n	8004194 <UART_SetConfig+0x158>
 8004186:	e00b      	b.n	80041a0 <UART_SetConfig+0x164>
 8004188:	2300      	movs	r3, #0
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e061      	b.n	8004252 <UART_SetConfig+0x216>
 800418e:	2302      	movs	r3, #2
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e05e      	b.n	8004252 <UART_SetConfig+0x216>
 8004194:	2304      	movs	r3, #4
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e05b      	b.n	8004252 <UART_SetConfig+0x216>
 800419a:	2308      	movs	r3, #8
 800419c:	77fb      	strb	r3, [r7, #31]
 800419e:	e058      	b.n	8004252 <UART_SetConfig+0x216>
 80041a0:	2310      	movs	r3, #16
 80041a2:	77fb      	strb	r3, [r7, #31]
 80041a4:	e055      	b.n	8004252 <UART_SetConfig+0x216>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a6e      	ldr	r2, [pc, #440]	; (8004364 <UART_SetConfig+0x328>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d124      	bne.n	80041fa <UART_SetConfig+0x1be>
 80041b0:	4b69      	ldr	r3, [pc, #420]	; (8004358 <UART_SetConfig+0x31c>)
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80041b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041bc:	d011      	beq.n	80041e2 <UART_SetConfig+0x1a6>
 80041be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041c2:	d817      	bhi.n	80041f4 <UART_SetConfig+0x1b8>
 80041c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041c8:	d011      	beq.n	80041ee <UART_SetConfig+0x1b2>
 80041ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ce:	d811      	bhi.n	80041f4 <UART_SetConfig+0x1b8>
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <UART_SetConfig+0x1a0>
 80041d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d8:	d006      	beq.n	80041e8 <UART_SetConfig+0x1ac>
 80041da:	e00b      	b.n	80041f4 <UART_SetConfig+0x1b8>
 80041dc:	2300      	movs	r3, #0
 80041de:	77fb      	strb	r3, [r7, #31]
 80041e0:	e037      	b.n	8004252 <UART_SetConfig+0x216>
 80041e2:	2302      	movs	r3, #2
 80041e4:	77fb      	strb	r3, [r7, #31]
 80041e6:	e034      	b.n	8004252 <UART_SetConfig+0x216>
 80041e8:	2304      	movs	r3, #4
 80041ea:	77fb      	strb	r3, [r7, #31]
 80041ec:	e031      	b.n	8004252 <UART_SetConfig+0x216>
 80041ee:	2308      	movs	r3, #8
 80041f0:	77fb      	strb	r3, [r7, #31]
 80041f2:	e02e      	b.n	8004252 <UART_SetConfig+0x216>
 80041f4:	2310      	movs	r3, #16
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e02b      	b.n	8004252 <UART_SetConfig+0x216>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a5a      	ldr	r2, [pc, #360]	; (8004368 <UART_SetConfig+0x32c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d124      	bne.n	800424e <UART_SetConfig+0x212>
 8004204:	4b54      	ldr	r3, [pc, #336]	; (8004358 <UART_SetConfig+0x31c>)
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800420c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004210:	d011      	beq.n	8004236 <UART_SetConfig+0x1fa>
 8004212:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004216:	d817      	bhi.n	8004248 <UART_SetConfig+0x20c>
 8004218:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800421c:	d011      	beq.n	8004242 <UART_SetConfig+0x206>
 800421e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004222:	d811      	bhi.n	8004248 <UART_SetConfig+0x20c>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <UART_SetConfig+0x1f4>
 8004228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800422c:	d006      	beq.n	800423c <UART_SetConfig+0x200>
 800422e:	e00b      	b.n	8004248 <UART_SetConfig+0x20c>
 8004230:	2300      	movs	r3, #0
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e00d      	b.n	8004252 <UART_SetConfig+0x216>
 8004236:	2302      	movs	r3, #2
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e00a      	b.n	8004252 <UART_SetConfig+0x216>
 800423c:	2304      	movs	r3, #4
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e007      	b.n	8004252 <UART_SetConfig+0x216>
 8004242:	2308      	movs	r3, #8
 8004244:	77fb      	strb	r3, [r7, #31]
 8004246:	e004      	b.n	8004252 <UART_SetConfig+0x216>
 8004248:	2310      	movs	r3, #16
 800424a:	77fb      	strb	r3, [r7, #31]
 800424c:	e001      	b.n	8004252 <UART_SetConfig+0x216>
 800424e:	2310      	movs	r3, #16
 8004250:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425a:	d15b      	bne.n	8004314 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800425c:	7ffb      	ldrb	r3, [r7, #31]
 800425e:	2b08      	cmp	r3, #8
 8004260:	d827      	bhi.n	80042b2 <UART_SetConfig+0x276>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <UART_SetConfig+0x22c>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	0800428d 	.word	0x0800428d
 800426c:	08004295 	.word	0x08004295
 8004270:	0800429d 	.word	0x0800429d
 8004274:	080042b3 	.word	0x080042b3
 8004278:	080042a3 	.word	0x080042a3
 800427c:	080042b3 	.word	0x080042b3
 8004280:	080042b3 	.word	0x080042b3
 8004284:	080042b3 	.word	0x080042b3
 8004288:	080042ab 	.word	0x080042ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800428c:	f7fe fc66 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8004290:	61b8      	str	r0, [r7, #24]
        break;
 8004292:	e013      	b.n	80042bc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004294:	f7fe fc84 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 8004298:	61b8      	str	r0, [r7, #24]
        break;
 800429a:	e00f      	b.n	80042bc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800429c:	4b33      	ldr	r3, [pc, #204]	; (800436c <UART_SetConfig+0x330>)
 800429e:	61bb      	str	r3, [r7, #24]
        break;
 80042a0:	e00c      	b.n	80042bc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042a2:	f7fe fbe5 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 80042a6:	61b8      	str	r0, [r7, #24]
        break;
 80042a8:	e008      	b.n	80042bc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ae:	61bb      	str	r3, [r7, #24]
        break;
 80042b0:	e004      	b.n	80042bc <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	77bb      	strb	r3, [r7, #30]
        break;
 80042ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8082 	beq.w	80043c8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	005a      	lsls	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	441a      	add	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b0f      	cmp	r3, #15
 80042de:	d916      	bls.n	800430e <UART_SetConfig+0x2d2>
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e6:	d212      	bcs.n	800430e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	f023 030f 	bic.w	r3, r3, #15
 80042f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	085b      	lsrs	r3, r3, #1
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	89fb      	ldrh	r3, [r7, #14]
 8004300:	4313      	orrs	r3, r2
 8004302:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	89fa      	ldrh	r2, [r7, #14]
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	e05c      	b.n	80043c8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	77bb      	strb	r3, [r7, #30]
 8004312:	e059      	b.n	80043c8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004314:	7ffb      	ldrb	r3, [r7, #31]
 8004316:	2b08      	cmp	r3, #8
 8004318:	d835      	bhi.n	8004386 <UART_SetConfig+0x34a>
 800431a:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <UART_SetConfig+0x2e4>)
 800431c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004320:	08004345 	.word	0x08004345
 8004324:	0800434d 	.word	0x0800434d
 8004328:	08004371 	.word	0x08004371
 800432c:	08004387 	.word	0x08004387
 8004330:	08004377 	.word	0x08004377
 8004334:	08004387 	.word	0x08004387
 8004338:	08004387 	.word	0x08004387
 800433c:	08004387 	.word	0x08004387
 8004340:	0800437f 	.word	0x0800437f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004344:	f7fe fc0a 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8004348:	61b8      	str	r0, [r7, #24]
        break;
 800434a:	e021      	b.n	8004390 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800434c:	f7fe fc28 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 8004350:	61b8      	str	r0, [r7, #24]
        break;
 8004352:	e01d      	b.n	8004390 <UART_SetConfig+0x354>
 8004354:	40013800 	.word	0x40013800
 8004358:	40021000 	.word	0x40021000
 800435c:	40004400 	.word	0x40004400
 8004360:	40004800 	.word	0x40004800
 8004364:	40004c00 	.word	0x40004c00
 8004368:	40005000 	.word	0x40005000
 800436c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <UART_SetConfig+0x3a4>)
 8004372:	61bb      	str	r3, [r7, #24]
        break;
 8004374:	e00c      	b.n	8004390 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004376:	f7fe fb7b 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 800437a:	61b8      	str	r0, [r7, #24]
        break;
 800437c:	e008      	b.n	8004390 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004382:	61bb      	str	r3, [r7, #24]
        break;
 8004384:	e004      	b.n	8004390 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	77bb      	strb	r3, [r7, #30]
        break;
 800438e:	bf00      	nop
    }

    if (pclk != 0U)
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d018      	beq.n	80043c8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	085a      	lsrs	r2, r3, #1
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	441a      	add	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	2b0f      	cmp	r3, #15
 80043ae:	d909      	bls.n	80043c4 <UART_SetConfig+0x388>
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b6:	d205      	bcs.n	80043c4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60da      	str	r2, [r3, #12]
 80043c2:	e001      	b.n	80043c8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80043d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	007a1200 	.word	0x007a1200

080043e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d01a      	beq.n	80044fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044e2:	d10a      	bne.n	80044fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	605a      	str	r2, [r3, #4]
  }
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b098      	sub	sp, #96	; 0x60
 800452c:	af02      	add	r7, sp, #8
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004538:	f7fc fb84 	bl	8000c44 <HAL_GetTick>
 800453c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b08      	cmp	r3, #8
 800454a:	d12e      	bne.n	80045aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800454c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004554:	2200      	movs	r2, #0
 8004556:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f88c 	bl	8004678 <UART_WaitOnFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d021      	beq.n	80045aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800457a:	653b      	str	r3, [r7, #80]	; 0x50
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004584:	647b      	str	r3, [r7, #68]	; 0x44
 8004586:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800458a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e6      	bne.n	8004566 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e062      	b.n	8004670 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d149      	bne.n	800464c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045c0:	2200      	movs	r2, #0
 80045c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f856 	bl	8004678 <UART_WaitOnFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d03c      	beq.n	800464c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	623b      	str	r3, [r7, #32]
   return(result);
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f0:	633b      	str	r3, [r7, #48]	; 0x30
 80045f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f8:	e841 2300 	strex	r3, r2, [r1]
 80045fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e6      	bne.n	80045d2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3308      	adds	r3, #8
 800460a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	60fb      	str	r3, [r7, #12]
   return(result);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	64bb      	str	r3, [r7, #72]	; 0x48
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3308      	adds	r3, #8
 8004622:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004624:	61fa      	str	r2, [r7, #28]
 8004626:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	69b9      	ldr	r1, [r7, #24]
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	617b      	str	r3, [r7, #20]
   return(result);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e5      	bne.n	8004604 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e011      	b.n	8004670 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3758      	adds	r7, #88	; 0x58
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004688:	e049      	b.n	800471e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004690:	d045      	beq.n	800471e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004692:	f7fc fad7 	bl	8000c44 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d302      	bcc.n	80046a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e048      	b.n	800473e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d031      	beq.n	800471e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d110      	bne.n	80046ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2208      	movs	r2, #8
 80046ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f8ed 	bl	80048b0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2208      	movs	r2, #8
 80046da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e029      	b.n	800473e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f8:	d111      	bne.n	800471e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004702:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f8d3 	bl	80048b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e00f      	b.n	800473e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69da      	ldr	r2, [r3, #28]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4013      	ands	r3, r2
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	429a      	cmp	r2, r3
 800472c:	bf0c      	ite	eq
 800472e:	2301      	moveq	r3, #1
 8004730:	2300      	movne	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	79fb      	ldrb	r3, [r7, #7]
 8004738:	429a      	cmp	r2, r3
 800473a:	d0a6      	beq.n	800468a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004748:	b480      	push	{r7}
 800474a:	b097      	sub	sp, #92	; 0x5c
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	4613      	mov	r3, r2
 8004754:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	88fa      	ldrh	r2, [r7, #6]
 8004760:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	88fa      	ldrh	r2, [r7, #6]
 8004768:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477a:	d10e      	bne.n	800479a <UART_Start_Receive_IT+0x52>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d105      	bne.n	8004790 <UART_Start_Receive_IT+0x48>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f240 12ff 	movw	r2, #511	; 0x1ff
 800478a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800478e:	e01a      	b.n	80047c6 <UART_Start_Receive_IT+0x7e>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	22ff      	movs	r2, #255	; 0xff
 8004794:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004798:	e015      	b.n	80047c6 <UART_Start_Receive_IT+0x7e>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10d      	bne.n	80047be <UART_Start_Receive_IT+0x76>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d104      	bne.n	80047b4 <UART_Start_Receive_IT+0x6c>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	22ff      	movs	r2, #255	; 0xff
 80047ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047b2:	e008      	b.n	80047c6 <UART_Start_Receive_IT+0x7e>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	227f      	movs	r2, #127	; 0x7f
 80047b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047bc:	e003      	b.n	80047c6 <UART_Start_Receive_IT+0x7e>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2222      	movs	r2, #34	; 0x22
 80047d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3308      	adds	r3, #8
 80047dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	657b      	str	r3, [r7, #84]	; 0x54
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3308      	adds	r3, #8
 80047f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80047f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e5      	bne.n	80047d6 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004812:	d107      	bne.n	8004824 <UART_Start_Receive_IT+0xdc>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d103      	bne.n	8004824 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4a22      	ldr	r2, [pc, #136]	; (80048a8 <UART_Start_Receive_IT+0x160>)
 8004820:	669a      	str	r2, [r3, #104]	; 0x68
 8004822:	e002      	b.n	800482a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4a21      	ldr	r2, [pc, #132]	; (80048ac <UART_Start_Receive_IT+0x164>)
 8004828:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d019      	beq.n	8004866 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	e853 3f00 	ldrex	r3, [r3]
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004850:	637b      	str	r3, [r7, #52]	; 0x34
 8004852:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004858:	e841 2300 	strex	r3, r2, [r1]
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e6      	bne.n	8004832 <UART_Start_Receive_IT+0xea>
 8004864:	e018      	b.n	8004898 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	613b      	str	r3, [r7, #16]
   return(result);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f043 0320 	orr.w	r3, r3, #32
 800487a:	653b      	str	r3, [r7, #80]	; 0x50
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004884:	623b      	str	r3, [r7, #32]
 8004886:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	69f9      	ldr	r1, [r7, #28]
 800488a:	6a3a      	ldr	r2, [r7, #32]
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	61bb      	str	r3, [r7, #24]
   return(result);
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e6      	bne.n	8004866 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	375c      	adds	r7, #92	; 0x5c
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	08004ba1 	.word	0x08004ba1
 80048ac:	080049f9 	.word	0x080049f9

080048b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b095      	sub	sp, #84	; 0x54
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d6:	643b      	str	r3, [r7, #64]	; 0x40
 80048d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e6      	bne.n	80048b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3308      	adds	r3, #8
 80048f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	f023 0301 	bic.w	r3, r3, #1
 8004900:	64bb      	str	r3, [r7, #72]	; 0x48
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3308      	adds	r3, #8
 8004908:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800490a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1e5      	bne.n	80048ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004922:	2b01      	cmp	r3, #1
 8004924:	d118      	bne.n	8004958 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	60bb      	str	r3, [r7, #8]
   return(result);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f023 0310 	bic.w	r3, r3, #16
 800493a:	647b      	str	r3, [r7, #68]	; 0x44
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	6979      	ldr	r1, [r7, #20]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	613b      	str	r3, [r7, #16]
   return(result);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e6      	bne.n	8004926 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800496c:	bf00      	nop
 800496e:	3754      	adds	r7, #84	; 0x54
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f7ff fb3a 	bl	8004010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800499c:	bf00      	nop
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	6979      	ldr	r1, [r7, #20]
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	613b      	str	r3, [r7, #16]
   return(result);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e6      	bne.n	80049ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fb06 	bl	8003ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049f0:	bf00      	nop
 80049f2:	3720      	adds	r7, #32
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b09c      	sub	sp, #112	; 0x70
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a06:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a10:	2b22      	cmp	r3, #34	; 0x22
 8004a12:	f040 80b9 	bne.w	8004b88 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a1c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004a24:	b2d9      	uxtb	r1, r3
 8004a26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a30:	400a      	ands	r2, r1
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f040 809c 	bne.w	8004b98 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a68:	e853 3f00 	ldrex	r3, [r3]
 8004a6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a74:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a86:	e841 2300 	strex	r3, r2, [r1]
 8004a8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1e6      	bne.n	8004a60 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3308      	adds	r3, #8
 8004a98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	e853 3f00 	ldrex	r3, [r3]
 8004aa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa4:	f023 0301 	bic.w	r3, r3, #1
 8004aa8:	667b      	str	r3, [r7, #100]	; 0x64
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3308      	adds	r3, #8
 8004ab0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ab2:	647a      	str	r2, [r7, #68]	; 0x44
 8004ab4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aba:	e841 2300 	strex	r3, r2, [r1]
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1e5      	bne.n	8004a92 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d018      	beq.n	8004b1a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	623b      	str	r3, [r7, #32]
   return(result);
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004afc:	663b      	str	r3, [r7, #96]	; 0x60
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b06:	633b      	str	r3, [r7, #48]	; 0x30
 8004b08:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e6      	bne.n	8004ae8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d12e      	bne.n	8004b80 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f023 0310 	bic.w	r3, r3, #16
 8004b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b46:	61fb      	str	r3, [r7, #28]
 8004b48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	69b9      	ldr	r1, [r7, #24]
 8004b4c:	69fa      	ldr	r2, [r7, #28]
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	617b      	str	r3, [r7, #20]
   return(result);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e6      	bne.n	8004b28 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	d103      	bne.n	8004b70 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2210      	movs	r2, #16
 8004b6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b76:	4619      	mov	r1, r3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff fa53 	bl	8004024 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b7e:	e00b      	b.n	8004b98 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7fb fb35 	bl	80001f0 <HAL_UART_RxCpltCallback>
}
 8004b86:	e007      	b.n	8004b98 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0208 	orr.w	r2, r2, #8
 8004b96:	619a      	str	r2, [r3, #24]
}
 8004b98:	bf00      	nop
 8004b9a:	3770      	adds	r7, #112	; 0x70
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b09c      	sub	sp, #112	; 0x70
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004bae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb8:	2b22      	cmp	r3, #34	; 0x22
 8004bba:	f040 80b9 	bne.w	8004d30 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004bc4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bcc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004bce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004bd2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bdc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be2:	1c9a      	adds	r2, r3, #2
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f040 809c 	bne.w	8004d40 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c1c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c26:	657b      	str	r3, [r7, #84]	; 0x54
 8004c28:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e6      	bne.n	8004c08 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3308      	adds	r3, #8
 8004c40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c44:	e853 3f00 	ldrex	r3, [r3]
 8004c48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	663b      	str	r3, [r7, #96]	; 0x60
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3308      	adds	r3, #8
 8004c58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c5a:	643a      	str	r2, [r7, #64]	; 0x40
 8004c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e5      	bne.n	8004c3a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d018      	beq.n	8004cc2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e6      	bne.n	8004c90 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d12e      	bne.n	8004d28 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f023 0310 	bic.w	r3, r3, #16
 8004ce4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6979      	ldr	r1, [r7, #20]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e6      	bne.n	8004cd0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2b10      	cmp	r3, #16
 8004d0e:	d103      	bne.n	8004d18 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2210      	movs	r2, #16
 8004d16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7ff f97f 	bl	8004024 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d26:	e00b      	b.n	8004d40 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7fb fa61 	bl	80001f0 <HAL_UART_RxCpltCallback>
}
 8004d2e:	e007      	b.n	8004d40 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699a      	ldr	r2, [r3, #24]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0208 	orr.w	r2, r2, #8
 8004d3e:	619a      	str	r2, [r3, #24]
}
 8004d40:	bf00      	nop
 8004d42:	3770      	adds	r7, #112	; 0x70
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d64:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004d68:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	43db      	mvns	r3, r3
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d92:	b084      	sub	sp, #16
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	f107 0014 	add.w	r0, r7, #20
 8004da0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	b004      	add	sp, #16
 8004dd2:	4770      	bx	lr

08004dd4 <__libc_init_array>:
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	4d0d      	ldr	r5, [pc, #52]	; (8004e0c <__libc_init_array+0x38>)
 8004dd8:	4c0d      	ldr	r4, [pc, #52]	; (8004e10 <__libc_init_array+0x3c>)
 8004dda:	1b64      	subs	r4, r4, r5
 8004ddc:	10a4      	asrs	r4, r4, #2
 8004dde:	2600      	movs	r6, #0
 8004de0:	42a6      	cmp	r6, r4
 8004de2:	d109      	bne.n	8004df8 <__libc_init_array+0x24>
 8004de4:	4d0b      	ldr	r5, [pc, #44]	; (8004e14 <__libc_init_array+0x40>)
 8004de6:	4c0c      	ldr	r4, [pc, #48]	; (8004e18 <__libc_init_array+0x44>)
 8004de8:	f000 f83e 	bl	8004e68 <_init>
 8004dec:	1b64      	subs	r4, r4, r5
 8004dee:	10a4      	asrs	r4, r4, #2
 8004df0:	2600      	movs	r6, #0
 8004df2:	42a6      	cmp	r6, r4
 8004df4:	d105      	bne.n	8004e02 <__libc_init_array+0x2e>
 8004df6:	bd70      	pop	{r4, r5, r6, pc}
 8004df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfc:	4798      	blx	r3
 8004dfe:	3601      	adds	r6, #1
 8004e00:	e7ee      	b.n	8004de0 <__libc_init_array+0xc>
 8004e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e06:	4798      	blx	r3
 8004e08:	3601      	adds	r6, #1
 8004e0a:	e7f2      	b.n	8004df2 <__libc_init_array+0x1e>
 8004e0c:	08004ec0 	.word	0x08004ec0
 8004e10:	08004ec0 	.word	0x08004ec0
 8004e14:	08004ec0 	.word	0x08004ec0
 8004e18:	08004ec4 	.word	0x08004ec4

08004e1c <memset>:
 8004e1c:	4402      	add	r2, r0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d100      	bne.n	8004e26 <memset+0xa>
 8004e24:	4770      	bx	lr
 8004e26:	f803 1b01 	strb.w	r1, [r3], #1
 8004e2a:	e7f9      	b.n	8004e20 <memset+0x4>

08004e2c <strcpy>:
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e32:	f803 2b01 	strb.w	r2, [r3], #1
 8004e36:	2a00      	cmp	r2, #0
 8004e38:	d1f9      	bne.n	8004e2e <strcpy+0x2>
 8004e3a:	4770      	bx	lr

08004e3c <strstr>:
 8004e3c:	780a      	ldrb	r2, [r1, #0]
 8004e3e:	b570      	push	{r4, r5, r6, lr}
 8004e40:	b96a      	cbnz	r2, 8004e5e <strstr+0x22>
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d109      	bne.n	8004e5c <strstr+0x20>
 8004e48:	460c      	mov	r4, r1
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f6      	beq.n	8004e42 <strstr+0x6>
 8004e54:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004e58:	429e      	cmp	r6, r3
 8004e5a:	d0f7      	beq.n	8004e4c <strstr+0x10>
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	7803      	ldrb	r3, [r0, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1ef      	bne.n	8004e44 <strstr+0x8>
 8004e64:	4618      	mov	r0, r3
 8004e66:	e7ec      	b.n	8004e42 <strstr+0x6>

08004e68 <_init>:
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6a:	bf00      	nop
 8004e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6e:	bc08      	pop	{r3}
 8004e70:	469e      	mov	lr, r3
 8004e72:	4770      	bx	lr

08004e74 <_fini>:
 8004e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e76:	bf00      	nop
 8004e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7a:	bc08      	pop	{r3}
 8004e7c:	469e      	mov	lr, r3
 8004e7e:	4770      	bx	lr
