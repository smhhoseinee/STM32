
HW5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800406c  0800406c  0001406c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800409c  0800409c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800409c  0800409c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800409c  0800409c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000418  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000424  20000424  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012336  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002307  00000000  00000000  00032372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  00034680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd0  00000000  00000000  00035720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dade  00000000  00000000  000366f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000141a2  00000000  00000000  000541ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4f6e  00000000  00000000  00068370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011d2de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000475c  00000000  00000000  0011d330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004054 	.word	0x08004054

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004054 	.word	0x08004054

080001c8 <buzzerInit>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
TIM_HandleTypeDef *buzzerPwmTimer;
uint32_t buzzerPwmChannel;

void buzzerInit() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    buzzerPwmTimer = &htim1;
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <buzzerInit+0x24>)
 80001ce:	4a08      	ldr	r2, [pc, #32]	; (80001f0 <buzzerInit+0x28>)
 80001d0:	601a      	str	r2, [r3, #0]
    buzzerPwmChannel = TIM_CHANNEL_1;
 80001d2:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <buzzerInit+0x2c>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Start(buzzerPwmTimer, buzzerPwmChannel);
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <buzzerInit+0x24>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <buzzerInit+0x2c>)
 80001de:	6812      	ldr	r2, [r2, #0]
 80001e0:	4611      	mov	r1, r2
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fecc 	bl	8002f80 <HAL_TIM_PWM_Start>
}
 80001e8:	bf00      	nop
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	20000418 	.word	0x20000418
 80001f0:	200000e0 	.word	0x200000e0
 80001f4:	2000041c 	.word	0x2000041c

080001f8 <buzzerChangeTone>:

void buzzerChangeTone(uint16_t freq, uint16_t volume) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b088      	sub	sp, #32
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	80fb      	strh	r3, [r7, #6]
 8000204:	4613      	mov	r3, r2
 8000206:	80bb      	strh	r3, [r7, #4]
    if (freq == 0 || freq > 20000) {
 8000208:	88fb      	ldrh	r3, [r7, #6]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d004      	beq.n	8000218 <buzzerChangeTone+0x20>
 800020e:	88fb      	ldrh	r3, [r7, #6]
 8000210:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000214:	4293      	cmp	r3, r2
 8000216:	d937      	bls.n	8000288 <buzzerChangeTone+0x90>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, 0);
 8000218:	4b52      	ldr	r3, [pc, #328]	; (8000364 <buzzerChangeTone+0x16c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d105      	bne.n	800022c <buzzerChangeTone+0x34>
 8000220:	4b51      	ldr	r3, [pc, #324]	; (8000368 <buzzerChangeTone+0x170>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2200      	movs	r2, #0
 8000228:	635a      	str	r2, [r3, #52]	; 0x34
 800022a:	e096      	b.n	800035a <buzzerChangeTone+0x162>
 800022c:	4b4d      	ldr	r3, [pc, #308]	; (8000364 <buzzerChangeTone+0x16c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b04      	cmp	r3, #4
 8000232:	d105      	bne.n	8000240 <buzzerChangeTone+0x48>
 8000234:	4b4c      	ldr	r3, [pc, #304]	; (8000368 <buzzerChangeTone+0x170>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	2300      	movs	r3, #0
 800023c:	6393      	str	r3, [r2, #56]	; 0x38
 800023e:	e08c      	b.n	800035a <buzzerChangeTone+0x162>
 8000240:	4b48      	ldr	r3, [pc, #288]	; (8000364 <buzzerChangeTone+0x16c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b08      	cmp	r3, #8
 8000246:	d105      	bne.n	8000254 <buzzerChangeTone+0x5c>
 8000248:	4b47      	ldr	r3, [pc, #284]	; (8000368 <buzzerChangeTone+0x170>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	2300      	movs	r3, #0
 8000250:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000252:	e082      	b.n	800035a <buzzerChangeTone+0x162>
 8000254:	4b43      	ldr	r3, [pc, #268]	; (8000364 <buzzerChangeTone+0x16c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b0c      	cmp	r3, #12
 800025a:	d105      	bne.n	8000268 <buzzerChangeTone+0x70>
 800025c:	4b42      	ldr	r3, [pc, #264]	; (8000368 <buzzerChangeTone+0x170>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	6413      	str	r3, [r2, #64]	; 0x40
 8000266:	e078      	b.n	800035a <buzzerChangeTone+0x162>
 8000268:	4b3e      	ldr	r3, [pc, #248]	; (8000364 <buzzerChangeTone+0x16c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b10      	cmp	r3, #16
 800026e:	d105      	bne.n	800027c <buzzerChangeTone+0x84>
 8000270:	4b3d      	ldr	r3, [pc, #244]	; (8000368 <buzzerChangeTone+0x170>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	2300      	movs	r3, #0
 8000278:	6593      	str	r3, [r2, #88]	; 0x58
 800027a:	e06e      	b.n	800035a <buzzerChangeTone+0x162>
 800027c:	4b3a      	ldr	r3, [pc, #232]	; (8000368 <buzzerChangeTone+0x170>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	681a      	ldr	r2, [r3, #0]
 8000282:	2300      	movs	r3, #0
 8000284:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000286:	e068      	b.n	800035a <buzzerChangeTone+0x162>
    } else {
        const uint32_t internalClockFreq = HAL_RCC_GetSysClockFreq();
 8000288:	f002 fafc 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 800028c:	61f8      	str	r0, [r7, #28]
        const uint32_t prescaler = 1 + internalClockFreq / freq / 60000;
 800028e:	88fb      	ldrh	r3, [r7, #6]
 8000290:	69fa      	ldr	r2, [r7, #28]
 8000292:	fbb2 f3f3 	udiv	r3, r2, r3
 8000296:	4a35      	ldr	r2, [pc, #212]	; (800036c <buzzerChangeTone+0x174>)
 8000298:	fba2 2303 	umull	r2, r3, r2, r3
 800029c:	0b9b      	lsrs	r3, r3, #14
 800029e:	3301      	adds	r3, #1
 80002a0:	61bb      	str	r3, [r7, #24]
        const uint32_t timerClock = internalClockFreq / prescaler;
 80002a2:	69fa      	ldr	r2, [r7, #28]
 80002a4:	69bb      	ldr	r3, [r7, #24]
 80002a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002aa:	617b      	str	r3, [r7, #20]
        const uint32_t periodCycles = timerClock / freq;
 80002ac:	88fb      	ldrh	r3, [r7, #6]
 80002ae:	697a      	ldr	r2, [r7, #20]
 80002b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b4:	613b      	str	r3, [r7, #16]
        const uint32_t pulseWidth = volume * periodCycles / 1000 / 2;
 80002b6:	88bb      	ldrh	r3, [r7, #4]
 80002b8:	693a      	ldr	r2, [r7, #16]
 80002ba:	fb02 f303 	mul.w	r3, r2, r3
 80002be:	4a2c      	ldr	r2, [pc, #176]	; (8000370 <buzzerChangeTone+0x178>)
 80002c0:	fba2 2303 	umull	r2, r3, r2, r3
 80002c4:	09db      	lsrs	r3, r3, #7
 80002c6:	60fb      	str	r3, [r7, #12]

        buzzerPwmTimer->Instance->PSC = prescaler - 1;
 80002c8:	4b27      	ldr	r3, [pc, #156]	; (8000368 <buzzerChangeTone+0x170>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	69ba      	ldr	r2, [r7, #24]
 80002d0:	3a01      	subs	r2, #1
 80002d2:	629a      	str	r2, [r3, #40]	; 0x28
        buzzerPwmTimer->Instance->ARR = periodCycles - 1;
 80002d4:	4b24      	ldr	r3, [pc, #144]	; (8000368 <buzzerChangeTone+0x170>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	693a      	ldr	r2, [r7, #16]
 80002dc:	3a01      	subs	r2, #1
 80002de:	62da      	str	r2, [r3, #44]	; 0x2c
        buzzerPwmTimer->Instance->EGR = TIM_EGR_UG;
 80002e0:	4b21      	ldr	r3, [pc, #132]	; (8000368 <buzzerChangeTone+0x170>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2201      	movs	r2, #1
 80002e8:	615a      	str	r2, [r3, #20]

        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 80002ea:	4b1e      	ldr	r3, [pc, #120]	; (8000364 <buzzerChangeTone+0x16c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d105      	bne.n	80002fe <buzzerChangeTone+0x106>
 80002f2:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <buzzerChangeTone+0x170>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	68fa      	ldr	r2, [r7, #12]
 80002fa:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 80002fc:	e02d      	b.n	800035a <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 80002fe:	4b19      	ldr	r3, [pc, #100]	; (8000364 <buzzerChangeTone+0x16c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b04      	cmp	r3, #4
 8000304:	d105      	bne.n	8000312 <buzzerChangeTone+0x11a>
 8000306:	4b18      	ldr	r3, [pc, #96]	; (8000368 <buzzerChangeTone+0x170>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000310:	e023      	b.n	800035a <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8000312:	4b14      	ldr	r3, [pc, #80]	; (8000364 <buzzerChangeTone+0x16c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b08      	cmp	r3, #8
 8000318:	d105      	bne.n	8000326 <buzzerChangeTone+0x12e>
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <buzzerChangeTone+0x170>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000324:	e019      	b.n	800035a <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8000326:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <buzzerChangeTone+0x16c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b0c      	cmp	r3, #12
 800032c:	d105      	bne.n	800033a <buzzerChangeTone+0x142>
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <buzzerChangeTone+0x170>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000338:	e00f      	b.n	800035a <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <buzzerChangeTone+0x16c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2b10      	cmp	r3, #16
 8000340:	d105      	bne.n	800034e <buzzerChangeTone+0x156>
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <buzzerChangeTone+0x170>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800034c:	e005      	b.n	800035a <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <buzzerChangeTone+0x170>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000358:	e7ff      	b.n	800035a <buzzerChangeTone+0x162>
 800035a:	bf00      	nop
 800035c:	3720      	adds	r7, #32
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	2000041c 	.word	0x2000041c
 8000368:	20000418 	.word	0x20000418
 800036c:	45e7b273 	.word	0x45e7b273
 8000370:	10624dd3 	.word	0x10624dd3

08000374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000378:	f000 fbf4 	bl	8000b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037c:	f000 f812 	bl	80003a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000380:	f000 f9c0 	bl	8000704 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000384:	f000 f872 	bl	800046c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000388:	f000 f8b0 	bl	80004ec <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800038c:	f000 f998 	bl	80006c0 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000390:	f000 f8ea 	bl	8000568 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  buzzerInit();
 8000394:	f7ff ff18 	bl	80001c8 <buzzerInit>
  buzzerChangeTone(1000, 10);
 8000398:	210a      	movs	r1, #10
 800039a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800039e:	f7ff ff2b 	bl	80001f8 <buzzerChangeTone>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <main+0x2e>

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b09e      	sub	sp, #120	; 0x78
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003ae:	2228      	movs	r2, #40	; 0x28
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f003 fe46 	bl	8004044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c8:	463b      	mov	r3, r7
 80003ca:	223c      	movs	r2, #60	; 0x3c
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f003 fe38 	bl	8004044 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80003d4:	2303      	movs	r3, #3
 80003d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e2:	2301      	movs	r3, #1
 80003e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e6:	2310      	movs	r3, #16
 80003e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ea:	2302      	movs	r3, #2
 80003ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003f8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003fe:	4618      	mov	r0, r3
 8000400:	f001 f886 	bl	8001510 <HAL_RCC_OscConfig>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800040a:	f000 f9f9 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040e:	230f      	movs	r3, #15
 8000410:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000412:	2302      	movs	r3, #2
 8000414:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800041a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800041e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000424:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000428:	2101      	movs	r1, #1
 800042a:	4618      	mov	r0, r3
 800042c:	f002 f8ae 	bl	800258c <HAL_RCC_ClockConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000436:	f000 f9e3 	bl	8000800 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <SystemClock_Config+0xc4>)
 800043c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800043e:	2300      	movs	r3, #0
 8000440:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000442:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000446:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000448:	2300      	movs	r3, #0
 800044a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800044c:	463b      	mov	r3, r7
 800044e:	4618      	mov	r0, r3
 8000450:	f002 fa82 	bl	8002958 <HAL_RCCEx_PeriphCLKConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800045a:	f000 f9d1 	bl	8000800 <Error_Handler>
  }
}
 800045e:	bf00      	nop
 8000460:	3778      	adds	r7, #120	; 0x78
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	00021020 	.word	0x00021020

0800046c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000470:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <MX_I2C1_Init+0x74>)
 8000472:	4a1c      	ldr	r2, [pc, #112]	; (80004e4 <MX_I2C1_Init+0x78>)
 8000474:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000476:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <MX_I2C1_Init+0x74>)
 8000478:	4a1b      	ldr	r2, [pc, #108]	; (80004e8 <MX_I2C1_Init+0x7c>)
 800047a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800047c:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <MX_I2C1_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000482:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <MX_I2C1_Init+0x74>)
 8000484:	2201      	movs	r2, #1
 8000486:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000488:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <MX_I2C1_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <MX_I2C1_Init+0x74>)
 8000490:	2200      	movs	r2, #0
 8000492:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <MX_I2C1_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <MX_I2C1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <MX_I2C1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004a6:	480e      	ldr	r0, [pc, #56]	; (80004e0 <MX_I2C1_Init+0x74>)
 80004a8:	f000 fe3a 	bl	8001120 <HAL_I2C_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004b2:	f000 f9a5 	bl	8000800 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004b6:	2100      	movs	r1, #0
 80004b8:	4809      	ldr	r0, [pc, #36]	; (80004e0 <MX_I2C1_Init+0x74>)
 80004ba:	f000 fec0 	bl	800123e <HAL_I2CEx_ConfigAnalogFilter>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004c4:	f000 f99c 	bl	8000800 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004c8:	2100      	movs	r1, #0
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <MX_I2C1_Init+0x74>)
 80004cc:	f000 ff02 	bl	80012d4 <HAL_I2CEx_ConfigDigitalFilter>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004d6:	f000 f993 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000028 	.word	0x20000028
 80004e4:	40005400 	.word	0x40005400
 80004e8:	2000090e 	.word	0x2000090e

080004ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004f0:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <MX_SPI1_Init+0x74>)
 80004f2:	4a1c      	ldr	r2, [pc, #112]	; (8000564 <MX_SPI1_Init+0x78>)
 80004f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004f6:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <MX_SPI1_Init+0x74>)
 80004f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004fe:	4b18      	ldr	r3, [pc, #96]	; (8000560 <MX_SPI1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000504:	4b16      	ldr	r3, [pc, #88]	; (8000560 <MX_SPI1_Init+0x74>)
 8000506:	f44f 7240 	mov.w	r2, #768	; 0x300
 800050a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_SPI1_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <MX_SPI1_Init+0x74>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_SPI1_Init+0x74>)
 800051a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800051e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_SPI1_Init+0x74>)
 8000522:	2208      	movs	r2, #8
 8000524:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_SPI1_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MX_SPI1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <MX_SPI1_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_SPI1_Init+0x74>)
 800053a:	2207      	movs	r2, #7
 800053c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_SPI1_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <MX_SPI1_Init+0x74>)
 8000546:	2208      	movs	r2, #8
 8000548:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_SPI1_Init+0x74>)
 800054c:	f002 fbb4 	bl	8002cb8 <HAL_SPI_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000556:	f000 f953 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	2000007c 	.word	0x2000007c
 8000564:	40013000 	.word	0x40013000

08000568 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b09a      	sub	sp, #104	; 0x68
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800056e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800057c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
 8000598:	615a      	str	r2, [r3, #20]
 800059a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	222c      	movs	r2, #44	; 0x2c
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fd4e 	bl	8004044 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005a8:	4b43      	ldr	r3, [pc, #268]	; (80006b8 <MX_TIM1_Init+0x150>)
 80005aa:	4a44      	ldr	r2, [pc, #272]	; (80006bc <MX_TIM1_Init+0x154>)
 80005ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005ae:	4b42      	ldr	r3, [pc, #264]	; (80006b8 <MX_TIM1_Init+0x150>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b4:	4b40      	ldr	r3, [pc, #256]	; (80006b8 <MX_TIM1_Init+0x150>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005ba:	4b3f      	ldr	r3, [pc, #252]	; (80006b8 <MX_TIM1_Init+0x150>)
 80005bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c2:	4b3d      	ldr	r3, [pc, #244]	; (80006b8 <MX_TIM1_Init+0x150>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005c8:	4b3b      	ldr	r3, [pc, #236]	; (80006b8 <MX_TIM1_Init+0x150>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ce:	4b3a      	ldr	r3, [pc, #232]	; (80006b8 <MX_TIM1_Init+0x150>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005d4:	4838      	ldr	r0, [pc, #224]	; (80006b8 <MX_TIM1_Init+0x150>)
 80005d6:	f002 fc1a 	bl	8002e0e <HAL_TIM_Base_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80005e0:	f000 f90e 	bl	8000800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005ee:	4619      	mov	r1, r3
 80005f0:	4831      	ldr	r0, [pc, #196]	; (80006b8 <MX_TIM1_Init+0x150>)
 80005f2:	f002 fed9 	bl	80033a8 <HAL_TIM_ConfigClockSource>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80005fc:	f000 f900 	bl	8000800 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000600:	482d      	ldr	r0, [pc, #180]	; (80006b8 <MX_TIM1_Init+0x150>)
 8000602:	f002 fc5b 	bl	8002ebc <HAL_TIM_PWM_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800060c:	f000 f8f8 	bl	8000800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000610:	2300      	movs	r3, #0
 8000612:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000614:	2300      	movs	r3, #0
 8000616:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800061c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000620:	4619      	mov	r1, r3
 8000622:	4825      	ldr	r0, [pc, #148]	; (80006b8 <MX_TIM1_Init+0x150>)
 8000624:	f003 fbb0 	bl	8003d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800062e:	f000 f8e7 	bl	8000800 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000632:	2360      	movs	r3, #96	; 0x60
 8000634:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800063a:	2300      	movs	r3, #0
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800063e:	2300      	movs	r3, #0
 8000640:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000642:	2300      	movs	r3, #0
 8000644:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000646:	2300      	movs	r3, #0
 8000648:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800064a:	2300      	movs	r3, #0
 800064c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800064e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000652:	2200      	movs	r2, #0
 8000654:	4619      	mov	r1, r3
 8000656:	4818      	ldr	r0, [pc, #96]	; (80006b8 <MX_TIM1_Init+0x150>)
 8000658:	f002 fd92 	bl	8003180 <HAL_TIM_PWM_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000662:	f000 f8cd 	bl	8000800 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800067a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800067e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000688:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	4619      	mov	r1, r3
 800069a:	4807      	ldr	r0, [pc, #28]	; (80006b8 <MX_TIM1_Init+0x150>)
 800069c:	f003 fbf4 	bl	8003e88 <HAL_TIMEx_ConfigBreakDeadTime>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80006a6:	f000 f8ab 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006aa:	4803      	ldr	r0, [pc, #12]	; (80006b8 <MX_TIM1_Init+0x150>)
 80006ac:	f000 f978 	bl	80009a0 <HAL_TIM_MspPostInit>

}
 80006b0:	bf00      	nop
 80006b2:	3768      	adds	r7, #104	; 0x68
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000e0 	.word	0x200000e0
 80006bc:	40012c00 	.word	0x40012c00

080006c0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MX_USB_PCD_Init+0x3c>)
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <MX_USB_PCD_Init+0x40>)
 80006c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USB_PCD_Init+0x3c>)
 80006cc:	2208      	movs	r2, #8
 80006ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_USB_PCD_Init+0x3c>)
 80006d2:	2202      	movs	r2, #2
 80006d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USB_PCD_Init+0x3c>)
 80006d8:	2202      	movs	r2, #2
 80006da:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_USB_PCD_Init+0x3c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USB_PCD_Init+0x3c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_USB_PCD_Init+0x3c>)
 80006ea:	f000 fe3f 	bl	800136c <HAL_PCD_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80006f4:	f000 f884 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000012c 	.word	0x2000012c
 8000700:	40005c00 	.word	0x40005c00

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800071a:	4b37      	ldr	r3, [pc, #220]	; (80007f8 <MX_GPIO_Init+0xf4>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a36      	ldr	r2, [pc, #216]	; (80007f8 <MX_GPIO_Init+0xf4>)
 8000720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <MX_GPIO_Init+0xf4>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <MX_GPIO_Init+0xf4>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	4a30      	ldr	r2, [pc, #192]	; (80007f8 <MX_GPIO_Init+0xf4>)
 8000738:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800073c:	6153      	str	r3, [r2, #20]
 800073e:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <MX_GPIO_Init+0xf4>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074a:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <MX_GPIO_Init+0xf4>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a2a      	ldr	r2, [pc, #168]	; (80007f8 <MX_GPIO_Init+0xf4>)
 8000750:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <MX_GPIO_Init+0xf4>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <MX_GPIO_Init+0xf4>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a24      	ldr	r2, [pc, #144]	; (80007f8 <MX_GPIO_Init+0xf4>)
 8000768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800076c:	6153      	str	r3, [r2, #20]
 800076e:	4b22      	ldr	r3, [pc, #136]	; (80007f8 <MX_GPIO_Init+0xf4>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <MX_GPIO_Init+0xf4>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	4a1e      	ldr	r2, [pc, #120]	; (80007f8 <MX_GPIO_Init+0xf4>)
 8000780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000784:	6153      	str	r3, [r2, #20]
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_GPIO_Init+0xf4>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000792:	2200      	movs	r2, #0
 8000794:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000798:	4818      	ldr	r0, [pc, #96]	; (80007fc <MX_GPIO_Init+0xf8>)
 800079a:	f000 fca9 	bl	80010f0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800079e:	2337      	movs	r3, #55	; 0x37
 80007a0:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007a2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	4812      	ldr	r0, [pc, #72]	; (80007fc <MX_GPIO_Init+0xf8>)
 80007b4:	f000 fb22 	bl	8000dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80007b8:	f64f 7308 	movw	r3, #65288	; 0xff08
 80007bc:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	480a      	ldr	r0, [pc, #40]	; (80007fc <MX_GPIO_Init+0xf8>)
 80007d2:	f000 fb13 	bl	8000dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d6:	2301      	movs	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ec:	f000 fb06 	bl	8000dfc <HAL_GPIO_Init>

}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48001000 	.word	0x48001000

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_MspInit+0x44>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <HAL_MspInit+0x44>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_MspInit+0x44>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x44>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_MspInit+0x44>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	61d3      	str	r3, [r2, #28]
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_MspInit+0x44>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000842:	2007      	movs	r0, #7
 8000844:	f000 faa6 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <HAL_I2C_MspInit+0x7c>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d127      	bne.n	80008c6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <HAL_I2C_MspInit+0x80>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a16      	ldr	r2, [pc, #88]	; (80008d4 <HAL_I2C_MspInit+0x80>)
 800087c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000880:	6153      	str	r3, [r2, #20]
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <HAL_I2C_MspInit+0x80>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800088e:	23c0      	movs	r3, #192	; 0xc0
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000892:	2312      	movs	r3, #18
 8000894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000896:	2301      	movs	r3, #1
 8000898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800089e:	2304      	movs	r3, #4
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <HAL_I2C_MspInit+0x84>)
 80008aa:	f000 faa7 	bl	8000dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_I2C_MspInit+0x80>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <HAL_I2C_MspInit+0x80>)
 80008b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008b8:	61d3      	str	r3, [r2, #28]
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_I2C_MspInit+0x80>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40005400 	.word	0x40005400
 80008d4:	40021000 	.word	0x40021000
 80008d8:	48000400 	.word	0x48000400

080008dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a17      	ldr	r2, [pc, #92]	; (8000958 <HAL_SPI_MspInit+0x7c>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d128      	bne.n	8000950 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <HAL_SPI_MspInit+0x80>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	4a16      	ldr	r2, [pc, #88]	; (800095c <HAL_SPI_MspInit+0x80>)
 8000904:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000908:	6193      	str	r3, [r2, #24]
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <HAL_SPI_MspInit+0x80>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_SPI_MspInit+0x80>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a10      	ldr	r2, [pc, #64]	; (800095c <HAL_SPI_MspInit+0x80>)
 800091c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000920:	6153      	str	r3, [r2, #20]
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_SPI_MspInit+0x80>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800092e:	23e0      	movs	r3, #224	; 0xe0
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800093e:	2305      	movs	r3, #5
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f000 fa56 	bl	8000dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40013000 	.word	0x40013000
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_TIM_Base_MspInit+0x38>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d10b      	bne.n	800098a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_TIM_Base_MspInit+0x3c>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	4a09      	ldr	r2, [pc, #36]	; (800099c <HAL_TIM_Base_MspInit+0x3c>)
 8000978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800097c:	6193      	str	r3, [r2, #24]
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <HAL_TIM_Base_MspInit+0x3c>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40012c00 	.word	0x40012c00
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <HAL_TIM_MspPostInit+0x68>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d11d      	bne.n	80009fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_TIM_MspPostInit+0x6c>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <HAL_TIM_MspPostInit+0x6c>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	6153      	str	r3, [r2, #20]
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_TIM_MspPostInit+0x6c>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80009ec:	2306      	movs	r3, #6
 80009ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4619      	mov	r1, r3
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fa:	f000 f9ff 	bl	8000dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40012c00 	.word	0x40012c00
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a18      	ldr	r2, [pc, #96]	; (8000a90 <HAL_PCD_MspInit+0x80>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d129      	bne.n	8000a86 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_PCD_MspInit+0x84>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_PCD_MspInit+0x84>)
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	6153      	str	r3, [r2, #20]
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_PCD_MspInit+0x84>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000a4a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a5c:	230e      	movs	r3, #14
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f000 f9c7 	bl	8000dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_PCD_MspInit+0x84>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_PCD_MspInit+0x84>)
 8000a74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_PCD_MspInit+0x84>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40005c00 	.word	0x40005c00
 8000a94:	40021000 	.word	0x40021000

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <NMI_Handler+0x4>

08000a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae4:	f000 f884 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <SystemInit+0x20>)
 8000af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <SystemInit+0x20>)
 8000af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b48 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b14:	f7ff ffea 	bl	8000aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1a:	490d      	ldr	r1, [pc, #52]	; (8000b50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <LoopForever+0xe>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b30:	4c0a      	ldr	r4, [pc, #40]	; (8000b5c <LoopForever+0x16>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3e:	f003 fa5d 	bl	8003ffc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b42:	f7ff fc17 	bl	8000374 <main>

08000b46 <LoopForever>:

LoopForever:
    b LoopForever
 8000b46:	e7fe      	b.n	8000b46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b48:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b54:	080040a4 	.word	0x080040a4
  ldr r2, =_sbss
 8000b58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b5c:	20000424 	.word	0x20000424

08000b60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC1_2_IRQHandler>
	...

08000b64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x28>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x28>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f90d 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fe44 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40022000 	.word	0x40022000

08000b90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f917 	bl	8000de2 <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 f8ed 	bl	8000daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000420 	.word	0x20000420

08000c18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000420 	.word	0x20000420

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	; (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	; 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f7ff ff8e 	bl	8000c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff47 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbc:	f7ff ff5c 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	6978      	ldr	r0, [r7, #20]
 8000dc8:	f7ff ff8e 	bl	8000ce8 <NVIC_EncodePriority>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff5d 	bl	8000c94 <__NVIC_SetPriority>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffb0 	bl	8000d50 <SysTick_Config>
 8000df0:	4603      	mov	r3, r0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0a:	e154      	b.n	80010b6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	2101      	movs	r1, #1
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 8146 	beq.w	80010b0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d005      	beq.n	8000e3c <HAL_GPIO_Init+0x40>
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d130      	bne.n	8000e9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e72:	2201      	movs	r2, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	091b      	lsrs	r3, r3, #4
 8000e88:	f003 0201 	and.w	r2, r3, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d017      	beq.n	8000eda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d123      	bne.n	8000f2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	220f      	movs	r2, #15
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	691a      	ldr	r2, [r3, #16]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	6939      	ldr	r1, [r7, #16]
 8000f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0203 	and.w	r2, r3, #3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 80a0 	beq.w	80010b0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f70:	4b58      	ldr	r3, [pc, #352]	; (80010d4 <HAL_GPIO_Init+0x2d8>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a57      	ldr	r2, [pc, #348]	; (80010d4 <HAL_GPIO_Init+0x2d8>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b55      	ldr	r3, [pc, #340]	; (80010d4 <HAL_GPIO_Init+0x2d8>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f88:	4a53      	ldr	r2, [pc, #332]	; (80010d8 <HAL_GPIO_Init+0x2dc>)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fb2:	d019      	beq.n	8000fe8 <HAL_GPIO_Init+0x1ec>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a49      	ldr	r2, [pc, #292]	; (80010dc <HAL_GPIO_Init+0x2e0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d013      	beq.n	8000fe4 <HAL_GPIO_Init+0x1e8>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a48      	ldr	r2, [pc, #288]	; (80010e0 <HAL_GPIO_Init+0x2e4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d00d      	beq.n	8000fe0 <HAL_GPIO_Init+0x1e4>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a47      	ldr	r2, [pc, #284]	; (80010e4 <HAL_GPIO_Init+0x2e8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d007      	beq.n	8000fdc <HAL_GPIO_Init+0x1e0>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a46      	ldr	r2, [pc, #280]	; (80010e8 <HAL_GPIO_Init+0x2ec>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d101      	bne.n	8000fd8 <HAL_GPIO_Init+0x1dc>
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	e008      	b.n	8000fea <HAL_GPIO_Init+0x1ee>
 8000fd8:	2305      	movs	r3, #5
 8000fda:	e006      	b.n	8000fea <HAL_GPIO_Init+0x1ee>
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e004      	b.n	8000fea <HAL_GPIO_Init+0x1ee>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e002      	b.n	8000fea <HAL_GPIO_Init+0x1ee>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <HAL_GPIO_Init+0x1ee>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	f002 0203 	and.w	r2, r2, #3
 8000ff0:	0092      	lsls	r2, r2, #2
 8000ff2:	4093      	lsls	r3, r2
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ffa:	4937      	ldr	r1, [pc, #220]	; (80010d8 <HAL_GPIO_Init+0x2dc>)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001008:	4b38      	ldr	r3, [pc, #224]	; (80010ec <HAL_GPIO_Init+0x2f0>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800102c:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <HAL_GPIO_Init+0x2f0>)
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <HAL_GPIO_Init+0x2f0>)
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001056:	4a25      	ldr	r2, [pc, #148]	; (80010ec <HAL_GPIO_Init+0x2f0>)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800105c:	4b23      	ldr	r3, [pc, #140]	; (80010ec <HAL_GPIO_Init+0x2f0>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001080:	4a1a      	ldr	r2, [pc, #104]	; (80010ec <HAL_GPIO_Init+0x2f0>)
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_GPIO_Init+0x2f0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010aa:	4a10      	ldr	r2, [pc, #64]	; (80010ec <HAL_GPIO_Init+0x2f0>)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3301      	adds	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	fa22 f303 	lsr.w	r3, r2, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f47f aea3 	bne.w	8000e0c <HAL_GPIO_Init+0x10>
  }
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010000 	.word	0x40010000
 80010dc:	48000400 	.word	0x48000400
 80010e0:	48000800 	.word	0x48000800
 80010e4:	48000c00 	.word	0x48000c00
 80010e8:	48001000 	.word	0x48001000
 80010ec:	40010400 	.word	0x40010400

080010f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	4613      	mov	r3, r2
 80010fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001100:	787b      	ldrb	r3, [r7, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800110c:	e002      	b.n	8001114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e081      	b.n	8001236 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d106      	bne.n	800114c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fb84 	bl	8000854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2224      	movs	r2, #36	; 0x24
 8001150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0201 	bic.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001170:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001180:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d107      	bne.n	800119a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	e006      	b.n	80011a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d104      	bne.n	80011ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691a      	ldr	r2, [r3, #16]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69d9      	ldr	r1, [r3, #28]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a1a      	ldr	r2, [r3, #32]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0201 	orr.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2220      	movs	r2, #32
 8001222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b20      	cmp	r3, #32
 8001252:	d138      	bne.n	80012c6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800125e:	2302      	movs	r3, #2
 8001260:	e032      	b.n	80012c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2224      	movs	r2, #36	; 0x24
 800126e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0201 	bic.w	r2, r2, #1
 8001280:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001290:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6819      	ldr	r1, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0201 	orr.w	r2, r2, #1
 80012b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2220      	movs	r2, #32
 80012b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012c6:	2302      	movs	r3, #2
  }
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b20      	cmp	r3, #32
 80012e8:	d139      	bne.n	800135e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e033      	b.n	8001360 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2224      	movs	r2, #36	; 0x24
 8001304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0201 	bic.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001326:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f042 0201 	orr.w	r2, r2, #1
 8001348:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2220      	movs	r2, #32
 800134e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800135e:	2302      	movs	r3, #2
  }
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800136c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136e:	b08b      	sub	sp, #44	; 0x2c
 8001370:	af06      	add	r7, sp, #24
 8001372:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e0c4      	b.n	8001508 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d106      	bne.n	8001398 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fb3c 	bl	8000a10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2203      	movs	r2, #3
 800139c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fded 	bl	8003f84 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
 80013ae:	e040      	b.n	8001432 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	440b      	add	r3, r1
 80013c0:	3301      	adds	r3, #1
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	440b      	add	r3, r1
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	440b      	add	r3, r1
 80013ea:	3303      	adds	r3, #3
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013f0:	7bfa      	ldrb	r2, [r7, #15]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	440b      	add	r3, r1
 80013fe:	3338      	adds	r3, #56	; 0x38
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	440b      	add	r3, r1
 8001412:	333c      	adds	r3, #60	; 0x3c
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	440b      	add	r3, r1
 8001426:	3340      	adds	r3, #64	; 0x40
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	3301      	adds	r3, #1
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	429a      	cmp	r2, r3
 800143a:	d3b9      	bcc.n	80013b0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	e044      	b.n	80014cc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	440b      	add	r3, r1
 8001492:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	440b      	add	r3, r1
 80014a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	440b      	add	r3, r1
 80014be:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	3301      	adds	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d3b5      	bcc.n	8001442 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	687e      	ldr	r6, [r7, #4]
 80014de:	466d      	mov	r5, sp
 80014e0:	f106 0410 	add.w	r4, r6, #16
 80014e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	602b      	str	r3, [r5, #0]
 80014ec:	1d33      	adds	r3, r6, #4
 80014ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f0:	6838      	ldr	r0, [r7, #0]
 80014f2:	f002 fd62 	bl	8003fba <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001516:	af00      	add	r7, sp, #0
 8001518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001520:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001526:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	f001 b823 	b.w	800257c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 817d 	beq.w	8001846 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800154c:	4bbc      	ldr	r3, [pc, #752]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b04      	cmp	r3, #4
 8001556:	d00c      	beq.n	8001572 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001558:	4bb9      	ldr	r3, [pc, #740]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b08      	cmp	r3, #8
 8001562:	d15c      	bne.n	800161e <HAL_RCC_OscConfig+0x10e>
 8001564:	4bb6      	ldr	r3, [pc, #728]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001570:	d155      	bne.n	800161e <HAL_RCC_OscConfig+0x10e>
 8001572:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001576:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800157e:	fa93 f3a3 	rbit	r3, r3
 8001582:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001586:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158a:	fab3 f383 	clz	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	095b      	lsrs	r3, r3, #5
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b01      	cmp	r3, #1
 800159c:	d102      	bne.n	80015a4 <HAL_RCC_OscConfig+0x94>
 800159e:	4ba8      	ldr	r3, [pc, #672]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	e015      	b.n	80015d0 <HAL_RCC_OscConfig+0xc0>
 80015a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80015b0:	fa93 f3a3 	rbit	r3, r3
 80015b4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80015b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015bc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80015c0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80015c4:	fa93 f3a3 	rbit	r3, r3
 80015c8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80015cc:	4b9c      	ldr	r3, [pc, #624]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015d4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80015d8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80015dc:	fa92 f2a2 	rbit	r2, r2
 80015e0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80015e4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80015e8:	fab2 f282 	clz	r2, r2
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	f042 0220 	orr.w	r2, r2, #32
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	f002 021f 	and.w	r2, r2, #31
 80015f8:	2101      	movs	r1, #1
 80015fa:	fa01 f202 	lsl.w	r2, r1, r2
 80015fe:	4013      	ands	r3, r2
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 811f 	beq.w	8001844 <HAL_RCC_OscConfig+0x334>
 8001606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 8116 	bne.w	8001844 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	f000 bfaf 	b.w	800257c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001622:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162e:	d106      	bne.n	800163e <HAL_RCC_OscConfig+0x12e>
 8001630:	4b83      	ldr	r3, [pc, #524]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a82      	ldr	r2, [pc, #520]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	e036      	b.n	80016ac <HAL_RCC_OscConfig+0x19c>
 800163e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001642:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0x158>
 800164e:	4b7c      	ldr	r3, [pc, #496]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a7b      	ldr	r2, [pc, #492]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b79      	ldr	r3, [pc, #484]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a78      	ldr	r2, [pc, #480]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001660:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e021      	b.n	80016ac <HAL_RCC_OscConfig+0x19c>
 8001668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x184>
 800167a:	4b71      	ldr	r3, [pc, #452]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a70      	ldr	r2, [pc, #448]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b6e      	ldr	r3, [pc, #440]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a6d      	ldr	r2, [pc, #436]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 800168c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e00b      	b.n	80016ac <HAL_RCC_OscConfig+0x19c>
 8001694:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a69      	ldr	r2, [pc, #420]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 800169a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b67      	ldr	r3, [pc, #412]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a66      	ldr	r2, [pc, #408]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80016a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016aa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016ac:	4b64      	ldr	r3, [pc, #400]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	f023 020f 	bic.w	r2, r3, #15
 80016b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	495f      	ldr	r1, [pc, #380]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d059      	beq.n	800178a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fa9f 	bl	8000c18 <HAL_GetTick>
 80016da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	e00a      	b.n	80016f6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fa9a 	bl	8000c18 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b64      	cmp	r3, #100	; 0x64
 80016ee:	d902      	bls.n	80016f6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	f000 bf43 	b.w	800257c <HAL_RCC_OscConfig+0x106c>
 80016f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016fa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800170a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	fab3 f383 	clz	r3, r3
 8001712:	b2db      	uxtb	r3, r3
 8001714:	095b      	lsrs	r3, r3, #5
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b01      	cmp	r3, #1
 8001720:	d102      	bne.n	8001728 <HAL_RCC_OscConfig+0x218>
 8001722:	4b47      	ldr	r3, [pc, #284]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	e015      	b.n	8001754 <HAL_RCC_OscConfig+0x244>
 8001728:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800172c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800173c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001740:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001744:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001750:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001758:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800175c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001760:	fa92 f2a2 	rbit	r2, r2
 8001764:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001768:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800176c:	fab2 f282 	clz	r2, r2
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	f042 0220 	orr.w	r2, r2, #32
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f002 021f 	and.w	r2, r2, #31
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ab      	beq.n	80016e0 <HAL_RCC_OscConfig+0x1d0>
 8001788:	e05d      	b.n	8001846 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff fa45 	bl	8000c18 <HAL_GetTick>
 800178e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	e00a      	b.n	80017aa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff fa40 	bl	8000c18 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b64      	cmp	r3, #100	; 0x64
 80017a2:	d902      	bls.n	80017aa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	f000 bee9 	b.w	800257c <HAL_RCC_OscConfig+0x106c>
 80017aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ae:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80017b6:	fa93 f3a3 	rbit	r3, r3
 80017ba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80017be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c2:	fab3 f383 	clz	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	095b      	lsrs	r3, r3, #5
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d102      	bne.n	80017dc <HAL_RCC_OscConfig+0x2cc>
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	e015      	b.n	8001808 <HAL_RCC_OscConfig+0x2f8>
 80017dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017e0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80017e8:	fa93 f3a3 	rbit	r3, r3
 80017ec:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80017f8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800180c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001810:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001814:	fa92 f2a2 	rbit	r2, r2
 8001818:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800181c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001820:	fab2 f282 	clz	r2, r2
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	f042 0220 	orr.w	r2, r2, #32
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	f002 021f 	and.w	r2, r2, #31
 8001830:	2101      	movs	r1, #1
 8001832:	fa01 f202 	lsl.w	r2, r1, r2
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1ab      	bne.n	8001794 <HAL_RCC_OscConfig+0x284>
 800183c:	e003      	b.n	8001846 <HAL_RCC_OscConfig+0x336>
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 817d 	beq.w	8001b56 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800185c:	4ba6      	ldr	r3, [pc, #664]	; (8001af8 <HAL_RCC_OscConfig+0x5e8>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00b      	beq.n	8001880 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001868:	4ba3      	ldr	r3, [pc, #652]	; (8001af8 <HAL_RCC_OscConfig+0x5e8>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b08      	cmp	r3, #8
 8001872:	d172      	bne.n	800195a <HAL_RCC_OscConfig+0x44a>
 8001874:	4ba0      	ldr	r3, [pc, #640]	; (8001af8 <HAL_RCC_OscConfig+0x5e8>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d16c      	bne.n	800195a <HAL_RCC_OscConfig+0x44a>
 8001880:	2302      	movs	r3, #2
 8001882:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001892:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	095b      	lsrs	r3, r3, #5
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d102      	bne.n	80018b0 <HAL_RCC_OscConfig+0x3a0>
 80018aa:	4b93      	ldr	r3, [pc, #588]	; (8001af8 <HAL_RCC_OscConfig+0x5e8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	e013      	b.n	80018d8 <HAL_RCC_OscConfig+0x3c8>
 80018b0:	2302      	movs	r3, #2
 80018b2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80018ba:	fa93 f3a3 	rbit	r3, r3
 80018be:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80018c2:	2302      	movs	r3, #2
 80018c4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80018c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80018d4:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <HAL_RCC_OscConfig+0x5e8>)
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	2202      	movs	r2, #2
 80018da:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80018de:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80018e2:	fa92 f2a2 	rbit	r2, r2
 80018e6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80018ea:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80018ee:	fab2 f282 	clz	r2, r2
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	f042 0220 	orr.w	r2, r2, #32
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	f002 021f 	and.w	r2, r2, #31
 80018fe:	2101      	movs	r1, #1
 8001900:	fa01 f202 	lsl.w	r2, r1, r2
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00a      	beq.n	8001920 <HAL_RCC_OscConfig+0x410>
 800190a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d002      	beq.n	8001920 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	f000 be2e 	b.w	800257c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001920:	4b75      	ldr	r3, [pc, #468]	; (8001af8 <HAL_RCC_OscConfig+0x5e8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	21f8      	movs	r1, #248	; 0xf8
 8001936:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800193e:	fa91 f1a1 	rbit	r1, r1
 8001942:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001946:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800194a:	fab1 f181 	clz	r1, r1
 800194e:	b2c9      	uxtb	r1, r1
 8001950:	408b      	lsls	r3, r1
 8001952:	4969      	ldr	r1, [pc, #420]	; (8001af8 <HAL_RCC_OscConfig+0x5e8>)
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001958:	e0fd      	b.n	8001b56 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800195a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8088 	beq.w	8001a7c <HAL_RCC_OscConfig+0x56c>
 800196c:	2301      	movs	r3, #1
 800196e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800197e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800198c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	461a      	mov	r2, r3
 8001994:	2301      	movs	r3, #1
 8001996:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff f93e 	bl	8000c18 <HAL_GetTick>
 800199c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a0:	e00a      	b.n	80019b8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff f939 	bl	8000c18 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d902      	bls.n	80019b8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	f000 bde2 	b.w	800257c <HAL_RCC_OscConfig+0x106c>
 80019b8:	2302      	movs	r3, #2
 80019ba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80019ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	095b      	lsrs	r3, r3, #5
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d102      	bne.n	80019e8 <HAL_RCC_OscConfig+0x4d8>
 80019e2:	4b45      	ldr	r3, [pc, #276]	; (8001af8 <HAL_RCC_OscConfig+0x5e8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	e013      	b.n	8001a10 <HAL_RCC_OscConfig+0x500>
 80019e8:	2302      	movs	r3, #2
 80019ea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80019fa:	2302      	movs	r3, #2
 80019fc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a00:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001a0c:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <HAL_RCC_OscConfig+0x5e8>)
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	2202      	movs	r2, #2
 8001a12:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001a16:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a1a:	fa92 f2a2 	rbit	r2, r2
 8001a1e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001a22:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001a26:	fab2 f282 	clz	r2, r2
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	f042 0220 	orr.w	r2, r2, #32
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	f002 021f 	and.w	r2, r2, #31
 8001a36:	2101      	movs	r1, #1
 8001a38:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0af      	beq.n	80019a2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_RCC_OscConfig+0x5e8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	21f8      	movs	r1, #248	; 0xf8
 8001a58:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a60:	fa91 f1a1 	rbit	r1, r1
 8001a64:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001a68:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001a6c:	fab1 f181 	clz	r1, r1
 8001a70:	b2c9      	uxtb	r1, r1
 8001a72:	408b      	lsls	r3, r1
 8001a74:	4920      	ldr	r1, [pc, #128]	; (8001af8 <HAL_RCC_OscConfig+0x5e8>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
 8001a7a:	e06c      	b.n	8001b56 <HAL_RCC_OscConfig+0x646>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001a8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f8b6 	bl	8000c18 <HAL_GetTick>
 8001aac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7ff f8b1 	bl	8000c18 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d902      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	f000 bd5a 	b.w	800257c <HAL_RCC_OscConfig+0x106c>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ade:	fab3 f383 	clz	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	095b      	lsrs	r3, r3, #5
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d104      	bne.n	8001afc <HAL_RCC_OscConfig+0x5ec>
 8001af2:	4b01      	ldr	r3, [pc, #4]	; (8001af8 <HAL_RCC_OscConfig+0x5e8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	e015      	b.n	8001b24 <HAL_RCC_OscConfig+0x614>
 8001af8:	40021000 	.word	0x40021000
 8001afc:	2302      	movs	r3, #2
 8001afe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b0e:	2302      	movs	r3, #2
 8001b10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b14:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001b20:	4bc8      	ldr	r3, [pc, #800]	; (8001e44 <HAL_RCC_OscConfig+0x934>)
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	2202      	movs	r2, #2
 8001b26:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001b2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b2e:	fa92 f2a2 	rbit	r2, r2
 8001b32:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001b36:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001b3a:	fab2 f282 	clz	r2, r2
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	f042 0220 	orr.w	r2, r2, #32
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	f002 021f 	and.w	r2, r2, #31
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ad      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8110 	beq.w	8001d8c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d079      	beq.n	8001c70 <HAL_RCC_OscConfig+0x760>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4bab      	ldr	r3, [pc, #684]	; (8001e48 <HAL_RCC_OscConfig+0x938>)
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f837 	bl	8000c18 <HAL_GetTick>
 8001baa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb0:	f7ff f832 	bl	8000c18 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d902      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f000 bcdb 	b.w	800257c <HAL_RCC_OscConfig+0x106c>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bdc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001be0:	2202      	movs	r2, #2
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	fa93 f2a3 	rbit	r2, r3
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c04:	2202      	movs	r2, #2
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	fa93 f2a3 	rbit	r2, r3
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c1e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c20:	4b88      	ldr	r3, [pc, #544]	; (8001e44 <HAL_RCC_OscConfig+0x934>)
 8001c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	6019      	str	r1, [r3, #0]
 8001c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	fa93 f1a3 	rbit	r1, r3
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c46:	6019      	str	r1, [r3, #0]
  return result;
 8001c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f003 031f 	and.w	r3, r3, #31
 8001c62:	2101      	movs	r1, #1
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0a0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x6a0>
 8001c6e:	e08d      	b.n	8001d8c <HAL_RCC_OscConfig+0x87c>
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c78:	2201      	movs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	fa93 f2a3 	rbit	r2, r3
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c92:	601a      	str	r2, [r3, #0]
  return result;
 8001c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c98:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c9c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b68      	ldr	r3, [pc, #416]	; (8001e48 <HAL_RCC_OscConfig+0x938>)
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	461a      	mov	r2, r3
 8001cae:	2300      	movs	r3, #0
 8001cb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb2:	f7fe ffb1 	bl	8000c18 <HAL_GetTick>
 8001cb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7fe ffac 	bl	8000c18 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d902      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	f000 bc55 	b.w	800257c <HAL_RCC_OscConfig+0x106c>
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cda:	2202      	movs	r2, #2
 8001cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	fa93 f2a3 	rbit	r2, r3
 8001cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001cfe:	2202      	movs	r2, #2
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	fa93 f2a3 	rbit	r2, r3
 8001d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d22:	2202      	movs	r2, #2
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fa93 f2a3 	rbit	r2, r3
 8001d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d38:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3e:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <HAL_RCC_OscConfig+0x934>)
 8001d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d4a:	2102      	movs	r1, #2
 8001d4c:	6019      	str	r1, [r3, #0]
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	fa93 f1a3 	rbit	r1, r3
 8001d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d60:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d64:	6019      	str	r1, [r3, #0]
  return result;
 8001d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fab3 f383 	clz	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	2101      	movs	r1, #1
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d197      	bne.n	8001cbc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 81a1 	beq.w	80020e4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da8:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <HAL_RCC_OscConfig+0x934>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d116      	bne.n	8001de2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db4:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <HAL_RCC_OscConfig+0x934>)
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <HAL_RCC_OscConfig+0x934>)
 8001dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	61d3      	str	r3, [r2, #28]
 8001dc0:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_RCC_OscConfig+0x934>)
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dcc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001dda:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <HAL_RCC_OscConfig+0x93c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d11a      	bne.n	8001e24 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_RCC_OscConfig+0x93c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a16      	ldr	r2, [pc, #88]	; (8001e4c <HAL_RCC_OscConfig+0x93c>)
 8001df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfa:	f7fe ff0d 	bl	8000c18 <HAL_GetTick>
 8001dfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e02:	e009      	b.n	8001e18 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e04:	f7fe ff08 	bl	8000c18 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b64      	cmp	r3, #100	; 0x64
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e3b1      	b.n	800257c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <HAL_RCC_OscConfig+0x93c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0ef      	beq.n	8001e04 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d10d      	bne.n	8001e50 <HAL_RCC_OscConfig+0x940>
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <HAL_RCC_OscConfig+0x934>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4a02      	ldr	r2, [pc, #8]	; (8001e44 <HAL_RCC_OscConfig+0x934>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6213      	str	r3, [r2, #32]
 8001e40:	e03c      	b.n	8001ebc <HAL_RCC_OscConfig+0x9ac>
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	10908120 	.word	0x10908120
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10c      	bne.n	8001e7a <HAL_RCC_OscConfig+0x96a>
 8001e60:	4bc1      	ldr	r3, [pc, #772]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4ac0      	ldr	r2, [pc, #768]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 8001e66:	f023 0301 	bic.w	r3, r3, #1
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	4bbe      	ldr	r3, [pc, #760]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4abd      	ldr	r2, [pc, #756]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 8001e72:	f023 0304 	bic.w	r3, r3, #4
 8001e76:	6213      	str	r3, [r2, #32]
 8001e78:	e020      	b.n	8001ebc <HAL_RCC_OscConfig+0x9ac>
 8001e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b05      	cmp	r3, #5
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x994>
 8001e8a:	4bb7      	ldr	r3, [pc, #732]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4ab6      	ldr	r2, [pc, #728]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	6213      	str	r3, [r2, #32]
 8001e96:	4bb4      	ldr	r3, [pc, #720]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4ab3      	ldr	r2, [pc, #716]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6213      	str	r3, [r2, #32]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0x9ac>
 8001ea4:	4bb0      	ldr	r3, [pc, #704]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4aaf      	ldr	r2, [pc, #700]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 8001eaa:	f023 0301 	bic.w	r3, r3, #1
 8001eae:	6213      	str	r3, [r2, #32]
 8001eb0:	4bad      	ldr	r3, [pc, #692]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4aac      	ldr	r2, [pc, #688]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 8001eb6:	f023 0304 	bic.w	r3, r3, #4
 8001eba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8081 	beq.w	8001fd0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ece:	f7fe fea3 	bl	8000c18 <HAL_GetTick>
 8001ed2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed8:	f7fe fe9e 	bl	8000c18 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e345      	b.n	800257c <HAL_RCC_OscConfig+0x106c>
 8001ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ef8:	2202      	movs	r2, #2
 8001efa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f00:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	fa93 f2a3 	rbit	r2, r3
 8001f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f18:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f24:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	fa93 f2a3 	rbit	r2, r3
 8001f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f32:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f36:	601a      	str	r2, [r3, #0]
  return result;
 8001f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	095b      	lsrs	r3, r3, #5
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d102      	bne.n	8001f5c <HAL_RCC_OscConfig+0xa4c>
 8001f56:	4b84      	ldr	r3, [pc, #528]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	e013      	b.n	8001f84 <HAL_RCC_OscConfig+0xa74>
 8001f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f60:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f64:	2202      	movs	r2, #2
 8001f66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	fa93 f2a3 	rbit	r2, r3
 8001f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	4b79      	ldr	r3, [pc, #484]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f88:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	6011      	str	r1, [r2, #0]
 8001f90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f94:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	fa92 f1a2 	rbit	r1, r2
 8001f9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fa2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001fa6:	6011      	str	r1, [r2, #0]
  return result;
 8001fa8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fac:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	fab2 f282 	clz	r2, r2
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	f002 021f 	and.w	r2, r2, #31
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d084      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x9c8>
 8001fce:	e07f      	b.n	80020d0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd0:	f7fe fe22 	bl	8000c18 <HAL_GetTick>
 8001fd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd8:	e00b      	b.n	8001ff2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f7fe fe1d 	bl	8000c18 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e2c4      	b.n	800257c <HAL_RCC_OscConfig+0x106c>
 8001ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002002:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	fa93 f2a3 	rbit	r2, r3
 800200c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002010:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800201e:	2202      	movs	r2, #2
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002026:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	fa93 f2a3 	rbit	r2, r3
 8002030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002034:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002038:	601a      	str	r2, [r3, #0]
  return result;
 800203a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002042:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f043 0302 	orr.w	r3, r3, #2
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d102      	bne.n	800205e <HAL_RCC_OscConfig+0xb4e>
 8002058:	4b43      	ldr	r3, [pc, #268]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	e013      	b.n	8002086 <HAL_RCC_OscConfig+0xb76>
 800205e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002062:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002066:	2202      	movs	r2, #2
 8002068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fa93 f2a3 	rbit	r2, r3
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	4b39      	ldr	r3, [pc, #228]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800208a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800208e:	2102      	movs	r1, #2
 8002090:	6011      	str	r1, [r2, #0]
 8002092:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002096:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	fa92 f1a2 	rbit	r1, r2
 80020a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80020a8:	6011      	str	r1, [r2, #0]
  return result;
 80020aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020ae:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	fab2 f282 	clz	r2, r2
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	f002 021f 	and.w	r2, r2, #31
 80020c4:	2101      	movs	r1, #1
 80020c6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d184      	bne.n	8001fda <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020d0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d105      	bne.n	80020e4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d8:	4b23      	ldr	r3, [pc, #140]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	4a22      	ldr	r2, [pc, #136]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 80020de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 8242 	beq.w	800257a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020f6:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <HAL_RCC_OscConfig+0xc58>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b08      	cmp	r3, #8
 8002100:	f000 8213 	beq.w	800252a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b02      	cmp	r3, #2
 8002112:	f040 8162 	bne.w	80023da <HAL_RCC_OscConfig+0xeca>
 8002116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800211e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002128:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	fa93 f2a3 	rbit	r2, r3
 8002132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002136:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800213a:	601a      	str	r2, [r3, #0]
  return result;
 800213c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002140:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002144:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002150:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	461a      	mov	r2, r3
 8002158:	2300      	movs	r3, #0
 800215a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe fd5c 	bl	8000c18 <HAL_GetTick>
 8002160:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002164:	e00c      	b.n	8002180 <HAL_RCC_OscConfig+0xc70>
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe fd54 	bl	8000c18 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e1fd      	b.n	800257c <HAL_RCC_OscConfig+0x106c>
 8002180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002184:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002188:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800218c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002192:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	fa93 f2a3 	rbit	r2, r3
 800219c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80021a4:	601a      	str	r2, [r3, #0]
  return result;
 80021a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021aa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80021ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b0:	fab3 f383 	clz	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d102      	bne.n	80021ca <HAL_RCC_OscConfig+0xcba>
 80021c4:	4bb0      	ldr	r3, [pc, #704]	; (8002488 <HAL_RCC_OscConfig+0xf78>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	e027      	b.n	800221a <HAL_RCC_OscConfig+0xd0a>
 80021ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ce:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80021d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021dc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	fa93 f2a3 	rbit	r2, r3
 80021e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ea:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80021f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002202:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f2a3 	rbit	r2, r3
 800220c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002210:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	4b9c      	ldr	r3, [pc, #624]	; (8002488 <HAL_RCC_OscConfig+0xf78>)
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800221e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002222:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002226:	6011      	str	r1, [r2, #0]
 8002228:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800222c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	fa92 f1a2 	rbit	r1, r2
 8002236:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800223a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800223e:	6011      	str	r1, [r2, #0]
  return result;
 8002240:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002244:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	fab2 f282 	clz	r2, r2
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	f042 0220 	orr.w	r2, r2, #32
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	f002 021f 	and.w	r2, r2, #31
 800225a:	2101      	movs	r1, #1
 800225c:	fa01 f202 	lsl.w	r2, r1, r2
 8002260:	4013      	ands	r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d182      	bne.n	800216c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002266:	4b88      	ldr	r3, [pc, #544]	; (8002488 <HAL_RCC_OscConfig+0xf78>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	430b      	orrs	r3, r1
 8002288:	497f      	ldr	r1, [pc, #508]	; (8002488 <HAL_RCC_OscConfig+0xf78>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
 800228e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002292:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002296:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800229a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	fa93 f2a3 	rbit	r2, r3
 80022aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80022b2:	601a      	str	r2, [r3, #0]
  return result;
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80022bc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	461a      	mov	r2, r3
 80022d0:	2301      	movs	r3, #1
 80022d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe fca0 	bl	8000c18 <HAL_GetTick>
 80022d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022dc:	e009      	b.n	80022f2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022de:	f7fe fc9b 	bl	8000c18 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e144      	b.n	800257c <HAL_RCC_OscConfig+0x106c>
 80022f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80022fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002304:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fa93 f2a3 	rbit	r2, r3
 800230e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002312:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002316:	601a      	str	r2, [r3, #0]
  return result;
 8002318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002320:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d102      	bne.n	800233c <HAL_RCC_OscConfig+0xe2c>
 8002336:	4b54      	ldr	r3, [pc, #336]	; (8002488 <HAL_RCC_OscConfig+0xf78>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	e027      	b.n	800238c <HAL_RCC_OscConfig+0xe7c>
 800233c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002340:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002344:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002348:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	fa93 f2a3 	rbit	r2, r3
 8002358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800236a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002374:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa93 f2a3 	rbit	r2, r3
 800237e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002382:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <HAL_RCC_OscConfig+0xf78>)
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002390:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002394:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002398:	6011      	str	r1, [r2, #0]
 800239a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800239e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	fa92 f1a2 	rbit	r1, r2
 80023a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ac:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80023b0:	6011      	str	r1, [r2, #0]
  return result;
 80023b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023b6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	fab2 f282 	clz	r2, r2
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	f042 0220 	orr.w	r2, r2, #32
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f002 021f 	and.w	r2, r2, #31
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f202 	lsl.w	r2, r1, r2
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d082      	beq.n	80022de <HAL_RCC_OscConfig+0xdce>
 80023d8:	e0cf      	b.n	800257a <HAL_RCC_OscConfig+0x106a>
 80023da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023de:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80023e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ec:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	fa93 f2a3 	rbit	r2, r3
 80023f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80023fe:	601a      	str	r2, [r3, #0]
  return result;
 8002400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002404:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002408:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002414:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	461a      	mov	r2, r3
 800241c:	2300      	movs	r3, #0
 800241e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7fe fbfa 	bl	8000c18 <HAL_GetTick>
 8002424:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002428:	e009      	b.n	800243e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242a:	f7fe fbf5 	bl	8000c18 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e09e      	b.n	800257c <HAL_RCC_OscConfig+0x106c>
 800243e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002442:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002446:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800244a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002450:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	fa93 f2a3 	rbit	r2, r3
 800245a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002462:	601a      	str	r2, [r3, #0]
  return result;
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800246c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	095b      	lsrs	r3, r3, #5
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d104      	bne.n	800248c <HAL_RCC_OscConfig+0xf7c>
 8002482:	4b01      	ldr	r3, [pc, #4]	; (8002488 <HAL_RCC_OscConfig+0xf78>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	e029      	b.n	80024dc <HAL_RCC_OscConfig+0xfcc>
 8002488:	40021000 	.word	0x40021000
 800248c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002490:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002494:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002498:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	fa93 f2a3 	rbit	r2, r3
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80024ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	fa93 f2a3 	rbit	r2, r3
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <HAL_RCC_OscConfig+0x1078>)
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024e0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80024e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024e8:	6011      	str	r1, [r2, #0]
 80024ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ee:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	fa92 f1a2 	rbit	r1, r2
 80024f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024fc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002500:	6011      	str	r1, [r2, #0]
  return result;
 8002502:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002506:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	fab2 f282 	clz	r2, r2
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	f042 0220 	orr.w	r2, r2, #32
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f002 021f 	and.w	r2, r2, #31
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d180      	bne.n	800242a <HAL_RCC_OscConfig+0xf1a>
 8002528:	e027      	b.n	800257a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800252a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e01e      	b.n	800257c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_RCC_OscConfig+0x1078>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002546:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800254a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800254e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002552:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	429a      	cmp	r2, r3
 800255c:	d10b      	bne.n	8002576 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800255e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002562:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002572:	429a      	cmp	r2, r3
 8002574:	d001      	beq.n	800257a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000

0800258c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b09e      	sub	sp, #120	; 0x78
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e162      	b.n	800286a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a4:	4b90      	ldr	r3, [pc, #576]	; (80027e8 <HAL_RCC_ClockConfig+0x25c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d910      	bls.n	80025d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b8d      	ldr	r3, [pc, #564]	; (80027e8 <HAL_RCC_ClockConfig+0x25c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 0207 	bic.w	r2, r3, #7
 80025ba:	498b      	ldr	r1, [pc, #556]	; (80027e8 <HAL_RCC_ClockConfig+0x25c>)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b89      	ldr	r3, [pc, #548]	; (80027e8 <HAL_RCC_ClockConfig+0x25c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e14a      	b.n	800286a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e0:	4b82      	ldr	r3, [pc, #520]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	497f      	ldr	r1, [pc, #508]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80dc 	beq.w	80027b8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d13c      	bne.n	8002682 <HAL_RCC_ClockConfig+0xf6>
 8002608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800260c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d102      	bne.n	8002632 <HAL_RCC_ClockConfig+0xa6>
 800262c:	4b6f      	ldr	r3, [pc, #444]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	e00f      	b.n	8002652 <HAL_RCC_ClockConfig+0xc6>
 8002632:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002636:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	667b      	str	r3, [r7, #100]	; 0x64
 8002640:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002644:	663b      	str	r3, [r7, #96]	; 0x60
 8002646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800264e:	4b67      	ldr	r3, [pc, #412]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002656:	65ba      	str	r2, [r7, #88]	; 0x58
 8002658:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800265a:	fa92 f2a2 	rbit	r2, r2
 800265e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002660:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002662:	fab2 f282 	clz	r2, r2
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	f042 0220 	orr.w	r2, r2, #32
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	f002 021f 	and.w	r2, r2, #31
 8002672:	2101      	movs	r1, #1
 8002674:	fa01 f202 	lsl.w	r2, r1, r2
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d17b      	bne.n	8002776 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e0f3      	b.n	800286a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d13c      	bne.n	8002704 <HAL_RCC_ClockConfig+0x178>
 800268a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800268e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d102      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x128>
 80026ae:	4b4f      	ldr	r3, [pc, #316]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	e00f      	b.n	80026d4 <HAL_RCC_ClockConfig+0x148>
 80026b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	647b      	str	r3, [r7, #68]	; 0x44
 80026c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c6:	643b      	str	r3, [r7, #64]	; 0x40
 80026c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026d0:	4b46      	ldr	r3, [pc, #280]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026d8:	63ba      	str	r2, [r7, #56]	; 0x38
 80026da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026dc:	fa92 f2a2 	rbit	r2, r2
 80026e0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026e4:	fab2 f282 	clz	r2, r2
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	f042 0220 	orr.w	r2, r2, #32
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	f002 021f 	and.w	r2, r2, #31
 80026f4:	2101      	movs	r1, #1
 80026f6:	fa01 f202 	lsl.w	r2, r1, r2
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d13a      	bne.n	8002776 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0b2      	b.n	800286a <HAL_RCC_ClockConfig+0x2de>
 8002704:	2302      	movs	r3, #2
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b01      	cmp	r3, #1
 8002724:	d102      	bne.n	800272c <HAL_RCC_ClockConfig+0x1a0>
 8002726:	4b31      	ldr	r3, [pc, #196]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	e00d      	b.n	8002748 <HAL_RCC_ClockConfig+0x1bc>
 800272c:	2302      	movs	r3, #2
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
 8002738:	2302      	movs	r3, #2
 800273a:	623b      	str	r3, [r7, #32]
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	61fb      	str	r3, [r7, #28]
 8002744:	4b29      	ldr	r3, [pc, #164]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	2202      	movs	r2, #2
 800274a:	61ba      	str	r2, [r7, #24]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	fa92 f2a2 	rbit	r2, r2
 8002752:	617a      	str	r2, [r7, #20]
  return result;
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	fab2 f282 	clz	r2, r2
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	f042 0220 	orr.w	r2, r2, #32
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	f002 021f 	and.w	r2, r2, #31
 8002766:	2101      	movs	r1, #1
 8002768:	fa01 f202 	lsl.w	r2, r1, r2
 800276c:	4013      	ands	r3, r2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e079      	b.n	800286a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002776:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f023 0203 	bic.w	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	491a      	ldr	r1, [pc, #104]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002788:	f7fe fa46 	bl	8000c18 <HAL_GetTick>
 800278c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002790:	f7fe fa42 	bl	8000c18 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	; 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e061      	b.n	800286a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 020c 	and.w	r2, r3, #12
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d1eb      	bne.n	8002790 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_RCC_ClockConfig+0x25c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d214      	bcs.n	80027f0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <HAL_RCC_ClockConfig+0x25c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 0207 	bic.w	r2, r3, #7
 80027ce:	4906      	ldr	r1, [pc, #24]	; (80027e8 <HAL_RCC_ClockConfig+0x25c>)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <HAL_RCC_ClockConfig+0x25c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e040      	b.n	800286a <HAL_RCC_ClockConfig+0x2de>
 80027e8:	40022000 	.word	0x40022000
 80027ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027fc:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <HAL_RCC_ClockConfig+0x2e8>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	491a      	ldr	r1, [pc, #104]	; (8002874 <HAL_RCC_ClockConfig+0x2e8>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281a:	4b16      	ldr	r3, [pc, #88]	; (8002874 <HAL_RCC_ClockConfig+0x2e8>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4912      	ldr	r1, [pc, #72]	; (8002874 <HAL_RCC_ClockConfig+0x2e8>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800282e:	f000 f829 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 8002832:	4601      	mov	r1, r0
 8002834:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <HAL_RCC_ClockConfig+0x2e8>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800283c:	22f0      	movs	r2, #240	; 0xf0
 800283e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	fa92 f2a2 	rbit	r2, r2
 8002846:	60fa      	str	r2, [r7, #12]
  return result;
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	fab2 f282 	clz	r2, r2
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	40d3      	lsrs	r3, r2
 8002852:	4a09      	ldr	r2, [pc, #36]	; (8002878 <HAL_RCC_ClockConfig+0x2ec>)
 8002854:	5cd3      	ldrb	r3, [r2, r3]
 8002856:	fa21 f303 	lsr.w	r3, r1, r3
 800285a:	4a08      	ldr	r2, [pc, #32]	; (800287c <HAL_RCC_ClockConfig+0x2f0>)
 800285c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_RCC_ClockConfig+0x2f4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe f994 	bl	8000b90 <HAL_InitTick>
  
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3778      	adds	r7, #120	; 0x78
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	0800406c 	.word	0x0800406c
 800287c:	20000000 	.word	0x20000000
 8002880:	20000004 	.word	0x20000004

08002884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002884:	b480      	push	{r7}
 8002886:	b08b      	sub	sp, #44	; 0x2c
 8002888:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800289e:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d002      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x30>
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d003      	beq.n	80028ba <HAL_RCC_GetSysClockFreq+0x36>
 80028b2:	e03c      	b.n	800292e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028b6:	623b      	str	r3, [r7, #32]
      break;
 80028b8:	e03c      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80028c4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	fa92 f2a2 	rbit	r2, r2
 80028cc:	607a      	str	r2, [r7, #4]
  return result;
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	fab2 f282 	clz	r2, r2
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	40d3      	lsrs	r3, r2
 80028d8:	4a1c      	ldr	r2, [pc, #112]	; (800294c <HAL_RCC_GetSysClockFreq+0xc8>)
 80028da:	5cd3      	ldrb	r3, [r2, r3]
 80028dc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80028de:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	220f      	movs	r2, #15
 80028e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	fa92 f2a2 	rbit	r2, r2
 80028f0:	60fa      	str	r2, [r7, #12]
  return result;
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	fab2 f282 	clz	r2, r2
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	40d3      	lsrs	r3, r2
 80028fc:	4a14      	ldr	r2, [pc, #80]	; (8002950 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028fe:	5cd3      	ldrb	r3, [r2, r3]
 8002900:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800290c:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <HAL_RCC_GetSysClockFreq+0xc4>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	fbb2 f2f3 	udiv	r2, r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
 800291c:	e004      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	623b      	str	r3, [r7, #32]
      break;
 800292c:	e002      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002930:	623b      	str	r3, [r7, #32]
      break;
 8002932:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002934:	6a3b      	ldr	r3, [r7, #32]
}
 8002936:	4618      	mov	r0, r3
 8002938:	372c      	adds	r7, #44	; 0x2c
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
 8002948:	007a1200 	.word	0x007a1200
 800294c:	0800407c 	.word	0x0800407c
 8002950:	0800408c 	.word	0x0800408c
 8002954:	003d0900 	.word	0x003d0900

08002958 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b092      	sub	sp, #72	; 0x48
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002968:	2300      	movs	r3, #0
 800296a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 80d4 	beq.w	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297c:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10e      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002988:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	4a4a      	ldr	r2, [pc, #296]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002992:	61d3      	str	r3, [r2, #28]
 8002994:	4b48      	ldr	r3, [pc, #288]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a6:	4b45      	ldr	r3, [pc, #276]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d118      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b2:	4b42      	ldr	r3, [pc, #264]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a41      	ldr	r2, [pc, #260]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029be:	f7fe f92b 	bl	8000c18 <HAL_GetTick>
 80029c2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	e008      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c6:	f7fe f927 	bl	8000c18 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b64      	cmp	r3, #100	; 0x64
 80029d2:	d901      	bls.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e169      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d8:	4b38      	ldr	r3, [pc, #224]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029e4:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8084 	beq.w	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d07c      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a04:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2301      	movs	r3, #1
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	461a      	mov	r2, r3
 8002a52:	2300      	movs	r3, #0
 8002a54:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a56:	4a18      	ldr	r2, [pc, #96]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d04b      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fe f8d7 	bl	8000c18 <HAL_GetTick>
 8002a6a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6e:	f7fe f8d3 	bl	8000c18 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e113      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002a84:	2302      	movs	r3, #2
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a90:	2302      	movs	r3, #2
 8002a92:	623b      	str	r3, [r7, #32]
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	61fb      	str	r3, [r7, #28]
  return result;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d108      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ab2:	4b01      	ldr	r3, [pc, #4]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	e00d      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40007000 	.word	0x40007000
 8002ac0:	10908100 	.word	0x10908100
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	4b78      	ldr	r3, [pc, #480]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	613a      	str	r2, [r7, #16]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	fa92 f2a2 	rbit	r2, r2
 8002ade:	60fa      	str	r2, [r7, #12]
  return result;
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	fab2 f282 	clz	r2, r2
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f002 021f 	and.w	r2, r2, #31
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0b7      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002afe:	4b6d      	ldr	r3, [pc, #436]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	496a      	ldr	r1, [pc, #424]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d105      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b18:	4b66      	ldr	r3, [pc, #408]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	4a65      	ldr	r2, [pc, #404]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b30:	4b60      	ldr	r3, [pc, #384]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	f023 0203 	bic.w	r2, r3, #3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	495d      	ldr	r1, [pc, #372]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b4e:	4b59      	ldr	r3, [pc, #356]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4956      	ldr	r1, [pc, #344]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b6c:	4b51      	ldr	r3, [pc, #324]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	494e      	ldr	r1, [pc, #312]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b8a:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f023 0210 	bic.w	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	4947      	ldr	r1, [pc, #284]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ba8:	4b42      	ldr	r3, [pc, #264]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	493f      	ldr	r1, [pc, #252]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f023 0220 	bic.w	r2, r3, #32
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	4938      	ldr	r1, [pc, #224]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002be4:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	4930      	ldr	r1, [pc, #192]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c02:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	4929      	ldr	r1, [pc, #164]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c20:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	4921      	ldr	r1, [pc, #132]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	491a      	ldr	r1, [pc, #104]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c5c:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	4912      	ldr	r1, [pc, #72]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	490b      	ldr	r1, [pc, #44]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca4:	4903      	ldr	r1, [pc, #12]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3748      	adds	r7, #72	; 0x48
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e09d      	b.n	8002e06 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d108      	bne.n	8002ce4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cda:	d009      	beq.n	8002cf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	61da      	str	r2, [r3, #28]
 8002ce2:	e005      	b.n	8002cf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fd fde6 	bl	80008dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d30:	d902      	bls.n	8002d38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	e002      	b.n	8002d3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002d46:	d007      	beq.n	8002d58 <HAL_SPI_Init+0xa0>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d50:	d002      	beq.n	8002d58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9a:	ea42 0103 	orr.w	r1, r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	0c1b      	lsrs	r3, r3, #16
 8002db4:	f003 0204 	and.w	r2, r3, #4
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002dd4:	ea42 0103 	orr.w	r1, r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e049      	b.n	8002eb4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d106      	bne.n	8002e3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7fd fd93 	bl	8000960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	f000 fb75 	bl	800353c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e049      	b.n	8002f62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f841 	bl	8002f6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4610      	mov	r0, r2
 8002efc:	f000 fb1e 	bl	800353c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <HAL_TIM_PWM_Start+0x24>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	bf14      	ite	ne
 8002f9c:	2301      	movne	r3, #1
 8002f9e:	2300      	moveq	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	e03c      	b.n	800301e <HAL_TIM_PWM_Start+0x9e>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d109      	bne.n	8002fbe <HAL_TIM_PWM_Start+0x3e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	bf14      	ite	ne
 8002fb6:	2301      	movne	r3, #1
 8002fb8:	2300      	moveq	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	e02f      	b.n	800301e <HAL_TIM_PWM_Start+0x9e>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d109      	bne.n	8002fd8 <HAL_TIM_PWM_Start+0x58>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	bf14      	ite	ne
 8002fd0:	2301      	movne	r3, #1
 8002fd2:	2300      	moveq	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	e022      	b.n	800301e <HAL_TIM_PWM_Start+0x9e>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b0c      	cmp	r3, #12
 8002fdc:	d109      	bne.n	8002ff2 <HAL_TIM_PWM_Start+0x72>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	bf14      	ite	ne
 8002fea:	2301      	movne	r3, #1
 8002fec:	2300      	moveq	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	e015      	b.n	800301e <HAL_TIM_PWM_Start+0x9e>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d109      	bne.n	800300c <HAL_TIM_PWM_Start+0x8c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	bf14      	ite	ne
 8003004:	2301      	movne	r3, #1
 8003006:	2300      	moveq	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e008      	b.n	800301e <HAL_TIM_PWM_Start+0x9e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	bf14      	ite	ne
 8003018:	2301      	movne	r3, #1
 800301a:	2300      	moveq	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e097      	b.n	8003156 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d104      	bne.n	8003036 <HAL_TIM_PWM_Start+0xb6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003034:	e023      	b.n	800307e <HAL_TIM_PWM_Start+0xfe>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b04      	cmp	r3, #4
 800303a:	d104      	bne.n	8003046 <HAL_TIM_PWM_Start+0xc6>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003044:	e01b      	b.n	800307e <HAL_TIM_PWM_Start+0xfe>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b08      	cmp	r3, #8
 800304a:	d104      	bne.n	8003056 <HAL_TIM_PWM_Start+0xd6>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003054:	e013      	b.n	800307e <HAL_TIM_PWM_Start+0xfe>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b0c      	cmp	r3, #12
 800305a:	d104      	bne.n	8003066 <HAL_TIM_PWM_Start+0xe6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003064:	e00b      	b.n	800307e <HAL_TIM_PWM_Start+0xfe>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b10      	cmp	r3, #16
 800306a:	d104      	bne.n	8003076 <HAL_TIM_PWM_Start+0xf6>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003074:	e003      	b.n	800307e <HAL_TIM_PWM_Start+0xfe>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2202      	movs	r2, #2
 800307a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2201      	movs	r2, #1
 8003084:	6839      	ldr	r1, [r7, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fe58 	bl	8003d3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a33      	ldr	r2, [pc, #204]	; (8003160 <HAL_TIM_PWM_Start+0x1e0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_TIM_PWM_Start+0x13e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a32      	ldr	r2, [pc, #200]	; (8003164 <HAL_TIM_PWM_Start+0x1e4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00e      	beq.n	80030be <HAL_TIM_PWM_Start+0x13e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a30      	ldr	r2, [pc, #192]	; (8003168 <HAL_TIM_PWM_Start+0x1e8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d009      	beq.n	80030be <HAL_TIM_PWM_Start+0x13e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a2f      	ldr	r2, [pc, #188]	; (800316c <HAL_TIM_PWM_Start+0x1ec>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d004      	beq.n	80030be <HAL_TIM_PWM_Start+0x13e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a2d      	ldr	r2, [pc, #180]	; (8003170 <HAL_TIM_PWM_Start+0x1f0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_PWM_Start+0x142>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_TIM_PWM_Start+0x144>
 80030c2:	2300      	movs	r3, #0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a20      	ldr	r2, [pc, #128]	; (8003160 <HAL_TIM_PWM_Start+0x1e0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d018      	beq.n	8003114 <HAL_TIM_PWM_Start+0x194>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ea:	d013      	beq.n	8003114 <HAL_TIM_PWM_Start+0x194>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a20      	ldr	r2, [pc, #128]	; (8003174 <HAL_TIM_PWM_Start+0x1f4>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00e      	beq.n	8003114 <HAL_TIM_PWM_Start+0x194>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1f      	ldr	r2, [pc, #124]	; (8003178 <HAL_TIM_PWM_Start+0x1f8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d009      	beq.n	8003114 <HAL_TIM_PWM_Start+0x194>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a17      	ldr	r2, [pc, #92]	; (8003164 <HAL_TIM_PWM_Start+0x1e4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d004      	beq.n	8003114 <HAL_TIM_PWM_Start+0x194>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a16      	ldr	r2, [pc, #88]	; (8003168 <HAL_TIM_PWM_Start+0x1e8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d115      	bne.n	8003140 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	4b18      	ldr	r3, [pc, #96]	; (800317c <HAL_TIM_PWM_Start+0x1fc>)
 800311c:	4013      	ands	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b06      	cmp	r3, #6
 8003124:	d015      	beq.n	8003152 <HAL_TIM_PWM_Start+0x1d2>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312c:	d011      	beq.n	8003152 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0201 	orr.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313e:	e008      	b.n	8003152 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e000      	b.n	8003154 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003152:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40013400 	.word	0x40013400
 8003168:	40014000 	.word	0x40014000
 800316c:	40014400 	.word	0x40014400
 8003170:	40014800 	.word	0x40014800
 8003174:	40000400 	.word	0x40000400
 8003178:	40000800 	.word	0x40000800
 800317c:	00010007 	.word	0x00010007

08003180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800319a:	2302      	movs	r3, #2
 800319c:	e0ff      	b.n	800339e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b14      	cmp	r3, #20
 80031aa:	f200 80f0 	bhi.w	800338e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	08003209 	.word	0x08003209
 80031b8:	0800338f 	.word	0x0800338f
 80031bc:	0800338f 	.word	0x0800338f
 80031c0:	0800338f 	.word	0x0800338f
 80031c4:	08003249 	.word	0x08003249
 80031c8:	0800338f 	.word	0x0800338f
 80031cc:	0800338f 	.word	0x0800338f
 80031d0:	0800338f 	.word	0x0800338f
 80031d4:	0800328b 	.word	0x0800328b
 80031d8:	0800338f 	.word	0x0800338f
 80031dc:	0800338f 	.word	0x0800338f
 80031e0:	0800338f 	.word	0x0800338f
 80031e4:	080032cb 	.word	0x080032cb
 80031e8:	0800338f 	.word	0x0800338f
 80031ec:	0800338f 	.word	0x0800338f
 80031f0:	0800338f 	.word	0x0800338f
 80031f4:	0800330d 	.word	0x0800330d
 80031f8:	0800338f 	.word	0x0800338f
 80031fc:	0800338f 	.word	0x0800338f
 8003200:	0800338f 	.word	0x0800338f
 8003204:	0800334d 	.word	0x0800334d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fa24 	bl	800365c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0208 	orr.w	r2, r2, #8
 8003222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0204 	bic.w	r2, r2, #4
 8003232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6999      	ldr	r1, [r3, #24]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	619a      	str	r2, [r3, #24]
      break;
 8003246:	e0a5      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fa94 	bl	800377c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6999      	ldr	r1, [r3, #24]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	021a      	lsls	r2, r3, #8
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	619a      	str	r2, [r3, #24]
      break;
 8003288:	e084      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fafd 	bl	8003890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0208 	orr.w	r2, r2, #8
 80032a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0204 	bic.w	r2, r2, #4
 80032b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69d9      	ldr	r1, [r3, #28]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	61da      	str	r2, [r3, #28]
      break;
 80032c8:	e064      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fb65 	bl	80039a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69d9      	ldr	r1, [r3, #28]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	021a      	lsls	r2, r3, #8
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	61da      	str	r2, [r3, #28]
      break;
 800330a:	e043      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fbae 	bl	8003a74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0208 	orr.w	r2, r2, #8
 8003326:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0204 	bic.w	r2, r2, #4
 8003336:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800334a:	e023      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fbf2 	bl	8003b3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003366:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	021a      	lsls	r2, r3, #8
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800338c:	e002      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	75fb      	strb	r3, [r7, #23]
      break;
 8003392:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800339c:	7dfb      	ldrb	r3, [r7, #23]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop

080033a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_TIM_ConfigClockSource+0x1c>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e0b6      	b.n	8003532 <HAL_TIM_ConfigClockSource+0x18a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003400:	d03e      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0xd8>
 8003402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003406:	f200 8087 	bhi.w	8003518 <HAL_TIM_ConfigClockSource+0x170>
 800340a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340e:	f000 8086 	beq.w	800351e <HAL_TIM_ConfigClockSource+0x176>
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003416:	d87f      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003418:	2b70      	cmp	r3, #112	; 0x70
 800341a:	d01a      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0xaa>
 800341c:	2b70      	cmp	r3, #112	; 0x70
 800341e:	d87b      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003420:	2b60      	cmp	r3, #96	; 0x60
 8003422:	d050      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x11e>
 8003424:	2b60      	cmp	r3, #96	; 0x60
 8003426:	d877      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003428:	2b50      	cmp	r3, #80	; 0x50
 800342a:	d03c      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0xfe>
 800342c:	2b50      	cmp	r3, #80	; 0x50
 800342e:	d873      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003430:	2b40      	cmp	r3, #64	; 0x40
 8003432:	d058      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0x13e>
 8003434:	2b40      	cmp	r3, #64	; 0x40
 8003436:	d86f      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003438:	2b30      	cmp	r3, #48	; 0x30
 800343a:	d064      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15e>
 800343c:	2b30      	cmp	r3, #48	; 0x30
 800343e:	d86b      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003440:	2b20      	cmp	r3, #32
 8003442:	d060      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15e>
 8003444:	2b20      	cmp	r3, #32
 8003446:	d867      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d05c      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15e>
 800344c:	2b10      	cmp	r3, #16
 800344e:	d05a      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15e>
 8003450:	e062      	b.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6899      	ldr	r1, [r3, #8]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f000 fc4b 	bl	8003cfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003474:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	609a      	str	r2, [r3, #8]
      break;
 800347e:	e04f      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6899      	ldr	r1, [r3, #8]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f000 fc34 	bl	8003cfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a2:	609a      	str	r2, [r3, #8]
      break;
 80034a4:	e03c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	461a      	mov	r2, r3
 80034b4:	f000 fba8 	bl	8003c08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2150      	movs	r1, #80	; 0x50
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fc01 	bl	8003cc6 <TIM_ITRx_SetConfig>
      break;
 80034c4:	e02c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6859      	ldr	r1, [r3, #4]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	461a      	mov	r2, r3
 80034d4:	f000 fbc7 	bl	8003c66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2160      	movs	r1, #96	; 0x60
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fbf1 	bl	8003cc6 <TIM_ITRx_SetConfig>
      break;
 80034e4:	e01c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6859      	ldr	r1, [r3, #4]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	461a      	mov	r2, r3
 80034f4:	f000 fb88 	bl	8003c08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2140      	movs	r1, #64	; 0x40
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fbe1 	bl	8003cc6 <TIM_ITRx_SetConfig>
      break;
 8003504:	e00c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f000 fbd8 	bl	8003cc6 <TIM_ITRx_SetConfig>
      break;
 8003516:	e003      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      break;
 800351c:	e000      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800351e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003530:	7bfb      	ldrb	r3, [r7, #15]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a3c      	ldr	r2, [pc, #240]	; (8003640 <TIM_Base_SetConfig+0x104>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00f      	beq.n	8003574 <TIM_Base_SetConfig+0x38>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355a:	d00b      	beq.n	8003574 <TIM_Base_SetConfig+0x38>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a39      	ldr	r2, [pc, #228]	; (8003644 <TIM_Base_SetConfig+0x108>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d007      	beq.n	8003574 <TIM_Base_SetConfig+0x38>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a38      	ldr	r2, [pc, #224]	; (8003648 <TIM_Base_SetConfig+0x10c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <TIM_Base_SetConfig+0x38>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a37      	ldr	r2, [pc, #220]	; (800364c <TIM_Base_SetConfig+0x110>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d108      	bne.n	8003586 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2d      	ldr	r2, [pc, #180]	; (8003640 <TIM_Base_SetConfig+0x104>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01b      	beq.n	80035c6 <TIM_Base_SetConfig+0x8a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003594:	d017      	beq.n	80035c6 <TIM_Base_SetConfig+0x8a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2a      	ldr	r2, [pc, #168]	; (8003644 <TIM_Base_SetConfig+0x108>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <TIM_Base_SetConfig+0x8a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a29      	ldr	r2, [pc, #164]	; (8003648 <TIM_Base_SetConfig+0x10c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00f      	beq.n	80035c6 <TIM_Base_SetConfig+0x8a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a28      	ldr	r2, [pc, #160]	; (800364c <TIM_Base_SetConfig+0x110>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00b      	beq.n	80035c6 <TIM_Base_SetConfig+0x8a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a27      	ldr	r2, [pc, #156]	; (8003650 <TIM_Base_SetConfig+0x114>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <TIM_Base_SetConfig+0x8a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a26      	ldr	r2, [pc, #152]	; (8003654 <TIM_Base_SetConfig+0x118>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <TIM_Base_SetConfig+0x8a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a25      	ldr	r2, [pc, #148]	; (8003658 <TIM_Base_SetConfig+0x11c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d108      	bne.n	80035d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a10      	ldr	r2, [pc, #64]	; (8003640 <TIM_Base_SetConfig+0x104>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00f      	beq.n	8003624 <TIM_Base_SetConfig+0xe8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a11      	ldr	r2, [pc, #68]	; (800364c <TIM_Base_SetConfig+0x110>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00b      	beq.n	8003624 <TIM_Base_SetConfig+0xe8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a10      	ldr	r2, [pc, #64]	; (8003650 <TIM_Base_SetConfig+0x114>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d007      	beq.n	8003624 <TIM_Base_SetConfig+0xe8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a0f      	ldr	r2, [pc, #60]	; (8003654 <TIM_Base_SetConfig+0x118>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d003      	beq.n	8003624 <TIM_Base_SetConfig+0xe8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a0e      	ldr	r2, [pc, #56]	; (8003658 <TIM_Base_SetConfig+0x11c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d103      	bne.n	800362c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	615a      	str	r2, [r3, #20]
}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40012c00 	.word	0x40012c00
 8003644:	40000400 	.word	0x40000400
 8003648:	40000800 	.word	0x40000800
 800364c:	40013400 	.word	0x40013400
 8003650:	40014000 	.word	0x40014000
 8003654:	40014400 	.word	0x40014400
 8003658:	40014800 	.word	0x40014800

0800365c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f023 0201 	bic.w	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0303 	bic.w	r3, r3, #3
 8003696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f023 0302 	bic.w	r3, r3, #2
 80036a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a2c      	ldr	r2, [pc, #176]	; (8003768 <TIM_OC1_SetConfig+0x10c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00f      	beq.n	80036dc <TIM_OC1_SetConfig+0x80>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a2b      	ldr	r2, [pc, #172]	; (800376c <TIM_OC1_SetConfig+0x110>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00b      	beq.n	80036dc <TIM_OC1_SetConfig+0x80>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a2a      	ldr	r2, [pc, #168]	; (8003770 <TIM_OC1_SetConfig+0x114>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d007      	beq.n	80036dc <TIM_OC1_SetConfig+0x80>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a29      	ldr	r2, [pc, #164]	; (8003774 <TIM_OC1_SetConfig+0x118>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d003      	beq.n	80036dc <TIM_OC1_SetConfig+0x80>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a28      	ldr	r2, [pc, #160]	; (8003778 <TIM_OC1_SetConfig+0x11c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d10c      	bne.n	80036f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f023 0308 	bic.w	r3, r3, #8
 80036e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f023 0304 	bic.w	r3, r3, #4
 80036f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a1b      	ldr	r2, [pc, #108]	; (8003768 <TIM_OC1_SetConfig+0x10c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00f      	beq.n	800371e <TIM_OC1_SetConfig+0xc2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a1a      	ldr	r2, [pc, #104]	; (800376c <TIM_OC1_SetConfig+0x110>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00b      	beq.n	800371e <TIM_OC1_SetConfig+0xc2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a19      	ldr	r2, [pc, #100]	; (8003770 <TIM_OC1_SetConfig+0x114>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <TIM_OC1_SetConfig+0xc2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a18      	ldr	r2, [pc, #96]	; (8003774 <TIM_OC1_SetConfig+0x118>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d003      	beq.n	800371e <TIM_OC1_SetConfig+0xc2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a17      	ldr	r2, [pc, #92]	; (8003778 <TIM_OC1_SetConfig+0x11c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d111      	bne.n	8003742 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800372c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	621a      	str	r2, [r3, #32]
}
 800375c:	bf00      	nop
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40013400 	.word	0x40013400
 8003770:	40014000 	.word	0x40014000
 8003774:	40014400 	.word	0x40014400
 8003778:	40014800 	.word	0x40014800

0800377c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	f023 0210 	bic.w	r2, r3, #16
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	021b      	lsls	r3, r3, #8
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f023 0320 	bic.w	r3, r3, #32
 80037ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a28      	ldr	r2, [pc, #160]	; (800387c <TIM_OC2_SetConfig+0x100>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d003      	beq.n	80037e8 <TIM_OC2_SetConfig+0x6c>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a27      	ldr	r2, [pc, #156]	; (8003880 <TIM_OC2_SetConfig+0x104>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d10d      	bne.n	8003804 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003802:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a1d      	ldr	r2, [pc, #116]	; (800387c <TIM_OC2_SetConfig+0x100>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00f      	beq.n	800382c <TIM_OC2_SetConfig+0xb0>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <TIM_OC2_SetConfig+0x104>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00b      	beq.n	800382c <TIM_OC2_SetConfig+0xb0>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a1b      	ldr	r2, [pc, #108]	; (8003884 <TIM_OC2_SetConfig+0x108>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d007      	beq.n	800382c <TIM_OC2_SetConfig+0xb0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a1a      	ldr	r2, [pc, #104]	; (8003888 <TIM_OC2_SetConfig+0x10c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d003      	beq.n	800382c <TIM_OC2_SetConfig+0xb0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a19      	ldr	r2, [pc, #100]	; (800388c <TIM_OC2_SetConfig+0x110>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d113      	bne.n	8003854 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003832:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800383a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	621a      	str	r2, [r3, #32]
}
 800386e:	bf00      	nop
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40013400 	.word	0x40013400
 8003884:	40014000 	.word	0x40014000
 8003888:	40014400 	.word	0x40014400
 800388c:	40014800 	.word	0x40014800

08003890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0303 	bic.w	r3, r3, #3
 80038ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a27      	ldr	r2, [pc, #156]	; (800398c <TIM_OC3_SetConfig+0xfc>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <TIM_OC3_SetConfig+0x6a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a26      	ldr	r2, [pc, #152]	; (8003990 <TIM_OC3_SetConfig+0x100>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d10d      	bne.n	8003916 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003900:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003914:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a1c      	ldr	r2, [pc, #112]	; (800398c <TIM_OC3_SetConfig+0xfc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00f      	beq.n	800393e <TIM_OC3_SetConfig+0xae>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a1b      	ldr	r2, [pc, #108]	; (8003990 <TIM_OC3_SetConfig+0x100>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00b      	beq.n	800393e <TIM_OC3_SetConfig+0xae>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1a      	ldr	r2, [pc, #104]	; (8003994 <TIM_OC3_SetConfig+0x104>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d007      	beq.n	800393e <TIM_OC3_SetConfig+0xae>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a19      	ldr	r2, [pc, #100]	; (8003998 <TIM_OC3_SetConfig+0x108>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d003      	beq.n	800393e <TIM_OC3_SetConfig+0xae>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a18      	ldr	r2, [pc, #96]	; (800399c <TIM_OC3_SetConfig+0x10c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d113      	bne.n	8003966 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800394c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	621a      	str	r2, [r3, #32]
}
 8003980:	bf00      	nop
 8003982:	371c      	adds	r7, #28
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40013400 	.word	0x40013400
 8003994:	40014000 	.word	0x40014000
 8003998:	40014400 	.word	0x40014400
 800399c:	40014800 	.word	0x40014800

080039a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	031b      	lsls	r3, r3, #12
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a18      	ldr	r2, [pc, #96]	; (8003a60 <TIM_OC4_SetConfig+0xc0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00f      	beq.n	8003a24 <TIM_OC4_SetConfig+0x84>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a17      	ldr	r2, [pc, #92]	; (8003a64 <TIM_OC4_SetConfig+0xc4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00b      	beq.n	8003a24 <TIM_OC4_SetConfig+0x84>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <TIM_OC4_SetConfig+0xc8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d007      	beq.n	8003a24 <TIM_OC4_SetConfig+0x84>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <TIM_OC4_SetConfig+0xcc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_OC4_SetConfig+0x84>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a14      	ldr	r2, [pc, #80]	; (8003a70 <TIM_OC4_SetConfig+0xd0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d109      	bne.n	8003a38 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	019b      	lsls	r3, r3, #6
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40012c00 	.word	0x40012c00
 8003a64:	40013400 	.word	0x40013400
 8003a68:	40014000 	.word	0x40014000
 8003a6c:	40014400 	.word	0x40014400
 8003a70:	40014800 	.word	0x40014800

08003a74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ab8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	041b      	lsls	r3, r3, #16
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a17      	ldr	r2, [pc, #92]	; (8003b28 <TIM_OC5_SetConfig+0xb4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00f      	beq.n	8003aee <TIM_OC5_SetConfig+0x7a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <TIM_OC5_SetConfig+0xb8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00b      	beq.n	8003aee <TIM_OC5_SetConfig+0x7a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a15      	ldr	r2, [pc, #84]	; (8003b30 <TIM_OC5_SetConfig+0xbc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d007      	beq.n	8003aee <TIM_OC5_SetConfig+0x7a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a14      	ldr	r2, [pc, #80]	; (8003b34 <TIM_OC5_SetConfig+0xc0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d003      	beq.n	8003aee <TIM_OC5_SetConfig+0x7a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <TIM_OC5_SetConfig+0xc4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d109      	bne.n	8003b02 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	021b      	lsls	r3, r3, #8
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	621a      	str	r2, [r3, #32]
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40012c00 	.word	0x40012c00
 8003b2c:	40013400 	.word	0x40013400
 8003b30:	40014000 	.word	0x40014000
 8003b34:	40014400 	.word	0x40014400
 8003b38:	40014800 	.word	0x40014800

08003b3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	051b      	lsls	r3, r3, #20
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a18      	ldr	r2, [pc, #96]	; (8003bf4 <TIM_OC6_SetConfig+0xb8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00f      	beq.n	8003bb8 <TIM_OC6_SetConfig+0x7c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a17      	ldr	r2, [pc, #92]	; (8003bf8 <TIM_OC6_SetConfig+0xbc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00b      	beq.n	8003bb8 <TIM_OC6_SetConfig+0x7c>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a16      	ldr	r2, [pc, #88]	; (8003bfc <TIM_OC6_SetConfig+0xc0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d007      	beq.n	8003bb8 <TIM_OC6_SetConfig+0x7c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a15      	ldr	r2, [pc, #84]	; (8003c00 <TIM_OC6_SetConfig+0xc4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d003      	beq.n	8003bb8 <TIM_OC6_SetConfig+0x7c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a14      	ldr	r2, [pc, #80]	; (8003c04 <TIM_OC6_SetConfig+0xc8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d109      	bne.n	8003bcc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	029b      	lsls	r3, r3, #10
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	621a      	str	r2, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40012c00 	.word	0x40012c00
 8003bf8:	40013400 	.word	0x40013400
 8003bfc:	40014000 	.word	0x40014000
 8003c00:	40014400 	.word	0x40014400
 8003c04:	40014800 	.word	0x40014800

08003c08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	f023 0201 	bic.w	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f023 030a 	bic.w	r3, r3, #10
 8003c44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	621a      	str	r2, [r3, #32]
}
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b087      	sub	sp, #28
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f023 0210 	bic.w	r2, r3, #16
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	031b      	lsls	r3, r3, #12
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ca2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	621a      	str	r2, [r3, #32]
}
 8003cba:	bf00      	nop
 8003cbc:	371c      	adds	r7, #28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b085      	sub	sp, #20
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f043 0307 	orr.w	r3, r3, #7
 8003ce8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	609a      	str	r2, [r3, #8]
}
 8003cf0:	bf00      	nop
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	021a      	lsls	r2, r3, #8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	609a      	str	r2, [r3, #8]
}
 8003d30:	bf00      	nop
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f003 031f 	and.w	r3, r3, #31
 8003d4e:	2201      	movs	r2, #1
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1a      	ldr	r2, [r3, #32]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	401a      	ands	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a1a      	ldr	r2, [r3, #32]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f003 031f 	and.w	r3, r3, #31
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	fa01 f303 	lsl.w	r3, r1, r3
 8003d74:	431a      	orrs	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	621a      	str	r2, [r3, #32]
}
 8003d7a:	bf00      	nop
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e063      	b.n	8003e68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a2b      	ldr	r2, [pc, #172]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d004      	beq.n	8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a2a      	ldr	r2, [pc, #168]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d108      	bne.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003dda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1b      	ldr	r2, [pc, #108]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d018      	beq.n	8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e12:	d013      	beq.n	8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a18      	ldr	r2, [pc, #96]	; (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00e      	beq.n	8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a17      	ldr	r2, [pc, #92]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d009      	beq.n	8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d004      	beq.n	8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a13      	ldr	r2, [pc, #76]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d10c      	bne.n	8003e56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40012c00 	.word	0x40012c00
 8003e78:	40013400 	.word	0x40013400
 8003e7c:	40000400 	.word	0x40000400
 8003e80:	40000800 	.word	0x40000800
 8003e84:	40014000 	.word	0x40014000

08003e88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e065      	b.n	8003f70 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	041b      	lsls	r3, r3, #16
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a16      	ldr	r2, [pc, #88]	; (8003f7c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d004      	beq.n	8003f32 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a14      	ldr	r2, [pc, #80]	; (8003f80 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d115      	bne.n	8003f5e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	051b      	lsls	r3, r3, #20
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	40013400 	.word	0x40013400

08003f84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f8c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003f90:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fba:	b084      	sub	sp, #16
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	f107 0014 	add.w	r0, r7, #20
 8003fc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	b004      	add	sp, #16
 8003ffa:	4770      	bx	lr

08003ffc <__libc_init_array>:
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	4d0d      	ldr	r5, [pc, #52]	; (8004034 <__libc_init_array+0x38>)
 8004000:	4c0d      	ldr	r4, [pc, #52]	; (8004038 <__libc_init_array+0x3c>)
 8004002:	1b64      	subs	r4, r4, r5
 8004004:	10a4      	asrs	r4, r4, #2
 8004006:	2600      	movs	r6, #0
 8004008:	42a6      	cmp	r6, r4
 800400a:	d109      	bne.n	8004020 <__libc_init_array+0x24>
 800400c:	4d0b      	ldr	r5, [pc, #44]	; (800403c <__libc_init_array+0x40>)
 800400e:	4c0c      	ldr	r4, [pc, #48]	; (8004040 <__libc_init_array+0x44>)
 8004010:	f000 f820 	bl	8004054 <_init>
 8004014:	1b64      	subs	r4, r4, r5
 8004016:	10a4      	asrs	r4, r4, #2
 8004018:	2600      	movs	r6, #0
 800401a:	42a6      	cmp	r6, r4
 800401c:	d105      	bne.n	800402a <__libc_init_array+0x2e>
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	f855 3b04 	ldr.w	r3, [r5], #4
 8004024:	4798      	blx	r3
 8004026:	3601      	adds	r6, #1
 8004028:	e7ee      	b.n	8004008 <__libc_init_array+0xc>
 800402a:	f855 3b04 	ldr.w	r3, [r5], #4
 800402e:	4798      	blx	r3
 8004030:	3601      	adds	r6, #1
 8004032:	e7f2      	b.n	800401a <__libc_init_array+0x1e>
 8004034:	0800409c 	.word	0x0800409c
 8004038:	0800409c 	.word	0x0800409c
 800403c:	0800409c 	.word	0x0800409c
 8004040:	080040a0 	.word	0x080040a0

08004044 <memset>:
 8004044:	4402      	add	r2, r0
 8004046:	4603      	mov	r3, r0
 8004048:	4293      	cmp	r3, r2
 800404a:	d100      	bne.n	800404e <memset+0xa>
 800404c:	4770      	bx	lr
 800404e:	f803 1b01 	strb.w	r1, [r3], #1
 8004052:	e7f9      	b.n	8004048 <memset+0x4>

08004054 <_init>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	bf00      	nop
 8004058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405a:	bc08      	pop	{r3}
 800405c:	469e      	mov	lr, r3
 800405e:	4770      	bx	lr

08004060 <_fini>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	bf00      	nop
 8004064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004066:	bc08      	pop	{r3}
 8004068:	469e      	mov	lr, r3
 800406a:	4770      	bx	lr
