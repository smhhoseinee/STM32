
lab4-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066c8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006888  08006888  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08006888  08006888  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006888  08006888  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006888  08006888  00016888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800688c  0800688c  0001688c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000550  20000018  20000018  00020018  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000568  20000568  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018b23  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c50  00000000  00000000  00038b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  0003b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001320  00000000  00000000  0003cbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f4e1  00000000  00000000  0003df00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019563  00000000  00000000  0005d3e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bdec8  00000000  00000000  00076944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013480c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005910  00000000  00000000  0013485c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006838 	.word	0x08006838

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08006838 	.word	0x08006838

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	0000      	movs	r0, r0
	...

08000ad8 <jaro_winkler_similarity>:
        return 0;
    }
}

//double jaro_winkler_similarity(char* s1, char* s2) {
double jaro_winkler_similarity(unsigned char s1[20], unsigned char s2[20]) {
 8000ad8:	b5b0      	push	{r4, r5, r7, lr}
 8000ada:	b090      	sub	sp, #64	; 0x40
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
    int len1 = strlen(s1);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fb70 	bl	80001c8 <strlen>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
    int len2 = strlen(s2);
 8000aec:	6838      	ldr	r0, [r7, #0]
 8000aee:	f7ff fb6b 	bl	80001c8 <strlen>
 8000af2:	4603      	mov	r3, r0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_UART_Transmit(&huart1, s1, len1, 1000);
 8000af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	4859      	ldr	r0, [pc, #356]	; (8000c68 <jaro_winkler_similarity+0x190>)
 8000b02:	f004 fbc5 	bl	8005290 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, s2, len2, 1000);
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0e:	6839      	ldr	r1, [r7, #0]
 8000b10:	4855      	ldr	r0, [pc, #340]	; (8000c68 <jaro_winkler_similarity+0x190>)
 8000b12:	f004 fbbd 	bl	8005290 <HAL_UART_Transmit>

    // calculate matching distance
    int match_distance = (len1 + len2) / 2 - 1;
 8000b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1a:	4413      	add	r3, r2
 8000b1c:	0fda      	lsrs	r2, r3, #31
 8000b1e:	4413      	add	r3, r2
 8000b20:	105b      	asrs	r3, r3, #1
 8000b22:	3b01      	subs	r3, #1
 8000b24:	623b      	str	r3, [r7, #32]
    int matches = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	63fb      	str	r3, [r7, #60]	; 0x3c
    int transpositions = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < len1; i++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
 8000b32:	e02e      	b.n	8000b92 <jaro_winkler_similarity+0xba>
        for (int j = i - match_distance; j <= i + match_distance; j++) {
 8000b34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b36:	6a3b      	ldr	r3, [r7, #32]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8000b3c:	e01e      	b.n	8000b7c <jaro_winkler_similarity+0xa4>
            if (j >= 0 && j < len2 && s1[i] == s2[j]) {
 8000b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db18      	blt.n	8000b76 <jaro_winkler_similarity+0x9e>
 8000b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	da14      	bge.n	8000b76 <jaro_winkler_similarity+0x9e>
 8000b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	781a      	ldrb	r2, [r3, #0]
 8000b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b56:	6839      	ldr	r1, [r7, #0]
 8000b58:	440b      	add	r3, r1
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d10a      	bne.n	8000b76 <jaro_winkler_similarity+0x9e>
                matches++;
 8000b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b62:	3301      	adds	r3, #1
 8000b64:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (i != j) {
 8000b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d00d      	beq.n	8000b8a <jaro_winkler_similarity+0xb2>
                    transpositions++;
 8000b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b70:	3301      	adds	r3, #1
 8000b72:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                break;
 8000b74:	e009      	b.n	8000b8a <jaro_winkler_similarity+0xb2>
        for (int j = i - match_distance; j <= i + match_distance; j++) {
 8000b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b78:	3301      	adds	r3, #1
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8000b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b7e:	6a3b      	ldr	r3, [r7, #32]
 8000b80:	4413      	add	r3, r2
 8000b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b84:	429a      	cmp	r2, r3
 8000b86:	ddda      	ble.n	8000b3e <jaro_winkler_similarity+0x66>
 8000b88:	e000      	b.n	8000b8c <jaro_winkler_similarity+0xb4>
                break;
 8000b8a:	bf00      	nop
    for (int i = 0; i < len1; i++) {
 8000b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b8e:	3301      	adds	r3, #1
 8000b90:	637b      	str	r3, [r7, #52]	; 0x34
 8000b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b96:	429a      	cmp	r2, r3
 8000b98:	dbcc      	blt.n	8000b34 <jaro_winkler_similarity+0x5c>
            }
        }
    }

    // calculate Jaro distance
    double jaro_distance = matches / (double)len1;
 8000b9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000b9c:	f7ff fc6e 	bl	800047c <__aeabi_i2d>
 8000ba0:	4604      	mov	r4, r0
 8000ba2:	460d      	mov	r5, r1
 8000ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ba6:	f7ff fc69 	bl	800047c <__aeabi_i2d>
 8000baa:	4602      	mov	r2, r0
 8000bac:	460b      	mov	r3, r1
 8000bae:	4620      	mov	r0, r4
 8000bb0:	4629      	mov	r1, r5
 8000bb2:	f7ff fdf7 	bl	80007a4 <__aeabi_ddiv>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	460b      	mov	r3, r1
 8000bba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (matches == 0) {
 8000bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <jaro_winkler_similarity+0xf2>
        return jaro_distance;
 8000bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000bc8:	e040      	b.n	8000c4c <jaro_winkler_similarity+0x174>
    }

    // calculate Jaro-Winkler distance
    double prefix_scale_factor = 0.1;
 8000bca:	a325      	add	r3, pc, #148	; (adr r3, 8000c60 <jaro_winkler_similarity+0x188>)
 8000bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int prefix_length = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (prefix_length < len1 && prefix_length < len2 && s1[prefix_length] == s2[prefix_length]) {
 8000bd8:	e002      	b.n	8000be0 <jaro_winkler_similarity+0x108>
        prefix_length++;
 8000bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bdc:	3301      	adds	r3, #1
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (prefix_length < len1 && prefix_length < len2 && s1[prefix_length] == s2[prefix_length]) {
 8000be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be4:	429a      	cmp	r2, r3
 8000be6:	da0d      	bge.n	8000c04 <jaro_winkler_similarity+0x12c>
 8000be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	429a      	cmp	r2, r3
 8000bee:	da09      	bge.n	8000c04 <jaro_winkler_similarity+0x12c>
 8000bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	781a      	ldrb	r2, [r3, #0]
 8000bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bfa:	6839      	ldr	r1, [r7, #0]
 8000bfc:	440b      	add	r3, r1
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d0ea      	beq.n	8000bda <jaro_winkler_similarity+0x102>
    }

    double winkler_factor = prefix_scale_factor * prefix_length * (1 - jaro_distance);
 8000c04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000c06:	f7ff fc39 	bl	800047c <__aeabi_i2d>
 8000c0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c0e:	f7ff fc9f 	bl	8000550 <__aeabi_dmul>
 8000c12:	4602      	mov	r2, r0
 8000c14:	460b      	mov	r3, r1
 8000c16:	4614      	mov	r4, r2
 8000c18:	461d      	mov	r5, r3
 8000c1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	4912      	ldr	r1, [pc, #72]	; (8000c6c <jaro_winkler_similarity+0x194>)
 8000c24:	f7ff fadc 	bl	80001e0 <__aeabi_dsub>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	f7ff fc8e 	bl	8000550 <__aeabi_dmul>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return jaro_distance + winkler_factor;
 8000c3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c40:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c44:	f7ff face 	bl	80001e4 <__adddf3>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	460b      	mov	r3, r1
}
 8000c4c:	ec43 2b17 	vmov	d7, r2, r3
 8000c50:	eeb0 0a47 	vmov.f32	s0, s14
 8000c54:	eef0 0a67 	vmov.f32	s1, s15
 8000c58:	3740      	adds	r7, #64	; 0x40
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	9999999a 	.word	0x9999999a
 8000c64:	3fb99999 	.word	0x3fb99999
 8000c68:	20000184 	.word	0x20000184
 8000c6c:	3ff00000 	.word	0x3ff00000

08000c70 <countWords>:

int countWords(unsigned char sentence[]) {
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
    int count = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
    int i = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
    while (sentence[i] != '\0') {
 8000c80:	e00b      	b.n	8000c9a <countWords+0x2a>
        if (sentence[i] == ' ') {
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	4413      	add	r3, r2
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b20      	cmp	r3, #32
 8000c8c:	d102      	bne.n	8000c94 <countWords+0x24>
            count++;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	3301      	adds	r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
        }
        i++;
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
    while (sentence[i] != '\0') {
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1ed      	bne.n	8000c82 <countWords+0x12>
    }
    return count + 1; // add one for the last word
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	3301      	adds	r3, #1
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <HAL_UART_RxCpltCallback>:
//	}
//}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a4a      	ldr	r2, [pc, #296]	; (8000df0 <HAL_UART_RxCpltCallback+0x138>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	f040 8083 	bne.w	8000dd2 <HAL_UART_RxCpltCallback+0x11a>
//		if (data[0] != 0x0D) {
		if ((int)data[0] != 13) {
 8000ccc:	4b49      	ldr	r3, [pc, #292]	; (8000df4 <HAL_UART_RxCpltCallback+0x13c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b0d      	cmp	r3, #13
 8000cd2:	d010      	beq.n	8000cf6 <HAL_UART_RxCpltCallback+0x3e>
			buffer[position] = data[0];
 8000cd4:	4b48      	ldr	r3, [pc, #288]	; (8000df8 <HAL_UART_RxCpltCallback+0x140>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a46      	ldr	r2, [pc, #280]	; (8000df4 <HAL_UART_RxCpltCallback+0x13c>)
 8000cda:	7811      	ldrb	r1, [r2, #0]
 8000cdc:	4a47      	ldr	r2, [pc, #284]	; (8000dfc <HAL_UART_RxCpltCallback+0x144>)
 8000cde:	54d1      	strb	r1, [r2, r3]
			buffer[++position] = '\0';
 8000ce0:	4b45      	ldr	r3, [pc, #276]	; (8000df8 <HAL_UART_RxCpltCallback+0x140>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	4a44      	ldr	r2, [pc, #272]	; (8000df8 <HAL_UART_RxCpltCallback+0x140>)
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <HAL_UART_RxCpltCallback+0x140>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a43      	ldr	r2, [pc, #268]	; (8000dfc <HAL_UART_RxCpltCallback+0x144>)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	54d1      	strb	r1, [r2, r3]
 8000cf4:	e06d      	b.n	8000dd2 <HAL_UART_RxCpltCallback+0x11a>
//			HAL_UART_Transmit(&huart1, data, sizeof(data), 1000);

//			position++;
//		}else if (data[0] == 0x0D) {
		}else if ((int)data[0] == 13) {
 8000cf6:	4b3f      	ldr	r3, [pc, #252]	; (8000df4 <HAL_UART_RxCpltCallback+0x13c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b0d      	cmp	r3, #13
 8000cfc:	d169      	bne.n	8000dd2 <HAL_UART_RxCpltCallback+0x11a>
//			HAL_UART_Transmit(&huart1, buffer, position, 1000);

			switch(sentence_counter){
 8000cfe:	4b40      	ldr	r3, [pc, #256]	; (8000e00 <HAL_UART_RxCpltCallback+0x148>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d002      	beq.n	8000d0c <HAL_UART_RxCpltCallback+0x54>
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d00e      	beq.n	8000d28 <HAL_UART_RxCpltCallback+0x70>
 8000d0a:	e05f      	b.n	8000dcc <HAL_UART_RxCpltCallback+0x114>
				case 0:
					strcpy(sentence_1, buffer);
 8000d0c:	493b      	ldr	r1, [pc, #236]	; (8000dfc <HAL_UART_RxCpltCallback+0x144>)
 8000d0e:	483d      	ldr	r0, [pc, #244]	; (8000e04 <HAL_UART_RxCpltCallback+0x14c>)
 8000d10:	f005 fd8a 	bl	8006828 <strcpy>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d1a:	483b      	ldr	r0, [pc, #236]	; (8000e08 <HAL_UART_RxCpltCallback+0x150>)
 8000d1c:	f001 fece 	bl	8002abc <HAL_GPIO_WritePin>

					sentence_counter=1;
 8000d20:	4b37      	ldr	r3, [pc, #220]	; (8000e00 <HAL_UART_RxCpltCallback+0x148>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	601a      	str	r2, [r3, #0]
//					HAL_UART_Transmit(&huart1, sentence_1, position, 1000);
					break;
 8000d26:	e051      	b.n	8000dcc <HAL_UART_RxCpltCallback+0x114>

				case 1:

					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d2e:	4836      	ldr	r0, [pc, #216]	; (8000e08 <HAL_UART_RxCpltCallback+0x150>)
 8000d30:	f001 fec4 	bl	8002abc <HAL_GPIO_WritePin>

					strcpy(sentence_2, buffer);
 8000d34:	4931      	ldr	r1, [pc, #196]	; (8000dfc <HAL_UART_RxCpltCallback+0x144>)
 8000d36:	4835      	ldr	r0, [pc, #212]	; (8000e0c <HAL_UART_RxCpltCallback+0x154>)
 8000d38:	f005 fd76 	bl	8006828 <strcpy>
//					sentence_1="";
//					sentence_2="";

//					HAL_UART_Transmit(&huart1, sentence_2, position, 1000);

					input_completed = 1;
 8000d3c:	4b34      	ldr	r3, [pc, #208]	; (8000e10 <HAL_UART_RxCpltCallback+0x158>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	601a      	str	r2, [r3, #0]
					similarity_percentage = jaro_winkler_similarity(sentence_1, sentence_2) * 100;
 8000d42:	4932      	ldr	r1, [pc, #200]	; (8000e0c <HAL_UART_RxCpltCallback+0x154>)
 8000d44:	482f      	ldr	r0, [pc, #188]	; (8000e04 <HAL_UART_RxCpltCallback+0x14c>)
 8000d46:	f7ff fec7 	bl	8000ad8 <jaro_winkler_similarity>
 8000d4a:	ec51 0b10 	vmov	r0, r1, d0
 8000d4e:	f04f 0200 	mov.w	r2, #0
 8000d52:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <HAL_UART_RxCpltCallback+0x15c>)
 8000d54:	f7ff fbfc 	bl	8000550 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	492e      	ldr	r1, [pc, #184]	; (8000e18 <HAL_UART_RxCpltCallback+0x160>)
 8000d5e:	e9c1 2300 	strd	r2, r3, [r1]
					if(similarity_percentage == 100){
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_UART_RxCpltCallback+0x160>)
 8000d64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d68:	f04f 0200 	mov.w	r2, #0
 8000d6c:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <HAL_UART_RxCpltCallback+0x15c>)
 8000d6e:	f7ff fe57 	bl	8000a20 <__aeabi_dcmpeq>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d005      	beq.n	8000d84 <HAL_UART_RxCpltCallback+0xcc>
						similarity_percentage = 99.99;
 8000d78:	4927      	ldr	r1, [pc, #156]	; (8000e18 <HAL_UART_RxCpltCallback+0x160>)
 8000d7a:	a31b      	add	r3, pc, #108	; (adr r3, 8000de8 <HAL_UART_RxCpltCallback+0x130>)
 8000d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d80:	e9c1 2300 	strd	r2, r3, [r1]
					}
//					similarity_percentage = 91.4523423;
//
					if(similarity_percentage >= 60){
 8000d84:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <HAL_UART_RxCpltCallback+0x160>)
 8000d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <HAL_UART_RxCpltCallback+0x164>)
 8000d90:	f7ff fe64 	bl	8000a5c <__aeabi_dcmpge>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_UART_RxCpltCallback+0xea>
						is_similar = 1;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <HAL_UART_RxCpltCallback+0x168>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	e002      	b.n	8000da8 <HAL_UART_RxCpltCallback+0xf0>
					}else{
						is_similar = 0;
 8000da2:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <HAL_UART_RxCpltCallback+0x168>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
					}
					is_similar = 1;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_UART_RxCpltCallback+0x168>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	601a      	str	r2, [r3, #0]
					number_of_words1 = 2*countWords(sentence_1);
 8000dae:	4815      	ldr	r0, [pc, #84]	; (8000e04 <HAL_UART_RxCpltCallback+0x14c>)
 8000db0:	f7ff ff5e 	bl	8000c70 <countWords>
 8000db4:	4603      	mov	r3, r0
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4a1a      	ldr	r2, [pc, #104]	; (8000e24 <HAL_UART_RxCpltCallback+0x16c>)
 8000dba:	6013      	str	r3, [r2, #0]
					number_of_words2 = 2*countWords(sentence_2);
 8000dbc:	4813      	ldr	r0, [pc, #76]	; (8000e0c <HAL_UART_RxCpltCallback+0x154>)
 8000dbe:	f7ff ff57 	bl	8000c70 <countWords>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <HAL_UART_RxCpltCallback+0x170>)
 8000dc8:	6013      	str	r3, [r2, #0]

					break;
 8000dca:	bf00      	nop
//					blink_led(5);
//					blink_led(number_of_words2);

			}

			position = 0;
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_UART_RxCpltCallback+0x140>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
//				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
//			}

		}
	}
	HAL_UART_Receive_IT(&huart1, data, 1);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <HAL_UART_RxCpltCallback+0x13c>)
 8000dd6:	4815      	ldr	r0, [pc, #84]	; (8000e2c <HAL_UART_RxCpltCallback+0x174>)
 8000dd8:	f004 fae4 	bl	80053a4 <HAL_UART_Receive_IT>

}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	f3af 8000 	nop.w
 8000de8:	28f5c28f 	.word	0x28f5c28f
 8000dec:	4058ff5c 	.word	0x4058ff5c
 8000df0:	40013800 	.word	0x40013800
 8000df4:	200004f8 	.word	0x200004f8
 8000df8:	20000558 	.word	0x20000558
 8000dfc:	200004fc 	.word	0x200004fc
 8000e00:	20000538 	.word	0x20000538
 8000e04:	20000510 	.word	0x20000510
 8000e08:	48001000 	.word	0x48001000
 8000e0c:	20000524 	.word	0x20000524
 8000e10:	2000053c 	.word	0x2000053c
 8000e14:	40590000 	.word	0x40590000
 8000e18:	20000548 	.word	0x20000548
 8000e1c:	404e0000 	.word	0x404e0000
 8000e20:	20000540 	.word	0x20000540
 8000e24:	20000550 	.word	0x20000550
 8000e28:	20000554 	.word	0x20000554
 8000e2c:	20000184 	.word	0x20000184

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e34:	f001 fada 	bl	80023ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e38:	f000 f822 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3c:	f000 f9f0 	bl	8001220 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e40:	f000 f882 	bl	8000f48 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e44:	f000 f8c0 	bl	8000fc8 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000e48:	f000 f9c8 	bl	80011dc <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000e4c:	f000 f8fa 	bl	8001044 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000e50:	f000 f994 	bl	800117c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000e54:	f000 f942 	bl	80010dc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <main+0x40>)
 8000e5a:	f003 fd7f 	bl	800495c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <main+0x44>)
 8000e60:	f003 fd7c 	bl	800495c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, data, 1);
 8000e64:	2201      	movs	r2, #1
 8000e66:	4904      	ldr	r1, [pc, #16]	; (8000e78 <main+0x48>)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <main+0x4c>)
 8000e6a:	f004 fa9b 	bl	80053a4 <HAL_UART_Receive_IT>
//  HAL_UART_Receive_IT(&huart2, str, 100);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <main+0x3e>
 8000e70:	200000ec 	.word	0x200000ec
 8000e74:	20000138 	.word	0x20000138
 8000e78:	200004f8 	.word	0x200004f8
 8000e7c:	20000184 	.word	0x20000184

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b09e      	sub	sp, #120	; 0x78
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e8a:	2228      	movs	r2, #40	; 0x28
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f005 fcc2 	bl	8006818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	223c      	movs	r2, #60	; 0x3c
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f005 fcb4 	bl	8006818 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eb4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000eb8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ece:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ed0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ed4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 f818 	bl	8002f10 <HAL_RCC_OscConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ee6:	f000 fa3b 	bl	8001360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eea:	230f      	movs	r3, #15
 8000eec:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f04:	2101      	movs	r1, #1
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 f840 	bl	8003f8c <HAL_RCC_ClockConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f12:	f000 fa25 	bl	8001360 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <SystemClock_Config+0xc4>)
 8000f18:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f26:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 fa64 	bl	80043f8 <HAL_RCCEx_PeriphCLKConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000f36:	f000 fa13 	bl	8001360 <Error_Handler>
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3778      	adds	r7, #120	; 0x78
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	00020021 	.word	0x00020021

08000f48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <MX_I2C1_Init+0x78>)
 8000f50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f54:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <MX_I2C1_Init+0x7c>)
 8000f56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f82:	480e      	ldr	r0, [pc, #56]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f84:	f001 fdcc 	bl	8002b20 <HAL_I2C_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f8e:	f000 f9e7 	bl	8001360 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f92:	2100      	movs	r1, #0
 8000f94:	4809      	ldr	r0, [pc, #36]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000f96:	f001 fe52 	bl	8002c3e <HAL_I2CEx_ConfigAnalogFilter>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fa0:	f000 f9de 	bl	8001360 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_I2C1_Init+0x74>)
 8000fa8:	f001 fe94 	bl	8002cd4 <HAL_I2CEx_ConfigDigitalFilter>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fb2:	f000 f9d5 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000034 	.word	0x20000034
 8000fc0:	40005400 	.word	0x40005400
 8000fc4:	2000090e 	.word	0x2000090e

08000fc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_SPI1_Init+0x74>)
 8000fce:	4a1c      	ldr	r2, [pc, #112]	; (8001040 <MX_SPI1_Init+0x78>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_SPI1_Init+0x74>)
 8000fd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_SPI1_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_SPI1_Init+0x74>)
 8000fe2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000fe6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_SPI1_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <MX_SPI1_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_SPI1_Init+0x74>)
 8000ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ffa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_SPI1_Init+0x74>)
 8000ffe:	2208      	movs	r2, #8
 8001000:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_SPI1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_SPI1_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_SPI1_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_SPI1_Init+0x74>)
 8001016:	2207      	movs	r2, #7
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_SPI1_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_SPI1_Init+0x74>)
 8001022:	2208      	movs	r2, #8
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_SPI1_Init+0x74>)
 8001028:	f003 fb96 	bl	8004758 <HAL_SPI_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001032:	f000 f995 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000088 	.word	0x20000088
 8001040:	40013000 	.word	0x40013000

08001044 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001062:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <MX_TIM2_Init+0x94>)
 8001064:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001068:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 800106a:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_TIM2_Init+0x94>)
 800106c:	222f      	movs	r2, #47	; 0x2f
 800106e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_TIM2_Init+0x94>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_TIM2_Init+0x94>)
 8001078:	2263      	movs	r2, #99	; 0x63
 800107a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_TIM2_Init+0x94>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_TIM2_Init+0x94>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001088:	4813      	ldr	r0, [pc, #76]	; (80010d8 <MX_TIM2_Init+0x94>)
 800108a:	f003 fc10 	bl	80048ae <HAL_TIM_Base_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001094:	f000 f964 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	4619      	mov	r1, r3
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <MX_TIM2_Init+0x94>)
 80010a6:	f003 fde2 	bl	8004c6e <HAL_TIM_ConfigClockSource>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010b0:	f000 f956 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_TIM2_Init+0x94>)
 80010c2:	f003 fff9 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010cc:	f000 f948 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200000ec 	.word	0x200000ec

080010dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <MX_TIM4_Init+0x98>)
 80010fc:	4a1e      	ldr	r2, [pc, #120]	; (8001178 <MX_TIM4_Init+0x9c>)
 80010fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2399;
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MX_TIM4_Init+0x98>)
 8001102:	f640 125f 	movw	r2, #2399	; 0x95f
 8001106:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_TIM4_Init+0x98>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <MX_TIM4_Init+0x98>)
 8001110:	f242 7210 	movw	r2, #10000	; 0x2710
 8001114:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MX_TIM4_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MX_TIM4_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001122:	4814      	ldr	r0, [pc, #80]	; (8001174 <MX_TIM4_Init+0x98>)
 8001124:	f003 fbc3 	bl	80048ae <HAL_TIM_Base_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800112e:	f000 f917 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001136:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4619      	mov	r1, r3
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <MX_TIM4_Init+0x98>)
 8001140:	f003 fd95 	bl	8004c6e <HAL_TIM_ConfigClockSource>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800114a:	f000 f909 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	; (8001174 <MX_TIM4_Init+0x98>)
 800115c:	f003 ffac 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001166:	f000 f8fb 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3720      	adds	r7, #32
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000138 	.word	0x20000138
 8001178:	40000800 	.word	0x40000800

0800117c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 8001182:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <MX_USART1_UART_Init+0x5c>)
 8001184:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 8001188:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800118c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_USART1_UART_Init+0x58>)
 80011c0:	f004 f818 	bl	80051f4 <HAL_UART_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011ca:	f000 f8c9 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000184 	.word	0x20000184
 80011d8:	40013800 	.word	0x40013800

080011dc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <MX_USB_PCD_Init+0x3c>)
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <MX_USB_PCD_Init+0x40>)
 80011e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_USB_PCD_Init+0x3c>)
 80011e8:	2208      	movs	r2, #8
 80011ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <MX_USB_PCD_Init+0x3c>)
 80011ee:	2202      	movs	r2, #2
 80011f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_USB_PCD_Init+0x3c>)
 80011f4:	2202      	movs	r2, #2
 80011f6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <MX_USB_PCD_Init+0x3c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_USB_PCD_Init+0x3c>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <MX_USB_PCD_Init+0x3c>)
 8001206:	f001 fdb1 	bl	8002d6c <HAL_PCD_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001210:	f000 f8a6 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2000020c 	.word	0x2000020c
 800121c:	40005c00 	.word	0x40005c00

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	; 0x30
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001236:	4b47      	ldr	r3, [pc, #284]	; (8001354 <MX_GPIO_Init+0x134>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	4a46      	ldr	r2, [pc, #280]	; (8001354 <MX_GPIO_Init+0x134>)
 800123c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001240:	6153      	str	r3, [r2, #20]
 8001242:	4b44      	ldr	r3, [pc, #272]	; (8001354 <MX_GPIO_Init+0x134>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124a:	61bb      	str	r3, [r7, #24]
 800124c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	4b41      	ldr	r3, [pc, #260]	; (8001354 <MX_GPIO_Init+0x134>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	4a40      	ldr	r2, [pc, #256]	; (8001354 <MX_GPIO_Init+0x134>)
 8001254:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001258:	6153      	str	r3, [r2, #20]
 800125a:	4b3e      	ldr	r3, [pc, #248]	; (8001354 <MX_GPIO_Init+0x134>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001266:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <MX_GPIO_Init+0x134>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a3a      	ldr	r2, [pc, #232]	; (8001354 <MX_GPIO_Init+0x134>)
 800126c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b38      	ldr	r3, [pc, #224]	; (8001354 <MX_GPIO_Init+0x134>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b35      	ldr	r3, [pc, #212]	; (8001354 <MX_GPIO_Init+0x134>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	4a34      	ldr	r2, [pc, #208]	; (8001354 <MX_GPIO_Init+0x134>)
 8001284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001288:	6153      	str	r3, [r2, #20]
 800128a:	4b32      	ldr	r3, [pc, #200]	; (8001354 <MX_GPIO_Init+0x134>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001296:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <MX_GPIO_Init+0x134>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	4a2e      	ldr	r2, [pc, #184]	; (8001354 <MX_GPIO_Init+0x134>)
 800129c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012a0:	6153      	str	r3, [r2, #20]
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <MX_GPIO_Init+0x134>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <MX_GPIO_Init+0x134>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4a28      	ldr	r2, [pc, #160]	; (8001354 <MX_GPIO_Init+0x134>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	6153      	str	r3, [r2, #20]
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MX_GPIO_Init+0x134>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7|LD4_Pin|LD3_Pin
 80012c6:	2200      	movs	r2, #0
 80012c8:	f64f 7188 	movw	r1, #65416	; 0xff88
 80012cc:	4822      	ldr	r0, [pc, #136]	; (8001358 <MX_GPIO_Init+0x138>)
 80012ce:	f001 fbf5 	bl	8002abc <HAL_GPIO_WritePin>
                          |LD5_Pin|LD7_Pin|LD9_Pin|LD10_Pin
                          |LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012d2:	2200      	movs	r2, #0
 80012d4:	21ff      	movs	r1, #255	; 0xff
 80012d6:	4821      	ldr	r0, [pc, #132]	; (800135c <MX_GPIO_Init+0x13c>)
 80012d8:	f001 fbf0 	bl	8002abc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80012dc:	2337      	movs	r3, #55	; 0x37
 80012de:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012e0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4819      	ldr	r0, [pc, #100]	; (8001358 <MX_GPIO_Init+0x138>)
 80012f2:	f001 fa69 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE7 LD4_Pin LD3_Pin
                           LD5_Pin LD7_Pin LD9_Pin LD10_Pin
                           LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_7|LD4_Pin|LD3_Pin
 80012f6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80012fa:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD7_Pin|LD9_Pin|LD10_Pin
                          |LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	4812      	ldr	r0, [pc, #72]	; (8001358 <MX_GPIO_Init+0x138>)
 8001310:	f001 fa5a 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001314:	2301      	movs	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f001 fa4d 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800132e:	23ff      	movs	r3, #255	; 0xff
 8001330:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_GPIO_Init+0x13c>)
 8001346:	f001 fa3f 	bl	80027c8 <HAL_GPIO_Init>

}
 800134a:	bf00      	nop
 800134c:	3730      	adds	r7, #48	; 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000
 8001358:	48001000 	.word	0x48001000
 800135c:	48000c00 	.word	0x48000c00

08001360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001364:	b672      	cpsid	i
}
 8001366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001368:	e7fe      	b.n	8001368 <Error_Handler+0x8>
	...

0800136c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <HAL_MspInit+0x44>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	4a0e      	ldr	r2, [pc, #56]	; (80013b0 <HAL_MspInit+0x44>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6193      	str	r3, [r2, #24]
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <HAL_MspInit+0x44>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_MspInit+0x44>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <HAL_MspInit+0x44>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	61d3      	str	r3, [r2, #28]
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_MspInit+0x44>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80013a2:	2006      	movs	r0, #6
 80013a4:	f001 f958 	bl	8002658 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40021000 	.word	0x40021000

080013b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a17      	ldr	r2, [pc, #92]	; (8001430 <HAL_I2C_MspInit+0x7c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d127      	bne.n	8001426 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <HAL_I2C_MspInit+0x80>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	4a16      	ldr	r2, [pc, #88]	; (8001434 <HAL_I2C_MspInit+0x80>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e0:	6153      	str	r3, [r2, #20]
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <HAL_I2C_MspInit+0x80>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80013ee:	23c0      	movs	r3, #192	; 0xc0
 80013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f2:	2312      	movs	r3, #18
 80013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013fe:	2304      	movs	r3, #4
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	480b      	ldr	r0, [pc, #44]	; (8001438 <HAL_I2C_MspInit+0x84>)
 800140a:	f001 f9dd 	bl	80027c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_I2C_MspInit+0x80>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_I2C_MspInit+0x80>)
 8001414:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_I2C_MspInit+0x80>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40005400 	.word	0x40005400
 8001434:	40021000 	.word	0x40021000
 8001438:	48000400 	.word	0x48000400

0800143c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <HAL_SPI_MspInit+0x7c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d128      	bne.n	80014b0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_SPI_MspInit+0x80>)
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	4a16      	ldr	r2, [pc, #88]	; (80014bc <HAL_SPI_MspInit+0x80>)
 8001464:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001468:	6193      	str	r3, [r2, #24]
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <HAL_SPI_MspInit+0x80>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_SPI_MspInit+0x80>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	4a10      	ldr	r2, [pc, #64]	; (80014bc <HAL_SPI_MspInit+0x80>)
 800147c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001480:	6153      	str	r3, [r2, #20]
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_SPI_MspInit+0x80>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800148e:	23e0      	movs	r3, #224	; 0xe0
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800149e:	2305      	movs	r3, #5
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ac:	f001 f98c 	bl	80027c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	; 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40013000 	.word	0x40013000
 80014bc:	40021000 	.word	0x40021000

080014c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d0:	d114      	bne.n	80014fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_TIM_Base_MspInit+0x78>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	4a18      	ldr	r2, [pc, #96]	; (8001538 <HAL_TIM_Base_MspInit+0x78>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	61d3      	str	r3, [r2, #28]
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_TIM_Base_MspInit+0x78>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	201c      	movs	r0, #28
 80014f0:	f001 f8bd 	bl	800266e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014f4:	201c      	movs	r0, #28
 80014f6:	f001 f8d6 	bl	80026a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014fa:	e018      	b.n	800152e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0e      	ldr	r2, [pc, #56]	; (800153c <HAL_TIM_Base_MspInit+0x7c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d113      	bne.n	800152e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_TIM_Base_MspInit+0x78>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_TIM_Base_MspInit+0x78>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_TIM_Base_MspInit+0x78>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	201e      	movs	r0, #30
 8001524:	f001 f8a3 	bl	800266e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001528:	201e      	movs	r0, #30
 800152a:	f001 f8bc 	bl	80026a6 <HAL_NVIC_EnableIRQ>
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	40000800 	.word	0x40000800

08001540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <HAL_UART_MspInit+0x8c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d12f      	bne.n	80015c2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_UART_MspInit+0x90>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	4a1a      	ldr	r2, [pc, #104]	; (80015d0 <HAL_UART_MspInit+0x90>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156c:	6193      	str	r3, [r2, #24]
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_UART_MspInit+0x90>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_UART_MspInit+0x90>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <HAL_UART_MspInit+0x90>)
 8001580:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001584:	6153      	str	r3, [r2, #20]
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_UART_MspInit+0x90>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001592:	2330      	movs	r3, #48	; 0x30
 8001594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015a2:	2307      	movs	r3, #7
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4809      	ldr	r0, [pc, #36]	; (80015d4 <HAL_UART_MspInit+0x94>)
 80015ae:	f001 f90b 	bl	80027c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2025      	movs	r0, #37	; 0x25
 80015b8:	f001 f859 	bl	800266e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015bc:	2025      	movs	r0, #37	; 0x25
 80015be:	f001 f872 	bl	80026a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40013800 	.word	0x40013800
 80015d0:	40021000 	.word	0x40021000
 80015d4:	48000800 	.word	0x48000800

080015d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a18      	ldr	r2, [pc, #96]	; (8001658 <HAL_PCD_MspInit+0x80>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d129      	bne.n	800164e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_PCD_MspInit+0x84>)
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_PCD_MspInit+0x84>)
 8001600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001604:	6153      	str	r3, [r2, #20]
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_PCD_MspInit+0x84>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001612:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001624:	230e      	movs	r3, #14
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001632:	f001 f8c9 	bl	80027c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_PCD_MspInit+0x84>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	4a08      	ldr	r2, [pc, #32]	; (800165c <HAL_PCD_MspInit+0x84>)
 800163c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001640:	61d3      	str	r3, [r2, #28]
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_PCD_MspInit+0x84>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	; 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40005c00 	.word	0x40005c00
 800165c:	40021000 	.word	0x40021000

08001660 <num1>:
extern int number_of_words2;
extern int restart = 0;
int switch_delay = 10;
int final_delay = 4;

void num1(int a){
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2101      	movs	r1, #1
 800166c:	488b      	ldr	r0, [pc, #556]	; (800189c <num1+0x23c>)
 800166e:	f001 fa25 	bl	8002abc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,1);
 8001672:	2201      	movs	r2, #1
 8001674:	2102      	movs	r1, #2
 8001676:	4889      	ldr	r0, [pc, #548]	; (800189c <num1+0x23c>)
 8001678:	f001 fa20 	bl	8002abc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 800167c:	2201      	movs	r2, #1
 800167e:	2104      	movs	r1, #4
 8001680:	4886      	ldr	r0, [pc, #536]	; (800189c <num1+0x23c>)
 8001682:	f001 fa1b 	bl	8002abc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 8001686:	2201      	movs	r2, #1
 8001688:	2108      	movs	r1, #8
 800168a:	4884      	ldr	r0, [pc, #528]	; (800189c <num1+0x23c>)
 800168c:	f001 fa16 	bl	8002abc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2101      	movs	r1, #1
 8001694:	4882      	ldr	r0, [pc, #520]	; (80018a0 <num1+0x240>)
 8001696:	f001 fa11 	bl	8002abc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 ,a%10);
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	4b81      	ldr	r3, [pc, #516]	; (80018a4 <num1+0x244>)
 800169e:	fb83 1302 	smull	r1, r3, r3, r2
 80016a2:	1099      	asrs	r1, r3, #2
 80016a4:	17d3      	asrs	r3, r2, #31
 80016a6:	1ac9      	subs	r1, r1, r3
 80016a8:	460b      	mov	r3, r1
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	1ad1      	subs	r1, r2, r3
 80016b2:	b2cb      	uxtb	r3, r1
 80016b4:	461a      	mov	r2, r3
 80016b6:	2110      	movs	r1, #16
 80016b8:	4878      	ldr	r0, [pc, #480]	; (800189c <num1+0x23c>)
 80016ba:	f001 f9ff 	bl	8002abc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,((a%100)-a%10)/10);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a79      	ldr	r2, [pc, #484]	; (80018a8 <num1+0x248>)
 80016c2:	fb82 1203 	smull	r1, r2, r2, r3
 80016c6:	1151      	asrs	r1, r2, #5
 80016c8:	17da      	asrs	r2, r3, #31
 80016ca:	1a89      	subs	r1, r1, r2
 80016cc:	2264      	movs	r2, #100	; 0x64
 80016ce:	fb01 f202 	mul.w	r2, r1, r2
 80016d2:	1a99      	subs	r1, r3, r2
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	4b73      	ldr	r3, [pc, #460]	; (80018a4 <num1+0x244>)
 80016d8:	fb83 2300 	smull	r2, r3, r3, r0
 80016dc:	109a      	asrs	r2, r3, #2
 80016de:	17c3      	asrs	r3, r0, #31
 80016e0:	1ad2      	subs	r2, r2, r3
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	1ac2      	subs	r2, r0, r3
 80016ec:	1a8b      	subs	r3, r1, r2
 80016ee:	4a6d      	ldr	r2, [pc, #436]	; (80018a4 <num1+0x244>)
 80016f0:	fb82 1203 	smull	r1, r2, r2, r3
 80016f4:	1092      	asrs	r2, r2, #2
 80016f6:	17db      	asrs	r3, r3, #31
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	4866      	ldr	r0, [pc, #408]	; (800189c <num1+0x23c>)
 8001702:	f001 f9db 	bl	8002abc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, ((a%1000)-a%10-(((a%100)-a%10)/10))/100);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a68      	ldr	r2, [pc, #416]	; (80018ac <num1+0x24c>)
 800170a:	fb82 1203 	smull	r1, r2, r2, r3
 800170e:	1191      	asrs	r1, r2, #6
 8001710:	17da      	asrs	r2, r3, #31
 8001712:	1a89      	subs	r1, r1, r2
 8001714:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001718:	fb01 f202 	mul.w	r2, r1, r2
 800171c:	1a99      	subs	r1, r3, r2
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4b60      	ldr	r3, [pc, #384]	; (80018a4 <num1+0x244>)
 8001722:	fb83 2300 	smull	r2, r3, r3, r0
 8001726:	109a      	asrs	r2, r3, #2
 8001728:	17c3      	asrs	r3, r0, #31
 800172a:	1ad2      	subs	r2, r2, r3
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	1ac2      	subs	r2, r0, r3
 8001736:	1a8c      	subs	r4, r1, r2
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a5b      	ldr	r2, [pc, #364]	; (80018a8 <num1+0x248>)
 800173c:	fb82 1203 	smull	r1, r2, r2, r3
 8001740:	1151      	asrs	r1, r2, #5
 8001742:	17da      	asrs	r2, r3, #31
 8001744:	1a89      	subs	r1, r1, r2
 8001746:	2264      	movs	r2, #100	; 0x64
 8001748:	fb01 f202 	mul.w	r2, r1, r2
 800174c:	1a99      	subs	r1, r3, r2
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	4b54      	ldr	r3, [pc, #336]	; (80018a4 <num1+0x244>)
 8001752:	fb83 2300 	smull	r2, r3, r3, r0
 8001756:	109a      	asrs	r2, r3, #2
 8001758:	17c3      	asrs	r3, r0, #31
 800175a:	1ad2      	subs	r2, r2, r3
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	1ac2      	subs	r2, r0, r3
 8001766:	1a8b      	subs	r3, r1, r2
 8001768:	4a4e      	ldr	r2, [pc, #312]	; (80018a4 <num1+0x244>)
 800176a:	fb82 1203 	smull	r1, r2, r2, r3
 800176e:	1092      	asrs	r2, r2, #2
 8001770:	17db      	asrs	r3, r3, #31
 8001772:	1a9b      	subs	r3, r3, r2
 8001774:	4423      	add	r3, r4
 8001776:	4a4c      	ldr	r2, [pc, #304]	; (80018a8 <num1+0x248>)
 8001778:	fb82 1203 	smull	r1, r2, r2, r3
 800177c:	1152      	asrs	r2, r2, #5
 800177e:	17db      	asrs	r3, r3, #31
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	2140      	movs	r1, #64	; 0x40
 8001788:	4844      	ldr	r0, [pc, #272]	; (800189c <num1+0x23c>)
 800178a:	f001 f997 	bl	8002abc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, ((a%10000)-a%10-(((a%100)-a%10)/10)-(((a%1000)-a%10-(((a%100)-a%10)/10))/100))/1000);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a47      	ldr	r2, [pc, #284]	; (80018b0 <num1+0x250>)
 8001792:	fb82 1203 	smull	r1, r2, r2, r3
 8001796:	1311      	asrs	r1, r2, #12
 8001798:	17da      	asrs	r2, r3, #31
 800179a:	1a89      	subs	r1, r1, r2
 800179c:	f242 7210 	movw	r2, #10000	; 0x2710
 80017a0:	fb01 f202 	mul.w	r2, r1, r2
 80017a4:	1a99      	subs	r1, r3, r2
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	4b3e      	ldr	r3, [pc, #248]	; (80018a4 <num1+0x244>)
 80017aa:	fb83 2300 	smull	r2, r3, r3, r0
 80017ae:	109a      	asrs	r2, r3, #2
 80017b0:	17c3      	asrs	r3, r0, #31
 80017b2:	1ad2      	subs	r2, r2, r3
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	1ac2      	subs	r2, r0, r3
 80017be:	1a8c      	subs	r4, r1, r2
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a39      	ldr	r2, [pc, #228]	; (80018a8 <num1+0x248>)
 80017c4:	fb82 1203 	smull	r1, r2, r2, r3
 80017c8:	1151      	asrs	r1, r2, #5
 80017ca:	17da      	asrs	r2, r3, #31
 80017cc:	1a89      	subs	r1, r1, r2
 80017ce:	2264      	movs	r2, #100	; 0x64
 80017d0:	fb01 f202 	mul.w	r2, r1, r2
 80017d4:	1a99      	subs	r1, r3, r2
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <num1+0x244>)
 80017da:	fb83 2300 	smull	r2, r3, r3, r0
 80017de:	109a      	asrs	r2, r3, #2
 80017e0:	17c3      	asrs	r3, r0, #31
 80017e2:	1ad2      	subs	r2, r2, r3
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	1ac2      	subs	r2, r0, r3
 80017ee:	1a8b      	subs	r3, r1, r2
 80017f0:	4a2c      	ldr	r2, [pc, #176]	; (80018a4 <num1+0x244>)
 80017f2:	fb82 1203 	smull	r1, r2, r2, r3
 80017f6:	1092      	asrs	r2, r2, #2
 80017f8:	17db      	asrs	r3, r3, #31
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	441c      	add	r4, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a2a      	ldr	r2, [pc, #168]	; (80018ac <num1+0x24c>)
 8001802:	fb82 1203 	smull	r1, r2, r2, r3
 8001806:	1191      	asrs	r1, r2, #6
 8001808:	17da      	asrs	r2, r3, #31
 800180a:	1a89      	subs	r1, r1, r2
 800180c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001810:	fb01 f202 	mul.w	r2, r1, r2
 8001814:	1a99      	subs	r1, r3, r2
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <num1+0x244>)
 800181a:	fb83 2300 	smull	r2, r3, r3, r0
 800181e:	109a      	asrs	r2, r3, #2
 8001820:	17c3      	asrs	r3, r0, #31
 8001822:	1ad2      	subs	r2, r2, r3
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	1ac2      	subs	r2, r0, r3
 800182e:	1a8d      	subs	r5, r1, r2
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <num1+0x248>)
 8001834:	fb82 1203 	smull	r1, r2, r2, r3
 8001838:	1151      	asrs	r1, r2, #5
 800183a:	17da      	asrs	r2, r3, #31
 800183c:	1a89      	subs	r1, r1, r2
 800183e:	2264      	movs	r2, #100	; 0x64
 8001840:	fb01 f202 	mul.w	r2, r1, r2
 8001844:	1a99      	subs	r1, r3, r2
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <num1+0x244>)
 800184a:	fb83 2300 	smull	r2, r3, r3, r0
 800184e:	109a      	asrs	r2, r3, #2
 8001850:	17c3      	asrs	r3, r0, #31
 8001852:	1ad2      	subs	r2, r2, r3
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	1ac2      	subs	r2, r0, r3
 800185e:	1a8b      	subs	r3, r1, r2
 8001860:	4a10      	ldr	r2, [pc, #64]	; (80018a4 <num1+0x244>)
 8001862:	fb82 1203 	smull	r1, r2, r2, r3
 8001866:	1092      	asrs	r2, r2, #2
 8001868:	17db      	asrs	r3, r3, #31
 800186a:	1a9b      	subs	r3, r3, r2
 800186c:	442b      	add	r3, r5
 800186e:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <num1+0x248>)
 8001870:	fb82 1203 	smull	r1, r2, r2, r3
 8001874:	1152      	asrs	r2, r2, #5
 8001876:	17db      	asrs	r3, r3, #31
 8001878:	1a9b      	subs	r3, r3, r2
 800187a:	4423      	add	r3, r4
 800187c:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <num1+0x24c>)
 800187e:	fb82 1203 	smull	r1, r2, r2, r3
 8001882:	1192      	asrs	r2, r2, #6
 8001884:	17db      	asrs	r3, r3, #31
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	2120      	movs	r1, #32
 800188e:	4803      	ldr	r0, [pc, #12]	; (800189c <num1+0x23c>)
 8001890:	f001 f914 	bl	8002abc <HAL_GPIO_WritePin>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bdb0      	pop	{r4, r5, r7, pc}
 800189c:	48000c00 	.word	0x48000c00
 80018a0:	48000800 	.word	0x48000800
 80018a4:	66666667 	.word	0x66666667
 80018a8:	51eb851f 	.word	0x51eb851f
 80018ac:	10624dd3 	.word	0x10624dd3
 80018b0:	68db8bad 	.word	0x68db8bad

080018b4 <num2>:

void num2(int b){
 80018b4:	b5b0      	push	{r4, r5, r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80018bc:	2201      	movs	r2, #1
 80018be:	2101      	movs	r1, #1
 80018c0:	488b      	ldr	r0, [pc, #556]	; (8001af0 <num2+0x23c>)
 80018c2:	f001 f8fb 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,1);
 80018c6:	2201      	movs	r2, #1
 80018c8:	2102      	movs	r1, #2
 80018ca:	4889      	ldr	r0, [pc, #548]	; (8001af0 <num2+0x23c>)
 80018cc:	f001 f8f6 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 80018d0:	2201      	movs	r2, #1
 80018d2:	2104      	movs	r1, #4
 80018d4:	4886      	ldr	r0, [pc, #536]	; (8001af0 <num2+0x23c>)
 80018d6:	f001 f8f1 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2108      	movs	r1, #8
 80018de:	4884      	ldr	r0, [pc, #528]	; (8001af0 <num2+0x23c>)
 80018e0:	f001 f8ec 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2101      	movs	r1, #1
 80018e8:	4882      	ldr	r0, [pc, #520]	; (8001af4 <num2+0x240>)
 80018ea:	f001 f8e7 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 ,b%10);
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	4b81      	ldr	r3, [pc, #516]	; (8001af8 <num2+0x244>)
 80018f2:	fb83 1302 	smull	r1, r3, r3, r2
 80018f6:	1099      	asrs	r1, r3, #2
 80018f8:	17d3      	asrs	r3, r2, #31
 80018fa:	1ac9      	subs	r1, r1, r3
 80018fc:	460b      	mov	r3, r1
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	1ad1      	subs	r1, r2, r3
 8001906:	b2cb      	uxtb	r3, r1
 8001908:	461a      	mov	r2, r3
 800190a:	2110      	movs	r1, #16
 800190c:	4878      	ldr	r0, [pc, #480]	; (8001af0 <num2+0x23c>)
 800190e:	f001 f8d5 	bl	8002abc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,((b%100)-b%10)/10);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a79      	ldr	r2, [pc, #484]	; (8001afc <num2+0x248>)
 8001916:	fb82 1203 	smull	r1, r2, r2, r3
 800191a:	1151      	asrs	r1, r2, #5
 800191c:	17da      	asrs	r2, r3, #31
 800191e:	1a89      	subs	r1, r1, r2
 8001920:	2264      	movs	r2, #100	; 0x64
 8001922:	fb01 f202 	mul.w	r2, r1, r2
 8001926:	1a99      	subs	r1, r3, r2
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <num2+0x244>)
 800192c:	fb83 2300 	smull	r2, r3, r3, r0
 8001930:	109a      	asrs	r2, r3, #2
 8001932:	17c3      	asrs	r3, r0, #31
 8001934:	1ad2      	subs	r2, r2, r3
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	1ac2      	subs	r2, r0, r3
 8001940:	1a8b      	subs	r3, r1, r2
 8001942:	4a6d      	ldr	r2, [pc, #436]	; (8001af8 <num2+0x244>)
 8001944:	fb82 1203 	smull	r1, r2, r2, r3
 8001948:	1092      	asrs	r2, r2, #2
 800194a:	17db      	asrs	r3, r3, #31
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	4866      	ldr	r0, [pc, #408]	; (8001af0 <num2+0x23c>)
 8001956:	f001 f8b1 	bl	8002abc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, ((b%1000)-b%10-(((b%100)-b%10)/10))/100);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a68      	ldr	r2, [pc, #416]	; (8001b00 <num2+0x24c>)
 800195e:	fb82 1203 	smull	r1, r2, r2, r3
 8001962:	1191      	asrs	r1, r2, #6
 8001964:	17da      	asrs	r2, r3, #31
 8001966:	1a89      	subs	r1, r1, r2
 8001968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800196c:	fb01 f202 	mul.w	r2, r1, r2
 8001970:	1a99      	subs	r1, r3, r2
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	4b60      	ldr	r3, [pc, #384]	; (8001af8 <num2+0x244>)
 8001976:	fb83 2300 	smull	r2, r3, r3, r0
 800197a:	109a      	asrs	r2, r3, #2
 800197c:	17c3      	asrs	r3, r0, #31
 800197e:	1ad2      	subs	r2, r2, r3
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	1ac2      	subs	r2, r0, r3
 800198a:	1a8c      	subs	r4, r1, r2
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a5b      	ldr	r2, [pc, #364]	; (8001afc <num2+0x248>)
 8001990:	fb82 1203 	smull	r1, r2, r2, r3
 8001994:	1151      	asrs	r1, r2, #5
 8001996:	17da      	asrs	r2, r3, #31
 8001998:	1a89      	subs	r1, r1, r2
 800199a:	2264      	movs	r2, #100	; 0x64
 800199c:	fb01 f202 	mul.w	r2, r1, r2
 80019a0:	1a99      	subs	r1, r3, r2
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	4b54      	ldr	r3, [pc, #336]	; (8001af8 <num2+0x244>)
 80019a6:	fb83 2300 	smull	r2, r3, r3, r0
 80019aa:	109a      	asrs	r2, r3, #2
 80019ac:	17c3      	asrs	r3, r0, #31
 80019ae:	1ad2      	subs	r2, r2, r3
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	1ac2      	subs	r2, r0, r3
 80019ba:	1a8b      	subs	r3, r1, r2
 80019bc:	4a4e      	ldr	r2, [pc, #312]	; (8001af8 <num2+0x244>)
 80019be:	fb82 1203 	smull	r1, r2, r2, r3
 80019c2:	1092      	asrs	r2, r2, #2
 80019c4:	17db      	asrs	r3, r3, #31
 80019c6:	1a9b      	subs	r3, r3, r2
 80019c8:	4423      	add	r3, r4
 80019ca:	4a4c      	ldr	r2, [pc, #304]	; (8001afc <num2+0x248>)
 80019cc:	fb82 1203 	smull	r1, r2, r2, r3
 80019d0:	1152      	asrs	r2, r2, #5
 80019d2:	17db      	asrs	r3, r3, #31
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	2140      	movs	r1, #64	; 0x40
 80019dc:	4844      	ldr	r0, [pc, #272]	; (8001af0 <num2+0x23c>)
 80019de:	f001 f86d 	bl	8002abc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, ((b%10000)-b%10-(((b%100)-b%10)/10)-(((b%1000)-b%10-(((b%100)-b%10)/10))/100))/1000);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a47      	ldr	r2, [pc, #284]	; (8001b04 <num2+0x250>)
 80019e6:	fb82 1203 	smull	r1, r2, r2, r3
 80019ea:	1311      	asrs	r1, r2, #12
 80019ec:	17da      	asrs	r2, r3, #31
 80019ee:	1a89      	subs	r1, r1, r2
 80019f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80019f4:	fb01 f202 	mul.w	r2, r1, r2
 80019f8:	1a99      	subs	r1, r3, r2
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <num2+0x244>)
 80019fe:	fb83 2300 	smull	r2, r3, r3, r0
 8001a02:	109a      	asrs	r2, r3, #2
 8001a04:	17c3      	asrs	r3, r0, #31
 8001a06:	1ad2      	subs	r2, r2, r3
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	1ac2      	subs	r2, r0, r3
 8001a12:	1a8c      	subs	r4, r1, r2
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a39      	ldr	r2, [pc, #228]	; (8001afc <num2+0x248>)
 8001a18:	fb82 1203 	smull	r1, r2, r2, r3
 8001a1c:	1151      	asrs	r1, r2, #5
 8001a1e:	17da      	asrs	r2, r3, #31
 8001a20:	1a89      	subs	r1, r1, r2
 8001a22:	2264      	movs	r2, #100	; 0x64
 8001a24:	fb01 f202 	mul.w	r2, r1, r2
 8001a28:	1a99      	subs	r1, r3, r2
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <num2+0x244>)
 8001a2e:	fb83 2300 	smull	r2, r3, r3, r0
 8001a32:	109a      	asrs	r2, r3, #2
 8001a34:	17c3      	asrs	r3, r0, #31
 8001a36:	1ad2      	subs	r2, r2, r3
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	1ac2      	subs	r2, r0, r3
 8001a42:	1a8b      	subs	r3, r1, r2
 8001a44:	4a2c      	ldr	r2, [pc, #176]	; (8001af8 <num2+0x244>)
 8001a46:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4a:	1092      	asrs	r2, r2, #2
 8001a4c:	17db      	asrs	r3, r3, #31
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	441c      	add	r4, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a2a      	ldr	r2, [pc, #168]	; (8001b00 <num2+0x24c>)
 8001a56:	fb82 1203 	smull	r1, r2, r2, r3
 8001a5a:	1191      	asrs	r1, r2, #6
 8001a5c:	17da      	asrs	r2, r3, #31
 8001a5e:	1a89      	subs	r1, r1, r2
 8001a60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a64:	fb01 f202 	mul.w	r2, r1, r2
 8001a68:	1a99      	subs	r1, r3, r2
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <num2+0x244>)
 8001a6e:	fb83 2300 	smull	r2, r3, r3, r0
 8001a72:	109a      	asrs	r2, r3, #2
 8001a74:	17c3      	asrs	r3, r0, #31
 8001a76:	1ad2      	subs	r2, r2, r3
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	1ac2      	subs	r2, r0, r3
 8001a82:	1a8d      	subs	r5, r1, r2
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a1d      	ldr	r2, [pc, #116]	; (8001afc <num2+0x248>)
 8001a88:	fb82 1203 	smull	r1, r2, r2, r3
 8001a8c:	1151      	asrs	r1, r2, #5
 8001a8e:	17da      	asrs	r2, r3, #31
 8001a90:	1a89      	subs	r1, r1, r2
 8001a92:	2264      	movs	r2, #100	; 0x64
 8001a94:	fb01 f202 	mul.w	r2, r1, r2
 8001a98:	1a99      	subs	r1, r3, r2
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <num2+0x244>)
 8001a9e:	fb83 2300 	smull	r2, r3, r3, r0
 8001aa2:	109a      	asrs	r2, r3, #2
 8001aa4:	17c3      	asrs	r3, r0, #31
 8001aa6:	1ad2      	subs	r2, r2, r3
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	1ac2      	subs	r2, r0, r3
 8001ab2:	1a8b      	subs	r3, r1, r2
 8001ab4:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <num2+0x244>)
 8001ab6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aba:	1092      	asrs	r2, r2, #2
 8001abc:	17db      	asrs	r3, r3, #31
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	442b      	add	r3, r5
 8001ac2:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <num2+0x248>)
 8001ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac8:	1152      	asrs	r2, r2, #5
 8001aca:	17db      	asrs	r3, r3, #31
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	4423      	add	r3, r4
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <num2+0x24c>)
 8001ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad6:	1192      	asrs	r2, r2, #6
 8001ad8:	17db      	asrs	r3, r3, #31
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2120      	movs	r1, #32
 8001ae2:	4803      	ldr	r0, [pc, #12]	; (8001af0 <num2+0x23c>)
 8001ae4:	f000 ffea 	bl	8002abc <HAL_GPIO_WritePin>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bdb0      	pop	{r4, r5, r7, pc}
 8001af0:	48000c00 	.word	0x48000c00
 8001af4:	48000800 	.word	0x48000800
 8001af8:	66666667 	.word	0x66666667
 8001afc:	51eb851f 	.word	0x51eb851f
 8001b00:	10624dd3 	.word	0x10624dd3
 8001b04:	68db8bad 	.word	0x68db8bad

08001b08 <num3>:

void num3(int c){
 8001b08:	b5b0      	push	{r4, r5, r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001b10:	2201      	movs	r2, #1
 8001b12:	2101      	movs	r1, #1
 8001b14:	488b      	ldr	r0, [pc, #556]	; (8001d44 <num3+0x23c>)
 8001b16:	f000 ffd1 	bl	8002abc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,1);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	4889      	ldr	r0, [pc, #548]	; (8001d44 <num3+0x23c>)
 8001b20:	f000 ffcc 	bl	8002abc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2104      	movs	r1, #4
 8001b28:	4886      	ldr	r0, [pc, #536]	; (8001d44 <num3+0x23c>)
 8001b2a:	f000 ffc7 	bl	8002abc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	2108      	movs	r1, #8
 8001b32:	4884      	ldr	r0, [pc, #528]	; (8001d44 <num3+0x23c>)
 8001b34:	f000 ffc2 	bl	8002abc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2108      	movs	r1, #8
 8001b3c:	4882      	ldr	r0, [pc, #520]	; (8001d48 <num3+0x240>)
 8001b3e:	f000 ffbd 	bl	8002abc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 ,c%10);
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4b81      	ldr	r3, [pc, #516]	; (8001d4c <num3+0x244>)
 8001b46:	fb83 1302 	smull	r1, r3, r3, r2
 8001b4a:	1099      	asrs	r1, r3, #2
 8001b4c:	17d3      	asrs	r3, r2, #31
 8001b4e:	1ac9      	subs	r1, r1, r3
 8001b50:	460b      	mov	r3, r1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	1ad1      	subs	r1, r2, r3
 8001b5a:	b2cb      	uxtb	r3, r1
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2110      	movs	r1, #16
 8001b60:	4878      	ldr	r0, [pc, #480]	; (8001d44 <num3+0x23c>)
 8001b62:	f000 ffab 	bl	8002abc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,((c%100)-c%10)/10);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a79      	ldr	r2, [pc, #484]	; (8001d50 <num3+0x248>)
 8001b6a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b6e:	1151      	asrs	r1, r2, #5
 8001b70:	17da      	asrs	r2, r3, #31
 8001b72:	1a89      	subs	r1, r1, r2
 8001b74:	2264      	movs	r2, #100	; 0x64
 8001b76:	fb01 f202 	mul.w	r2, r1, r2
 8001b7a:	1a99      	subs	r1, r3, r2
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	4b73      	ldr	r3, [pc, #460]	; (8001d4c <num3+0x244>)
 8001b80:	fb83 2300 	smull	r2, r3, r3, r0
 8001b84:	109a      	asrs	r2, r3, #2
 8001b86:	17c3      	asrs	r3, r0, #31
 8001b88:	1ad2      	subs	r2, r2, r3
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	1ac2      	subs	r2, r0, r3
 8001b94:	1a8b      	subs	r3, r1, r2
 8001b96:	4a6d      	ldr	r2, [pc, #436]	; (8001d4c <num3+0x244>)
 8001b98:	fb82 1203 	smull	r1, r2, r2, r3
 8001b9c:	1092      	asrs	r2, r2, #2
 8001b9e:	17db      	asrs	r3, r3, #31
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2180      	movs	r1, #128	; 0x80
 8001ba8:	4866      	ldr	r0, [pc, #408]	; (8001d44 <num3+0x23c>)
 8001baa:	f000 ff87 	bl	8002abc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, ((c%1000)-c%10-(((c%100)-c%10)/10))/100);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a68      	ldr	r2, [pc, #416]	; (8001d54 <num3+0x24c>)
 8001bb2:	fb82 1203 	smull	r1, r2, r2, r3
 8001bb6:	1191      	asrs	r1, r2, #6
 8001bb8:	17da      	asrs	r2, r3, #31
 8001bba:	1a89      	subs	r1, r1, r2
 8001bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bc0:	fb01 f202 	mul.w	r2, r1, r2
 8001bc4:	1a99      	subs	r1, r3, r2
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	4b60      	ldr	r3, [pc, #384]	; (8001d4c <num3+0x244>)
 8001bca:	fb83 2300 	smull	r2, r3, r3, r0
 8001bce:	109a      	asrs	r2, r3, #2
 8001bd0:	17c3      	asrs	r3, r0, #31
 8001bd2:	1ad2      	subs	r2, r2, r3
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	1ac2      	subs	r2, r0, r3
 8001bde:	1a8c      	subs	r4, r1, r2
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a5b      	ldr	r2, [pc, #364]	; (8001d50 <num3+0x248>)
 8001be4:	fb82 1203 	smull	r1, r2, r2, r3
 8001be8:	1151      	asrs	r1, r2, #5
 8001bea:	17da      	asrs	r2, r3, #31
 8001bec:	1a89      	subs	r1, r1, r2
 8001bee:	2264      	movs	r2, #100	; 0x64
 8001bf0:	fb01 f202 	mul.w	r2, r1, r2
 8001bf4:	1a99      	subs	r1, r3, r2
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	4b54      	ldr	r3, [pc, #336]	; (8001d4c <num3+0x244>)
 8001bfa:	fb83 2300 	smull	r2, r3, r3, r0
 8001bfe:	109a      	asrs	r2, r3, #2
 8001c00:	17c3      	asrs	r3, r0, #31
 8001c02:	1ad2      	subs	r2, r2, r3
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	1ac2      	subs	r2, r0, r3
 8001c0e:	1a8b      	subs	r3, r1, r2
 8001c10:	4a4e      	ldr	r2, [pc, #312]	; (8001d4c <num3+0x244>)
 8001c12:	fb82 1203 	smull	r1, r2, r2, r3
 8001c16:	1092      	asrs	r2, r2, #2
 8001c18:	17db      	asrs	r3, r3, #31
 8001c1a:	1a9b      	subs	r3, r3, r2
 8001c1c:	4423      	add	r3, r4
 8001c1e:	4a4c      	ldr	r2, [pc, #304]	; (8001d50 <num3+0x248>)
 8001c20:	fb82 1203 	smull	r1, r2, r2, r3
 8001c24:	1152      	asrs	r2, r2, #5
 8001c26:	17db      	asrs	r3, r3, #31
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	2140      	movs	r1, #64	; 0x40
 8001c30:	4844      	ldr	r0, [pc, #272]	; (8001d44 <num3+0x23c>)
 8001c32:	f000 ff43 	bl	8002abc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, ((c%10000)-c%10-(((c%100)-c%10)/10)-(((c%1000)-c%10-(((c%100)-c%10)/10))/100))/1000);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a47      	ldr	r2, [pc, #284]	; (8001d58 <num3+0x250>)
 8001c3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c3e:	1311      	asrs	r1, r2, #12
 8001c40:	17da      	asrs	r2, r3, #31
 8001c42:	1a89      	subs	r1, r1, r2
 8001c44:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c48:	fb01 f202 	mul.w	r2, r1, r2
 8001c4c:	1a99      	subs	r1, r3, r2
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	4b3e      	ldr	r3, [pc, #248]	; (8001d4c <num3+0x244>)
 8001c52:	fb83 2300 	smull	r2, r3, r3, r0
 8001c56:	109a      	asrs	r2, r3, #2
 8001c58:	17c3      	asrs	r3, r0, #31
 8001c5a:	1ad2      	subs	r2, r2, r3
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	1ac2      	subs	r2, r0, r3
 8001c66:	1a8c      	subs	r4, r1, r2
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a39      	ldr	r2, [pc, #228]	; (8001d50 <num3+0x248>)
 8001c6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c70:	1151      	asrs	r1, r2, #5
 8001c72:	17da      	asrs	r2, r3, #31
 8001c74:	1a89      	subs	r1, r1, r2
 8001c76:	2264      	movs	r2, #100	; 0x64
 8001c78:	fb01 f202 	mul.w	r2, r1, r2
 8001c7c:	1a99      	subs	r1, r3, r2
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <num3+0x244>)
 8001c82:	fb83 2300 	smull	r2, r3, r3, r0
 8001c86:	109a      	asrs	r2, r3, #2
 8001c88:	17c3      	asrs	r3, r0, #31
 8001c8a:	1ad2      	subs	r2, r2, r3
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	1ac2      	subs	r2, r0, r3
 8001c96:	1a8b      	subs	r3, r1, r2
 8001c98:	4a2c      	ldr	r2, [pc, #176]	; (8001d4c <num3+0x244>)
 8001c9a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c9e:	1092      	asrs	r2, r2, #2
 8001ca0:	17db      	asrs	r3, r3, #31
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	441c      	add	r4, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a2a      	ldr	r2, [pc, #168]	; (8001d54 <num3+0x24c>)
 8001caa:	fb82 1203 	smull	r1, r2, r2, r3
 8001cae:	1191      	asrs	r1, r2, #6
 8001cb0:	17da      	asrs	r2, r3, #31
 8001cb2:	1a89      	subs	r1, r1, r2
 8001cb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cb8:	fb01 f202 	mul.w	r2, r1, r2
 8001cbc:	1a99      	subs	r1, r3, r2
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <num3+0x244>)
 8001cc2:	fb83 2300 	smull	r2, r3, r3, r0
 8001cc6:	109a      	asrs	r2, r3, #2
 8001cc8:	17c3      	asrs	r3, r0, #31
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	1ac2      	subs	r2, r0, r3
 8001cd6:	1a8d      	subs	r5, r1, r2
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <num3+0x248>)
 8001cdc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce0:	1151      	asrs	r1, r2, #5
 8001ce2:	17da      	asrs	r2, r3, #31
 8001ce4:	1a89      	subs	r1, r1, r2
 8001ce6:	2264      	movs	r2, #100	; 0x64
 8001ce8:	fb01 f202 	mul.w	r2, r1, r2
 8001cec:	1a99      	subs	r1, r3, r2
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <num3+0x244>)
 8001cf2:	fb83 2300 	smull	r2, r3, r3, r0
 8001cf6:	109a      	asrs	r2, r3, #2
 8001cf8:	17c3      	asrs	r3, r0, #31
 8001cfa:	1ad2      	subs	r2, r2, r3
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	1ac2      	subs	r2, r0, r3
 8001d06:	1a8b      	subs	r3, r1, r2
 8001d08:	4a10      	ldr	r2, [pc, #64]	; (8001d4c <num3+0x244>)
 8001d0a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d0e:	1092      	asrs	r2, r2, #2
 8001d10:	17db      	asrs	r3, r3, #31
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	442b      	add	r3, r5
 8001d16:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <num3+0x248>)
 8001d18:	fb82 1203 	smull	r1, r2, r2, r3
 8001d1c:	1152      	asrs	r2, r2, #5
 8001d1e:	17db      	asrs	r3, r3, #31
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	4423      	add	r3, r4
 8001d24:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <num3+0x24c>)
 8001d26:	fb82 1203 	smull	r1, r2, r2, r3
 8001d2a:	1192      	asrs	r2, r2, #6
 8001d2c:	17db      	asrs	r3, r3, #31
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	2120      	movs	r1, #32
 8001d36:	4803      	ldr	r0, [pc, #12]	; (8001d44 <num3+0x23c>)
 8001d38:	f000 fec0 	bl	8002abc <HAL_GPIO_WritePin>
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bdb0      	pop	{r4, r5, r7, pc}
 8001d44:	48000c00 	.word	0x48000c00
 8001d48:	48000800 	.word	0x48000800
 8001d4c:	66666667 	.word	0x66666667
 8001d50:	51eb851f 	.word	0x51eb851f
 8001d54:	10624dd3 	.word	0x10624dd3
 8001d58:	68db8bad 	.word	0x68db8bad

08001d5c <num4>:
void num4(int d){
 8001d5c:	b5b0      	push	{r4, r5, r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001d64:	2201      	movs	r2, #1
 8001d66:	2101      	movs	r1, #1
 8001d68:	488b      	ldr	r0, [pc, #556]	; (8001f98 <num4+0x23c>)
 8001d6a:	f000 fea7 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2102      	movs	r1, #2
 8001d72:	4889      	ldr	r0, [pc, #548]	; (8001f98 <num4+0x23c>)
 8001d74:	f000 fea2 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4886      	ldr	r0, [pc, #536]	; (8001f98 <num4+0x23c>)
 8001d7e:	f000 fe9d 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 8001d82:	2201      	movs	r2, #1
 8001d84:	2108      	movs	r1, #8
 8001d86:	4884      	ldr	r0, [pc, #528]	; (8001f98 <num4+0x23c>)
 8001d88:	f000 fe98 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2101      	movs	r1, #1
 8001d90:	4882      	ldr	r0, [pc, #520]	; (8001f9c <num4+0x240>)
 8001d92:	f000 fe93 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 ,d%10);
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4b81      	ldr	r3, [pc, #516]	; (8001fa0 <num4+0x244>)
 8001d9a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d9e:	1099      	asrs	r1, r3, #2
 8001da0:	17d3      	asrs	r3, r2, #31
 8001da2:	1ac9      	subs	r1, r1, r3
 8001da4:	460b      	mov	r3, r1
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	1ad1      	subs	r1, r2, r3
 8001dae:	b2cb      	uxtb	r3, r1
 8001db0:	461a      	mov	r2, r3
 8001db2:	2110      	movs	r1, #16
 8001db4:	4878      	ldr	r0, [pc, #480]	; (8001f98 <num4+0x23c>)
 8001db6:	f000 fe81 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7,((d%100)-d%10)/10);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a79      	ldr	r2, [pc, #484]	; (8001fa4 <num4+0x248>)
 8001dbe:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc2:	1151      	asrs	r1, r2, #5
 8001dc4:	17da      	asrs	r2, r3, #31
 8001dc6:	1a89      	subs	r1, r1, r2
 8001dc8:	2264      	movs	r2, #100	; 0x64
 8001dca:	fb01 f202 	mul.w	r2, r1, r2
 8001dce:	1a99      	subs	r1, r3, r2
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	4b73      	ldr	r3, [pc, #460]	; (8001fa0 <num4+0x244>)
 8001dd4:	fb83 2300 	smull	r2, r3, r3, r0
 8001dd8:	109a      	asrs	r2, r3, #2
 8001dda:	17c3      	asrs	r3, r0, #31
 8001ddc:	1ad2      	subs	r2, r2, r3
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	1ac2      	subs	r2, r0, r3
 8001de8:	1a8b      	subs	r3, r1, r2
 8001dea:	4a6d      	ldr	r2, [pc, #436]	; (8001fa0 <num4+0x244>)
 8001dec:	fb82 1203 	smull	r1, r2, r2, r3
 8001df0:	1092      	asrs	r2, r2, #2
 8001df2:	17db      	asrs	r3, r3, #31
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2180      	movs	r1, #128	; 0x80
 8001dfc:	4866      	ldr	r0, [pc, #408]	; (8001f98 <num4+0x23c>)
 8001dfe:	f000 fe5d 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, ((d%1000)-d%10-(((d%100)-d%10)/10))/100);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a68      	ldr	r2, [pc, #416]	; (8001fa8 <num4+0x24c>)
 8001e06:	fb82 1203 	smull	r1, r2, r2, r3
 8001e0a:	1191      	asrs	r1, r2, #6
 8001e0c:	17da      	asrs	r2, r3, #31
 8001e0e:	1a89      	subs	r1, r1, r2
 8001e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e14:	fb01 f202 	mul.w	r2, r1, r2
 8001e18:	1a99      	subs	r1, r3, r2
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	4b60      	ldr	r3, [pc, #384]	; (8001fa0 <num4+0x244>)
 8001e1e:	fb83 2300 	smull	r2, r3, r3, r0
 8001e22:	109a      	asrs	r2, r3, #2
 8001e24:	17c3      	asrs	r3, r0, #31
 8001e26:	1ad2      	subs	r2, r2, r3
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	1ac2      	subs	r2, r0, r3
 8001e32:	1a8c      	subs	r4, r1, r2
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a5b      	ldr	r2, [pc, #364]	; (8001fa4 <num4+0x248>)
 8001e38:	fb82 1203 	smull	r1, r2, r2, r3
 8001e3c:	1151      	asrs	r1, r2, #5
 8001e3e:	17da      	asrs	r2, r3, #31
 8001e40:	1a89      	subs	r1, r1, r2
 8001e42:	2264      	movs	r2, #100	; 0x64
 8001e44:	fb01 f202 	mul.w	r2, r1, r2
 8001e48:	1a99      	subs	r1, r3, r2
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	4b54      	ldr	r3, [pc, #336]	; (8001fa0 <num4+0x244>)
 8001e4e:	fb83 2300 	smull	r2, r3, r3, r0
 8001e52:	109a      	asrs	r2, r3, #2
 8001e54:	17c3      	asrs	r3, r0, #31
 8001e56:	1ad2      	subs	r2, r2, r3
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	1ac2      	subs	r2, r0, r3
 8001e62:	1a8b      	subs	r3, r1, r2
 8001e64:	4a4e      	ldr	r2, [pc, #312]	; (8001fa0 <num4+0x244>)
 8001e66:	fb82 1203 	smull	r1, r2, r2, r3
 8001e6a:	1092      	asrs	r2, r2, #2
 8001e6c:	17db      	asrs	r3, r3, #31
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	4423      	add	r3, r4
 8001e72:	4a4c      	ldr	r2, [pc, #304]	; (8001fa4 <num4+0x248>)
 8001e74:	fb82 1203 	smull	r1, r2, r2, r3
 8001e78:	1152      	asrs	r2, r2, #5
 8001e7a:	17db      	asrs	r3, r3, #31
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	2140      	movs	r1, #64	; 0x40
 8001e84:	4844      	ldr	r0, [pc, #272]	; (8001f98 <num4+0x23c>)
 8001e86:	f000 fe19 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, ((d%10000)-d%10-(((d%100)-d%10)/10)-(((d%1000)-d%10-(((d%100)-d%10)/10))/100))/1000);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a47      	ldr	r2, [pc, #284]	; (8001fac <num4+0x250>)
 8001e8e:	fb82 1203 	smull	r1, r2, r2, r3
 8001e92:	1311      	asrs	r1, r2, #12
 8001e94:	17da      	asrs	r2, r3, #31
 8001e96:	1a89      	subs	r1, r1, r2
 8001e98:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e9c:	fb01 f202 	mul.w	r2, r1, r2
 8001ea0:	1a99      	subs	r1, r3, r2
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <num4+0x244>)
 8001ea6:	fb83 2300 	smull	r2, r3, r3, r0
 8001eaa:	109a      	asrs	r2, r3, #2
 8001eac:	17c3      	asrs	r3, r0, #31
 8001eae:	1ad2      	subs	r2, r2, r3
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	1ac2      	subs	r2, r0, r3
 8001eba:	1a8c      	subs	r4, r1, r2
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a39      	ldr	r2, [pc, #228]	; (8001fa4 <num4+0x248>)
 8001ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ec4:	1151      	asrs	r1, r2, #5
 8001ec6:	17da      	asrs	r2, r3, #31
 8001ec8:	1a89      	subs	r1, r1, r2
 8001eca:	2264      	movs	r2, #100	; 0x64
 8001ecc:	fb01 f202 	mul.w	r2, r1, r2
 8001ed0:	1a99      	subs	r1, r3, r2
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	4b32      	ldr	r3, [pc, #200]	; (8001fa0 <num4+0x244>)
 8001ed6:	fb83 2300 	smull	r2, r3, r3, r0
 8001eda:	109a      	asrs	r2, r3, #2
 8001edc:	17c3      	asrs	r3, r0, #31
 8001ede:	1ad2      	subs	r2, r2, r3
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	1ac2      	subs	r2, r0, r3
 8001eea:	1a8b      	subs	r3, r1, r2
 8001eec:	4a2c      	ldr	r2, [pc, #176]	; (8001fa0 <num4+0x244>)
 8001eee:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef2:	1092      	asrs	r2, r2, #2
 8001ef4:	17db      	asrs	r3, r3, #31
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	441c      	add	r4, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2a      	ldr	r2, [pc, #168]	; (8001fa8 <num4+0x24c>)
 8001efe:	fb82 1203 	smull	r1, r2, r2, r3
 8001f02:	1191      	asrs	r1, r2, #6
 8001f04:	17da      	asrs	r2, r3, #31
 8001f06:	1a89      	subs	r1, r1, r2
 8001f08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f0c:	fb01 f202 	mul.w	r2, r1, r2
 8001f10:	1a99      	subs	r1, r3, r2
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <num4+0x244>)
 8001f16:	fb83 2300 	smull	r2, r3, r3, r0
 8001f1a:	109a      	asrs	r2, r3, #2
 8001f1c:	17c3      	asrs	r3, r0, #31
 8001f1e:	1ad2      	subs	r2, r2, r3
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	1ac2      	subs	r2, r0, r3
 8001f2a:	1a8d      	subs	r5, r1, r2
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a1d      	ldr	r2, [pc, #116]	; (8001fa4 <num4+0x248>)
 8001f30:	fb82 1203 	smull	r1, r2, r2, r3
 8001f34:	1151      	asrs	r1, r2, #5
 8001f36:	17da      	asrs	r2, r3, #31
 8001f38:	1a89      	subs	r1, r1, r2
 8001f3a:	2264      	movs	r2, #100	; 0x64
 8001f3c:	fb01 f202 	mul.w	r2, r1, r2
 8001f40:	1a99      	subs	r1, r3, r2
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <num4+0x244>)
 8001f46:	fb83 2300 	smull	r2, r3, r3, r0
 8001f4a:	109a      	asrs	r2, r3, #2
 8001f4c:	17c3      	asrs	r3, r0, #31
 8001f4e:	1ad2      	subs	r2, r2, r3
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	1ac2      	subs	r2, r0, r3
 8001f5a:	1a8b      	subs	r3, r1, r2
 8001f5c:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <num4+0x244>)
 8001f5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f62:	1092      	asrs	r2, r2, #2
 8001f64:	17db      	asrs	r3, r3, #31
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	442b      	add	r3, r5
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <num4+0x248>)
 8001f6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f70:	1152      	asrs	r2, r2, #5
 8001f72:	17db      	asrs	r3, r3, #31
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	4423      	add	r3, r4
 8001f78:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <num4+0x24c>)
 8001f7a:	fb82 1203 	smull	r1, r2, r2, r3
 8001f7e:	1192      	asrs	r2, r2, #6
 8001f80:	17db      	asrs	r3, r3, #31
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	2120      	movs	r1, #32
 8001f8a:	4803      	ldr	r0, [pc, #12]	; (8001f98 <num4+0x23c>)
 8001f8c:	f000 fd96 	bl	8002abc <HAL_GPIO_WritePin>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bdb0      	pop	{r4, r5, r7, pc}
 8001f98:	48000c00 	.word	0x48000c00
 8001f9c:	48000800 	.word	0x48000800
 8001fa0:	66666667 	.word	0x66666667
 8001fa4:	51eb851f 	.word	0x51eb851f
 8001fa8:	10624dd3 	.word	0x10624dd3
 8001fac:	68db8bad 	.word	0x68db8bad

08001fb0 <decimalToBinary>:

int decimalToBinary(int num) {
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    if (num == 0) {
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <decimalToBinary+0x12>
        return 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e035      	b.n	800202e <decimalToBinary+0x7e>
    }

   // Stores binary representation of number.
   int binaryNum[4]={0,0,0,0}; // Assuming 32 bit integer.
 8001fc2:	f107 0308 	add.w	r3, r7, #8
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]
   int i=0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]

   for ( ;num > 0; ){
 8001fd4:	e012      	b.n	8001ffc <decimalToBinary+0x4c>
      binaryNum[i++] = num % 2;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	61fa      	str	r2, [r7, #28]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	f002 0201 	and.w	r2, r2, #1
 8001fe4:	bfb8      	it	lt
 8001fe6:	4252      	neglt	r2, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	3320      	adds	r3, #32
 8001fec:	443b      	add	r3, r7
 8001fee:	f843 2c18 	str.w	r2, [r3, #-24]
      num /= 2;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	0fda      	lsrs	r2, r3, #31
 8001ff6:	4413      	add	r3, r2
 8001ff8:	105b      	asrs	r3, r3, #1
 8001ffa:	607b      	str	r3, [r7, #4]
   for ( ;num > 0; ){
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	dce9      	bgt.n	8001fd6 <decimalToBinary+0x26>
   }
   int k=0;
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
   k=binaryNum[3]*1000+binaryNum[2]*100+binaryNum[1]*10+binaryNum[0];
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800200c:	fb03 f202 	mul.w	r2, r3, r2
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	2164      	movs	r1, #100	; 0x64
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	18d1      	adds	r1, r2, r3
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	18ca      	adds	r2, r1, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	4413      	add	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
   return k;
 800202c:	69bb      	ldr	r3, [r7, #24]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800203e:	e7fe      	b.n	800203e <NMI_Handler+0x4>

08002040 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <HardFault_Handler+0x4>

08002046 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <MemManage_Handler+0x4>

0800204c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <BusFault_Handler+0x4>

08002052 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <UsageFault_Handler+0x4>

08002058 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002086:	f000 f9f7 	bl	8002478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002090:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	similarity_percentage = 67.89;
	int a = (int)similarity_percentage / 10;
 8002098:	4b65      	ldr	r3, [pc, #404]	; (8002230 <TIM2_IRQHandler+0x1a0>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
 80020a2:	f7fe fcef 	bl	8000a84 <__aeabi_d2iz>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4a62      	ldr	r2, [pc, #392]	; (8002234 <TIM2_IRQHandler+0x1a4>)
 80020aa:	fb82 1203 	smull	r1, r2, r2, r3
 80020ae:	1092      	asrs	r2, r2, #2
 80020b0:	17db      	asrs	r3, r3, #31
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	60fb      	str	r3, [r7, #12]
	int b = (int)(similarity_percentage - (a*10));
 80020b6:	4b5e      	ldr	r3, [pc, #376]	; (8002230 <TIM2_IRQHandler+0x1a0>)
 80020b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe f9d8 	bl	800047c <__aeabi_i2d>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4620      	mov	r0, r4
 80020d2:	4629      	mov	r1, r5
 80020d4:	f7fe f884 	bl	80001e0 <__aeabi_dsub>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f7fe fcd0 	bl	8000a84 <__aeabi_d2iz>
 80020e4:	4603      	mov	r3, r0
 80020e6:	60bb      	str	r3, [r7, #8]
	int c = (int)((similarity_percentage - (a*10 + b))*10);
 80020e8:	4b51      	ldr	r3, [pc, #324]	; (8002230 <TIM2_IRQHandler+0x1a0>)
 80020ea:	e9d3 4500 	ldrd	r4, r5, [r3]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	461a      	mov	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4413      	add	r3, r2
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe f9bc 	bl	800047c <__aeabi_i2d>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4620      	mov	r0, r4
 800210a:	4629      	mov	r1, r5
 800210c:	f7fe f868 	bl	80001e0 <__aeabi_dsub>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	4b46      	ldr	r3, [pc, #280]	; (8002238 <TIM2_IRQHandler+0x1a8>)
 800211e:	f7fe fa17 	bl	8000550 <__aeabi_dmul>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	f7fe fcab 	bl	8000a84 <__aeabi_d2iz>
 800212e:	4603      	mov	r3, r0
 8002130:	607b      	str	r3, [r7, #4]
	int d = (int)((similarity_percentage - (a*10 + b + c*0.1))*100);
 8002132:	4b3f      	ldr	r3, [pc, #252]	; (8002230 <TIM2_IRQHandler+0x1a0>)
 8002134:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4413      	add	r3, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe f997 	bl	800047c <__aeabi_i2d>
 800214e:	4680      	mov	r8, r0
 8002150:	4689      	mov	r9, r1
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe f992 	bl	800047c <__aeabi_i2d>
 8002158:	a333      	add	r3, pc, #204	; (adr r3, 8002228 <TIM2_IRQHandler+0x198>)
 800215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215e:	f7fe f9f7 	bl	8000550 <__aeabi_dmul>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4640      	mov	r0, r8
 8002168:	4649      	mov	r1, r9
 800216a:	f7fe f83b 	bl	80001e4 <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4620      	mov	r0, r4
 8002174:	4629      	mov	r1, r5
 8002176:	f7fe f833 	bl	80001e0 <__aeabi_dsub>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4610      	mov	r0, r2
 8002180:	4619      	mov	r1, r3
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	4b2d      	ldr	r3, [pc, #180]	; (800223c <TIM2_IRQHandler+0x1ac>)
 8002188:	f7fe f9e2 	bl	8000550 <__aeabi_dmul>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	f7fe fc76 	bl	8000a84 <__aeabi_d2iz>
 8002198:	4603      	mov	r3, r0
 800219a:	603b      	str	r3, [r7, #0]

//	if(is_similar){
	if(1){
		if (state == 0) {
 800219c:	4b28      	ldr	r3, [pc, #160]	; (8002240 <TIM2_IRQHandler+0x1b0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10a      	bne.n	80021ba <TIM2_IRQHandler+0x12a>
			num1(decimalToBinary(a));
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f7ff ff03 	bl	8001fb0 <decimalToBinary>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fa57 	bl	8001660 <num1>
			state = 1;
 80021b2:	4b23      	ldr	r3, [pc, #140]	; (8002240 <TIM2_IRQHandler+0x1b0>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	e02b      	b.n	8002212 <TIM2_IRQHandler+0x182>
		} else if (state == 1) {
 80021ba:	4b21      	ldr	r3, [pc, #132]	; (8002240 <TIM2_IRQHandler+0x1b0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d10a      	bne.n	80021d8 <TIM2_IRQHandler+0x148>
			num2(decimalToBinary(b));
 80021c2:	68b8      	ldr	r0, [r7, #8]
 80021c4:	f7ff fef4 	bl	8001fb0 <decimalToBinary>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fb72 	bl	80018b4 <num2>
			state = 2;
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <TIM2_IRQHandler+0x1b0>)
 80021d2:	2202      	movs	r2, #2
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e01c      	b.n	8002212 <TIM2_IRQHandler+0x182>
		} else if(state == 2) {
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <TIM2_IRQHandler+0x1b0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d10a      	bne.n	80021f6 <TIM2_IRQHandler+0x166>
			num3(decimalToBinary(c));
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff fee5 	bl	8001fb0 <decimalToBinary>
 80021e6:	4603      	mov	r3, r0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fc8d 	bl	8001b08 <num3>
			state = 3;
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <TIM2_IRQHandler+0x1b0>)
 80021f0:	2203      	movs	r2, #3
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e00d      	b.n	8002212 <TIM2_IRQHandler+0x182>
		} else if (state == 3) {
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <TIM2_IRQHandler+0x1b0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d109      	bne.n	8002212 <TIM2_IRQHandler+0x182>
			num4(decimalToBinary(d));
 80021fe:	6838      	ldr	r0, [r7, #0]
 8002200:	f7ff fed6 	bl	8001fb0 <decimalToBinary>
 8002204:	4603      	mov	r3, r0
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fda8 	bl	8001d5c <num4>
			state = 0;
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <TIM2_IRQHandler+0x1b0>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
		}
	}


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002212:	480c      	ldr	r0, [pc, #48]	; (8002244 <TIM2_IRQHandler+0x1b4>)
 8002214:	f002 fc0c 	bl	8004a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002222:	bf00      	nop
 8002224:	f3af 8000 	nop.w
 8002228:	9999999a 	.word	0x9999999a
 800222c:	3fb99999 	.word	0x3fb99999
 8002230:	20000548 	.word	0x20000548
 8002234:	66666667 	.word	0x66666667
 8002238:	40240000 	.word	0x40240000
 800223c:	40590000 	.word	0x40590000
 8002240:	2000055c 	.word	0x2000055c
 8002244:	200000ec 	.word	0x200000ec

08002248 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (input_completed == 0) {
 800224c:	4b3b      	ldr	r3, [pc, #236]	; (800233c <TIM4_IRQHandler+0xf4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d104      	bne.n	800225e <TIM4_IRQHandler+0x16>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_7);
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	483a      	ldr	r0, [pc, #232]	; (8002340 <TIM4_IRQHandler+0xf8>)
 8002258:	f000 fc48 	bl	8002aec <HAL_GPIO_TogglePin>
 800225c:	e057      	b.n	800230e <TIM4_IRQHandler+0xc6>
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);

	}else{
		if(number_of_words1 > 0){
 800225e:	4b39      	ldr	r3, [pc, #228]	; (8002344 <TIM4_IRQHandler+0xfc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	dd09      	ble.n	800227a <TIM4_IRQHandler+0x32>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_7);
 8002266:	2180      	movs	r1, #128	; 0x80
 8002268:	4835      	ldr	r0, [pc, #212]	; (8002340 <TIM4_IRQHandler+0xf8>)
 800226a:	f000 fc3f 	bl	8002aec <HAL_GPIO_TogglePin>
			number_of_words1--;
 800226e:	4b35      	ldr	r3, [pc, #212]	; (8002344 <TIM4_IRQHandler+0xfc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3b01      	subs	r3, #1
 8002274:	4a33      	ldr	r2, [pc, #204]	; (8002344 <TIM4_IRQHandler+0xfc>)
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	e049      	b.n	800230e <TIM4_IRQHandler+0xc6>
		}else{
			if(switch_delay > 0){
 800227a:	4b33      	ldr	r3, [pc, #204]	; (8002348 <TIM4_IRQHandler+0x100>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	dd0a      	ble.n	8002298 <TIM4_IRQHandler+0x50>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2180      	movs	r1, #128	; 0x80
 8002286:	482e      	ldr	r0, [pc, #184]	; (8002340 <TIM4_IRQHandler+0xf8>)
 8002288:	f000 fc18 	bl	8002abc <HAL_GPIO_WritePin>
				switch_delay--;
 800228c:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <TIM4_IRQHandler+0x100>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3b01      	subs	r3, #1
 8002292:	4a2d      	ldr	r2, [pc, #180]	; (8002348 <TIM4_IRQHandler+0x100>)
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e03a      	b.n	800230e <TIM4_IRQHandler+0xc6>
			}else{
				if(number_of_words2 > 0){
 8002298:	4b2c      	ldr	r3, [pc, #176]	; (800234c <TIM4_IRQHandler+0x104>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	dd09      	ble.n	80022b4 <TIM4_IRQHandler+0x6c>
					HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_7);
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	4827      	ldr	r0, [pc, #156]	; (8002340 <TIM4_IRQHandler+0xf8>)
 80022a4:	f000 fc22 	bl	8002aec <HAL_GPIO_TogglePin>
					number_of_words2--;
 80022a8:	4b28      	ldr	r3, [pc, #160]	; (800234c <TIM4_IRQHandler+0x104>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	4a27      	ldr	r2, [pc, #156]	; (800234c <TIM4_IRQHandler+0x104>)
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e02c      	b.n	800230e <TIM4_IRQHandler+0xc6>
				}else{
					if(is_similar){
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <TIM4_IRQHandler+0x108>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d028      	beq.n	800230e <TIM4_IRQHandler+0xc6>
						if(final_delay > 0){
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <TIM4_IRQHandler+0x10c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	dd0a      	ble.n	80022da <TIM4_IRQHandler+0x92>
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 80022c4:	2201      	movs	r2, #1
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	481d      	ldr	r0, [pc, #116]	; (8002340 <TIM4_IRQHandler+0xf8>)
 80022ca:	f000 fbf7 	bl	8002abc <HAL_GPIO_WritePin>
							final_delay--;
 80022ce:	4b21      	ldr	r3, [pc, #132]	; (8002354 <TIM4_IRQHandler+0x10c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	4a1f      	ldr	r2, [pc, #124]	; (8002354 <TIM4_IRQHandler+0x10c>)
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	e019      	b.n	800230e <TIM4_IRQHandler+0xc6>
						}else{
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022e0:	4817      	ldr	r0, [pc, #92]	; (8002340 <TIM4_IRQHandler+0xf8>)
 80022e2:	f000 fbeb 	bl	8002abc <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2180      	movs	r1, #128	; 0x80
 80022ea:	4815      	ldr	r0, [pc, #84]	; (8002340 <TIM4_IRQHandler+0xf8>)
 80022ec:	f000 fbe6 	bl	8002abc <HAL_GPIO_WritePin>

							restart = 1;
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <TIM4_IRQHandler+0x110>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
							input_completed = 0;
 80022f6:	4b11      	ldr	r3, [pc, #68]	; (800233c <TIM4_IRQHandler+0xf4>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
							is_similar = 0;
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <TIM4_IRQHandler+0x108>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
							final_delay = 4;
 8002302:	4b14      	ldr	r3, [pc, #80]	; (8002354 <TIM4_IRQHandler+0x10c>)
 8002304:	2204      	movs	r2, #4
 8002306:	601a      	str	r2, [r3, #0]
							switch_delay = 10;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <TIM4_IRQHandler+0x100>)
 800230a:	220a      	movs	r2, #10
 800230c:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
	}
	if(is_similar){
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <TIM4_IRQHandler+0x108>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d006      	beq.n	8002324 <TIM4_IRQHandler+0xdc>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8002316:	2201      	movs	r2, #1
 8002318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800231c:	4808      	ldr	r0, [pc, #32]	; (8002340 <TIM4_IRQHandler+0xf8>)
 800231e:	f000 fbcd 	bl	8002abc <HAL_GPIO_WritePin>
 8002322:	e005      	b.n	8002330 <TIM4_IRQHandler+0xe8>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800232a:	4805      	ldr	r0, [pc, #20]	; (8002340 <TIM4_IRQHandler+0xf8>)
 800232c:	f000 fbc6 	bl	8002abc <HAL_GPIO_WritePin>
	}


  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002330:	480a      	ldr	r0, [pc, #40]	; (800235c <TIM4_IRQHandler+0x114>)
 8002332:	f002 fb7d 	bl	8004a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000053c 	.word	0x2000053c
 8002340:	48001000 	.word	0x48001000
 8002344:	20000550 	.word	0x20000550
 8002348:	20000000 	.word	0x20000000
 800234c:	20000554 	.word	0x20000554
 8002350:	20000540 	.word	0x20000540
 8002354:	20000004 	.word	0x20000004
 8002358:	20000560 	.word	0x20000560
 800235c:	20000138 	.word	0x20000138

08002360 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <USART1_IRQHandler+0x10>)
 8002366:	f003 f861 	bl	800542c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000184 	.word	0x20000184

08002374 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <SystemInit+0x20>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	4a05      	ldr	r2, [pc, #20]	; (8002394 <SystemInit+0x20>)
 8002380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800239c:	f7ff ffea 	bl	8002374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023a0:	480c      	ldr	r0, [pc, #48]	; (80023d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80023a2:	490d      	ldr	r1, [pc, #52]	; (80023d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023a4:	4a0d      	ldr	r2, [pc, #52]	; (80023dc <LoopForever+0xe>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a8:	e002      	b.n	80023b0 <LoopCopyDataInit>

080023aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ae:	3304      	adds	r3, #4

080023b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b4:	d3f9      	bcc.n	80023aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b6:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023b8:	4c0a      	ldr	r4, [pc, #40]	; (80023e4 <LoopForever+0x16>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023bc:	e001      	b.n	80023c2 <LoopFillZerobss>

080023be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c0:	3204      	adds	r2, #4

080023c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c4:	d3fb      	bcc.n	80023be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023c6:	f004 fa03 	bl	80067d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ca:	f7fe fd31 	bl	8000e30 <main>

080023ce <LoopForever>:

LoopForever:
    b LoopForever
 80023ce:	e7fe      	b.n	80023ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023d0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80023d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80023dc:	08006890 	.word	0x08006890
  ldr r2, =_sbss
 80023e0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80023e4:	20000568 	.word	0x20000568

080023e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023e8:	e7fe      	b.n	80023e8 <ADC1_2_IRQHandler>
	...

080023ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <HAL_Init+0x28>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a07      	ldr	r2, [pc, #28]	; (8002414 <HAL_Init+0x28>)
 80023f6:	f043 0310 	orr.w	r3, r3, #16
 80023fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023fc:	2003      	movs	r0, #3
 80023fe:	f000 f92b 	bl	8002658 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002402:	2000      	movs	r0, #0
 8002404:	f000 f808 	bl	8002418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002408:	f7fe ffb0 	bl	800136c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40022000 	.word	0x40022000

08002418 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_InitTick+0x54>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_InitTick+0x58>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4619      	mov	r1, r3
 800242a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002432:	fbb2 f3f3 	udiv	r3, r2, r3
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f943 	bl	80026c2 <HAL_SYSTICK_Config>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e00e      	b.n	8002464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b0f      	cmp	r3, #15
 800244a:	d80a      	bhi.n	8002462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800244c:	2200      	movs	r2, #0
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	f000 f90b 	bl	800266e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002458:	4a06      	ldr	r2, [pc, #24]	; (8002474 <HAL_InitTick+0x5c>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e000      	b.n	8002464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000008 	.word	0x20000008
 8002470:	20000010 	.word	0x20000010
 8002474:	2000000c 	.word	0x2000000c

08002478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_IncTick+0x20>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_IncTick+0x24>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4413      	add	r3, r2
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <HAL_IncTick+0x24>)
 800248a:	6013      	str	r3, [r2, #0]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000010 	.word	0x20000010
 800249c:	20000564 	.word	0x20000564

080024a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <HAL_GetTick+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000564 	.word	0x20000564

080024b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <__NVIC_SetPriorityGrouping+0x44>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d4:	4013      	ands	r3, r2
 80024d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ea:	4a04      	ldr	r2, [pc, #16]	; (80024fc <__NVIC_SetPriorityGrouping+0x44>)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	60d3      	str	r3, [r2, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <__NVIC_GetPriorityGrouping+0x18>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	f003 0307 	and.w	r3, r3, #7
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	2b00      	cmp	r3, #0
 800252c:	db0b      	blt.n	8002546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	f003 021f 	and.w	r2, r3, #31
 8002534:	4907      	ldr	r1, [pc, #28]	; (8002554 <__NVIC_EnableIRQ+0x38>)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	2001      	movs	r0, #1
 800253e:	fa00 f202 	lsl.w	r2, r0, r2
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	e000e100 	.word	0xe000e100

08002558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	6039      	str	r1, [r7, #0]
 8002562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	2b00      	cmp	r3, #0
 800256a:	db0a      	blt.n	8002582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	490c      	ldr	r1, [pc, #48]	; (80025a4 <__NVIC_SetPriority+0x4c>)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	0112      	lsls	r2, r2, #4
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	440b      	add	r3, r1
 800257c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002580:	e00a      	b.n	8002598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4908      	ldr	r1, [pc, #32]	; (80025a8 <__NVIC_SetPriority+0x50>)
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	3b04      	subs	r3, #4
 8002590:	0112      	lsls	r2, r2, #4
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	440b      	add	r3, r1
 8002596:	761a      	strb	r2, [r3, #24]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000e100 	.word	0xe000e100
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b089      	sub	sp, #36	; 0x24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f1c3 0307 	rsb	r3, r3, #7
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	bf28      	it	cs
 80025ca:	2304      	movcs	r3, #4
 80025cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3304      	adds	r3, #4
 80025d2:	2b06      	cmp	r3, #6
 80025d4:	d902      	bls.n	80025dc <NVIC_EncodePriority+0x30>
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3b03      	subs	r3, #3
 80025da:	e000      	b.n	80025de <NVIC_EncodePriority+0x32>
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	f04f 32ff 	mov.w	r2, #4294967295
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43da      	mvns	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	401a      	ands	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f4:	f04f 31ff 	mov.w	r1, #4294967295
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	43d9      	mvns	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	4313      	orrs	r3, r2
         );
}
 8002606:	4618      	mov	r0, r3
 8002608:	3724      	adds	r7, #36	; 0x24
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002624:	d301      	bcc.n	800262a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002626:	2301      	movs	r3, #1
 8002628:	e00f      	b.n	800264a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262a:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <SysTick_Config+0x40>)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002632:	210f      	movs	r1, #15
 8002634:	f04f 30ff 	mov.w	r0, #4294967295
 8002638:	f7ff ff8e 	bl	8002558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <SysTick_Config+0x40>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002642:	4b04      	ldr	r3, [pc, #16]	; (8002654 <SysTick_Config+0x40>)
 8002644:	2207      	movs	r2, #7
 8002646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	e000e010 	.word	0xe000e010

08002658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff29 	bl	80024b8 <__NVIC_SetPriorityGrouping>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002680:	f7ff ff3e 	bl	8002500 <__NVIC_GetPriorityGrouping>
 8002684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	6978      	ldr	r0, [r7, #20]
 800268c:	f7ff ff8e 	bl	80025ac <NVIC_EncodePriority>
 8002690:	4602      	mov	r2, r0
 8002692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff5d 	bl	8002558 <__NVIC_SetPriority>
}
 800269e:	bf00      	nop
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff31 	bl	800251c <__NVIC_EnableIRQ>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ffa2 	bl	8002614 <SysTick_Config>
 80026d0:	4603      	mov	r3, r0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d008      	beq.n	80026fe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2204      	movs	r2, #4
 80026f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e020      	b.n	8002740 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 020e 	bic.w	r2, r2, #14
 800270c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0201 	bic.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002726:	2101      	movs	r1, #1
 8002728:	fa01 f202 	lsl.w	r2, r1, r2
 800272c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800275e:	2b02      	cmp	r3, #2
 8002760:	d005      	beq.n	800276e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2204      	movs	r2, #4
 8002766:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e027      	b.n	80027be <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 020e 	bic.w	r2, r2, #14
 800277c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	2101      	movs	r1, #1
 8002798:	fa01 f202 	lsl.w	r2, r1, r2
 800279c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4798      	blx	r3
    } 
  }
  return status;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d6:	e154      	b.n	8002a82 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	2101      	movs	r1, #1
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	fa01 f303 	lsl.w	r3, r1, r3
 80027e4:	4013      	ands	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 8146 	beq.w	8002a7c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d005      	beq.n	8002808 <HAL_GPIO_Init+0x40>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d130      	bne.n	800286a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	2203      	movs	r2, #3
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800283e:	2201      	movs	r2, #1
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	f003 0201 	and.w	r2, r3, #1
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b03      	cmp	r3, #3
 8002874:	d017      	beq.n	80028a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	2203      	movs	r2, #3
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d123      	bne.n	80028fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	08da      	lsrs	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3208      	adds	r2, #8
 80028ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	220f      	movs	r2, #15
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4013      	ands	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	08da      	lsrs	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3208      	adds	r2, #8
 80028f4:	6939      	ldr	r1, [r7, #16]
 80028f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	2203      	movs	r2, #3
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0203 	and.w	r2, r3, #3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 80a0 	beq.w	8002a7c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293c:	4b58      	ldr	r3, [pc, #352]	; (8002aa0 <HAL_GPIO_Init+0x2d8>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	4a57      	ldr	r2, [pc, #348]	; (8002aa0 <HAL_GPIO_Init+0x2d8>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6193      	str	r3, [r2, #24]
 8002948:	4b55      	ldr	r3, [pc, #340]	; (8002aa0 <HAL_GPIO_Init+0x2d8>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002954:	4a53      	ldr	r2, [pc, #332]	; (8002aa4 <HAL_GPIO_Init+0x2dc>)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	089b      	lsrs	r3, r3, #2
 800295a:	3302      	adds	r3, #2
 800295c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	220f      	movs	r2, #15
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800297e:	d019      	beq.n	80029b4 <HAL_GPIO_Init+0x1ec>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a49      	ldr	r2, [pc, #292]	; (8002aa8 <HAL_GPIO_Init+0x2e0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d013      	beq.n	80029b0 <HAL_GPIO_Init+0x1e8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a48      	ldr	r2, [pc, #288]	; (8002aac <HAL_GPIO_Init+0x2e4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d00d      	beq.n	80029ac <HAL_GPIO_Init+0x1e4>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a47      	ldr	r2, [pc, #284]	; (8002ab0 <HAL_GPIO_Init+0x2e8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d007      	beq.n	80029a8 <HAL_GPIO_Init+0x1e0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a46      	ldr	r2, [pc, #280]	; (8002ab4 <HAL_GPIO_Init+0x2ec>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d101      	bne.n	80029a4 <HAL_GPIO_Init+0x1dc>
 80029a0:	2304      	movs	r3, #4
 80029a2:	e008      	b.n	80029b6 <HAL_GPIO_Init+0x1ee>
 80029a4:	2305      	movs	r3, #5
 80029a6:	e006      	b.n	80029b6 <HAL_GPIO_Init+0x1ee>
 80029a8:	2303      	movs	r3, #3
 80029aa:	e004      	b.n	80029b6 <HAL_GPIO_Init+0x1ee>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e002      	b.n	80029b6 <HAL_GPIO_Init+0x1ee>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_GPIO_Init+0x1ee>
 80029b4:	2300      	movs	r3, #0
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	f002 0203 	and.w	r2, r2, #3
 80029bc:	0092      	lsls	r2, r2, #2
 80029be:	4093      	lsls	r3, r2
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029c6:	4937      	ldr	r1, [pc, #220]	; (8002aa4 <HAL_GPIO_Init+0x2dc>)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	3302      	adds	r3, #2
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029d4:	4b38      	ldr	r3, [pc, #224]	; (8002ab8 <HAL_GPIO_Init+0x2f0>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	43db      	mvns	r3, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029f8:	4a2f      	ldr	r2, [pc, #188]	; (8002ab8 <HAL_GPIO_Init+0x2f0>)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029fe:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <HAL_GPIO_Init+0x2f0>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a22:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <HAL_GPIO_Init+0x2f0>)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a28:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <HAL_GPIO_Init+0x2f0>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a4c:	4a1a      	ldr	r2, [pc, #104]	; (8002ab8 <HAL_GPIO_Init+0x2f0>)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a52:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_GPIO_Init+0x2f0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a76:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <HAL_GPIO_Init+0x2f0>)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f47f aea3 	bne.w	80027d8 <HAL_GPIO_Init+0x10>
  }
}
 8002a92:	bf00      	nop
 8002a94:	bf00      	nop
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40010000 	.word	0x40010000
 8002aa8:	48000400 	.word	0x48000400
 8002aac:	48000800 	.word	0x48000800
 8002ab0:	48000c00 	.word	0x48000c00
 8002ab4:	48001000 	.word	0x48001000
 8002ab8:	40010400 	.word	0x40010400

08002abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	807b      	strh	r3, [r7, #2]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002acc:	787b      	ldrb	r3, [r7, #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ad8:	e002      	b.n	8002ae0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ada:	887a      	ldrh	r2, [r7, #2]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002afe:	887a      	ldrh	r2, [r7, #2]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4013      	ands	r3, r2
 8002b04:	041a      	lsls	r2, r3, #16
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	43d9      	mvns	r1, r3
 8002b0a:	887b      	ldrh	r3, [r7, #2]
 8002b0c:	400b      	ands	r3, r1
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	619a      	str	r2, [r3, #24]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e081      	b.n	8002c36 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe fc34 	bl	80013b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	; 0x24
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d107      	bne.n	8002b9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	e006      	b.n	8002ba8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ba6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d104      	bne.n	8002bba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69d9      	ldr	r1, [r3, #28]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1a      	ldr	r2, [r3, #32]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d138      	bne.n	8002cc6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e032      	b.n	8002cc8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2224      	movs	r2, #36	; 0x24
 8002c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0201 	bic.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c90:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6819      	ldr	r1, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0201 	orr.w	r2, r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
  }
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	d139      	bne.n	8002d5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e033      	b.n	8002d60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2224      	movs	r2, #36	; 0x24
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0201 	bic.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e000      	b.n	8002d60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
  }
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6e:	b08b      	sub	sp, #44	; 0x2c
 8002d70:	af06      	add	r7, sp, #24
 8002d72:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e0c4      	b.n	8002f08 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fe fc20 	bl	80015d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f003 fcd7 	bl	8006758 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	e040      	b.n	8002e32 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	7bfa      	ldrb	r2, [r7, #15]
 8002dd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	440b      	add	r3, r1
 8002dea:	3303      	adds	r3, #3
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002df0:	7bfa      	ldrb	r2, [r7, #15]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3338      	adds	r3, #56	; 0x38
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	440b      	add	r3, r1
 8002e12:	333c      	adds	r3, #60	; 0x3c
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	3340      	adds	r3, #64	; 0x40
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	7bfa      	ldrb	r2, [r7, #15]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d3b9      	bcc.n	8002db0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	73fb      	strb	r3, [r7, #15]
 8002e40:	e044      	b.n	8002ecc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e42:	7bfa      	ldrb	r2, [r7, #15]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	440b      	add	r3, r1
 8002e50:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	440b      	add	r3, r1
 8002e66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e6a:	7bfa      	ldrb	r2, [r7, #15]
 8002e6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e6e:	7bfa      	ldrb	r2, [r7, #15]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	440b      	add	r3, r1
 8002e7c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e84:	7bfa      	ldrb	r2, [r7, #15]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	440b      	add	r3, r1
 8002e92:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e9a:	7bfa      	ldrb	r2, [r7, #15]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	440b      	add	r3, r1
 8002ebe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
 8002ecc:	7bfa      	ldrb	r2, [r7, #15]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d3b5      	bcc.n	8002e42 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	687e      	ldr	r6, [r7, #4]
 8002ede:	466d      	mov	r5, sp
 8002ee0:	f106 0410 	add.w	r4, r6, #16
 8002ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	602b      	str	r3, [r5, #0]
 8002eec:	1d33      	adds	r3, r6, #4
 8002eee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ef0:	6838      	ldr	r0, [r7, #0]
 8002ef2:	f003 fc4c 	bl	800678e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f20:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	f001 b823 	b.w	8003f7c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 817d 	beq.w	8003246 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f4c:	4bbc      	ldr	r3, [pc, #752]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d00c      	beq.n	8002f72 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f58:	4bb9      	ldr	r3, [pc, #740]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 030c 	and.w	r3, r3, #12
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d15c      	bne.n	800301e <HAL_RCC_OscConfig+0x10e>
 8002f64:	4bb6      	ldr	r3, [pc, #728]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f70:	d155      	bne.n	800301e <HAL_RCC_OscConfig+0x10e>
 8002f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f76:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f86:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x94>
 8002f9e:	4ba8      	ldr	r3, [pc, #672]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	e015      	b.n	8002fd0 <HAL_RCC_OscConfig+0xc0>
 8002fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fa8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002fb0:	fa93 f3a3 	rbit	r3, r3
 8002fb4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fbc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002fc0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002fcc:	4b9c      	ldr	r3, [pc, #624]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fd4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002fd8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002fdc:	fa92 f2a2 	rbit	r2, r2
 8002fe0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002fe4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002fe8:	fab2 f282 	clz	r2, r2
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	f042 0220 	orr.w	r2, r2, #32
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	f002 021f 	and.w	r2, r2, #31
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 811f 	beq.w	8003244 <HAL_RCC_OscConfig+0x334>
 8003006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 8116 	bne.w	8003244 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	f000 bfaf 	b.w	8003f7c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800301e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302e:	d106      	bne.n	800303e <HAL_RCC_OscConfig+0x12e>
 8003030:	4b83      	ldr	r3, [pc, #524]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a82      	ldr	r2, [pc, #520]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 8003036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	e036      	b.n	80030ac <HAL_RCC_OscConfig+0x19c>
 800303e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x158>
 800304e:	4b7c      	ldr	r3, [pc, #496]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a7b      	ldr	r2, [pc, #492]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 8003054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b79      	ldr	r3, [pc, #484]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a78      	ldr	r2, [pc, #480]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 8003060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e021      	b.n	80030ac <HAL_RCC_OscConfig+0x19c>
 8003068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x184>
 800307a:	4b71      	ldr	r3, [pc, #452]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a70      	ldr	r2, [pc, #448]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 8003080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	4b6e      	ldr	r3, [pc, #440]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6d      	ldr	r2, [pc, #436]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 800308c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e00b      	b.n	80030ac <HAL_RCC_OscConfig+0x19c>
 8003094:	4b6a      	ldr	r3, [pc, #424]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a69      	ldr	r2, [pc, #420]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 800309a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	4b67      	ldr	r3, [pc, #412]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a66      	ldr	r2, [pc, #408]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 80030a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030aa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030ac:	4b64      	ldr	r3, [pc, #400]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f023 020f 	bic.w	r2, r3, #15
 80030b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	495f      	ldr	r1, [pc, #380]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d059      	beq.n	800318a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d6:	f7ff f9e3 	bl	80024a0 <HAL_GetTick>
 80030da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e0:	f7ff f9de 	bl	80024a0 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b64      	cmp	r3, #100	; 0x64
 80030ee:	d902      	bls.n	80030f6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	f000 bf43 	b.w	8003f7c <HAL_RCC_OscConfig+0x106c>
 80030f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030fa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003102:	fa93 f3a3 	rbit	r3, r3
 8003106:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800310a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	fab3 f383 	clz	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b01      	cmp	r3, #1
 8003120:	d102      	bne.n	8003128 <HAL_RCC_OscConfig+0x218>
 8003122:	4b47      	ldr	r3, [pc, #284]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	e015      	b.n	8003154 <HAL_RCC_OscConfig+0x244>
 8003128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800312c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800313c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003140:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003144:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003150:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003158:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800315c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003160:	fa92 f2a2 	rbit	r2, r2
 8003164:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003168:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800316c:	fab2 f282 	clz	r2, r2
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	f042 0220 	orr.w	r2, r2, #32
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	f002 021f 	and.w	r2, r2, #31
 800317c:	2101      	movs	r1, #1
 800317e:	fa01 f202 	lsl.w	r2, r1, r2
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ab      	beq.n	80030e0 <HAL_RCC_OscConfig+0x1d0>
 8003188:	e05d      	b.n	8003246 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318a:	f7ff f989 	bl	80024a0 <HAL_GetTick>
 800318e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003192:	e00a      	b.n	80031aa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003194:	f7ff f984 	bl	80024a0 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b64      	cmp	r3, #100	; 0x64
 80031a2:	d902      	bls.n	80031aa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	f000 bee9 	b.w	8003f7c <HAL_RCC_OscConfig+0x106c>
 80031aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ae:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80031be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c2:	fab3 f383 	clz	r3, r3
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d102      	bne.n	80031dc <HAL_RCC_OscConfig+0x2cc>
 80031d6:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	e015      	b.n	8003208 <HAL_RCC_OscConfig+0x2f8>
 80031dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031e0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80031f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80031f8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003204:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <HAL_RCC_OscConfig+0x330>)
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800320c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003210:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003214:	fa92 f2a2 	rbit	r2, r2
 8003218:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800321c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003220:	fab2 f282 	clz	r2, r2
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	f042 0220 	orr.w	r2, r2, #32
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	f002 021f 	and.w	r2, r2, #31
 8003230:	2101      	movs	r1, #1
 8003232:	fa01 f202 	lsl.w	r2, r1, r2
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1ab      	bne.n	8003194 <HAL_RCC_OscConfig+0x284>
 800323c:	e003      	b.n	8003246 <HAL_RCC_OscConfig+0x336>
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 817d 	beq.w	8003556 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800325c:	4ba6      	ldr	r3, [pc, #664]	; (80034f8 <HAL_RCC_OscConfig+0x5e8>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003268:	4ba3      	ldr	r3, [pc, #652]	; (80034f8 <HAL_RCC_OscConfig+0x5e8>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 030c 	and.w	r3, r3, #12
 8003270:	2b08      	cmp	r3, #8
 8003272:	d172      	bne.n	800335a <HAL_RCC_OscConfig+0x44a>
 8003274:	4ba0      	ldr	r3, [pc, #640]	; (80034f8 <HAL_RCC_OscConfig+0x5e8>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d16c      	bne.n	800335a <HAL_RCC_OscConfig+0x44a>
 8003280:	2302      	movs	r3, #2
 8003282:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003292:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d102      	bne.n	80032b0 <HAL_RCC_OscConfig+0x3a0>
 80032aa:	4b93      	ldr	r3, [pc, #588]	; (80034f8 <HAL_RCC_OscConfig+0x5e8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	e013      	b.n	80032d8 <HAL_RCC_OscConfig+0x3c8>
 80032b0:	2302      	movs	r3, #2
 80032b2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80032ba:	fa93 f3a3 	rbit	r3, r3
 80032be:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80032c2:	2302      	movs	r3, #2
 80032c4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80032c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80032d4:	4b88      	ldr	r3, [pc, #544]	; (80034f8 <HAL_RCC_OscConfig+0x5e8>)
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	2202      	movs	r2, #2
 80032da:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80032de:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80032e2:	fa92 f2a2 	rbit	r2, r2
 80032e6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80032ea:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80032ee:	fab2 f282 	clz	r2, r2
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	f042 0220 	orr.w	r2, r2, #32
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f002 021f 	and.w	r2, r2, #31
 80032fe:	2101      	movs	r1, #1
 8003300:	fa01 f202 	lsl.w	r2, r1, r2
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCC_OscConfig+0x410>
 800330a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d002      	beq.n	8003320 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	f000 be2e 	b.w	8003f7c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003320:	4b75      	ldr	r3, [pc, #468]	; (80034f8 <HAL_RCC_OscConfig+0x5e8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	21f8      	movs	r1, #248	; 0xf8
 8003336:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800333e:	fa91 f1a1 	rbit	r1, r1
 8003342:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003346:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800334a:	fab1 f181 	clz	r1, r1
 800334e:	b2c9      	uxtb	r1, r1
 8003350:	408b      	lsls	r3, r1
 8003352:	4969      	ldr	r1, [pc, #420]	; (80034f8 <HAL_RCC_OscConfig+0x5e8>)
 8003354:	4313      	orrs	r3, r2
 8003356:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003358:	e0fd      	b.n	8003556 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8088 	beq.w	800347c <HAL_RCC_OscConfig+0x56c>
 800336c:	2301      	movs	r3, #1
 800336e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800337e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003382:	fab3 f383 	clz	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800338c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	461a      	mov	r2, r3
 8003394:	2301      	movs	r3, #1
 8003396:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7ff f882 	bl	80024a0 <HAL_GetTick>
 800339c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a0:	e00a      	b.n	80033b8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a2:	f7ff f87d 	bl	80024a0 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d902      	bls.n	80033b8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	f000 bde2 	b.w	8003f7c <HAL_RCC_OscConfig+0x106c>
 80033b8:	2302      	movs	r3, #2
 80033ba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80033c2:	fa93 f3a3 	rbit	r3, r3
 80033c6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80033ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d102      	bne.n	80033e8 <HAL_RCC_OscConfig+0x4d8>
 80033e2:	4b45      	ldr	r3, [pc, #276]	; (80034f8 <HAL_RCC_OscConfig+0x5e8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	e013      	b.n	8003410 <HAL_RCC_OscConfig+0x500>
 80033e8:	2302      	movs	r3, #2
 80033ea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80033fa:	2302      	movs	r3, #2
 80033fc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003400:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003404:	fa93 f3a3 	rbit	r3, r3
 8003408:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800340c:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <HAL_RCC_OscConfig+0x5e8>)
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	2202      	movs	r2, #2
 8003412:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003416:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800341a:	fa92 f2a2 	rbit	r2, r2
 800341e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003422:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003426:	fab2 f282 	clz	r2, r2
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f042 0220 	orr.w	r2, r2, #32
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	f002 021f 	and.w	r2, r2, #31
 8003436:	2101      	movs	r1, #1
 8003438:	fa01 f202 	lsl.w	r2, r1, r2
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0af      	beq.n	80033a2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003442:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <HAL_RCC_OscConfig+0x5e8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	21f8      	movs	r1, #248	; 0xf8
 8003458:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003460:	fa91 f1a1 	rbit	r1, r1
 8003464:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003468:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800346c:	fab1 f181 	clz	r1, r1
 8003470:	b2c9      	uxtb	r1, r1
 8003472:	408b      	lsls	r3, r1
 8003474:	4920      	ldr	r1, [pc, #128]	; (80034f8 <HAL_RCC_OscConfig+0x5e8>)
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]
 800347a:	e06c      	b.n	8003556 <HAL_RCC_OscConfig+0x646>
 800347c:	2301      	movs	r3, #1
 800347e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800348e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003492:	fab3 f383 	clz	r3, r3
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800349c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	461a      	mov	r2, r3
 80034a4:	2300      	movs	r3, #0
 80034a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a8:	f7fe fffa 	bl	80024a0 <HAL_GetTick>
 80034ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b0:	e00a      	b.n	80034c8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b2:	f7fe fff5 	bl	80024a0 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d902      	bls.n	80034c8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	f000 bd5a 	b.w	8003f7c <HAL_RCC_OscConfig+0x106c>
 80034c8:	2302      	movs	r3, #2
 80034ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80034da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d104      	bne.n	80034fc <HAL_RCC_OscConfig+0x5ec>
 80034f2:	4b01      	ldr	r3, [pc, #4]	; (80034f8 <HAL_RCC_OscConfig+0x5e8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	e015      	b.n	8003524 <HAL_RCC_OscConfig+0x614>
 80034f8:	40021000 	.word	0x40021000
 80034fc:	2302      	movs	r3, #2
 80034fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800350e:	2302      	movs	r3, #2
 8003510:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003514:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003518:	fa93 f3a3 	rbit	r3, r3
 800351c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003520:	4bc8      	ldr	r3, [pc, #800]	; (8003844 <HAL_RCC_OscConfig+0x934>)
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	2202      	movs	r2, #2
 8003526:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800352a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800352e:	fa92 f2a2 	rbit	r2, r2
 8003532:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003536:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800353a:	fab2 f282 	clz	r2, r2
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	f042 0220 	orr.w	r2, r2, #32
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	f002 021f 	and.w	r2, r2, #31
 800354a:	2101      	movs	r1, #1
 800354c:	fa01 f202 	lsl.w	r2, r1, r2
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1ad      	bne.n	80034b2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8110 	beq.w	800378c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800356c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003570:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d079      	beq.n	8003670 <HAL_RCC_OscConfig+0x760>
 800357c:	2301      	movs	r3, #1
 800357e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003586:	fa93 f3a3 	rbit	r3, r3
 800358a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800358e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	4bab      	ldr	r3, [pc, #684]	; (8003848 <HAL_RCC_OscConfig+0x938>)
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	461a      	mov	r2, r3
 80035a2:	2301      	movs	r3, #1
 80035a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a6:	f7fe ff7b 	bl	80024a0 <HAL_GetTick>
 80035aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b0:	f7fe ff76 	bl	80024a0 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d902      	bls.n	80035c6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	f000 bcdb 	b.w	8003f7c <HAL_RCC_OscConfig+0x106c>
 80035c6:	2302      	movs	r3, #2
 80035c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035dc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80035e0:	2202      	movs	r2, #2
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	fa93 f2a3 	rbit	r2, r3
 80035f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003604:	2202      	movs	r2, #2
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	fa93 f2a3 	rbit	r2, r3
 8003616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800361e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003620:	4b88      	ldr	r3, [pc, #544]	; (8003844 <HAL_RCC_OscConfig+0x934>)
 8003622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003628:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800362c:	2102      	movs	r1, #2
 800362e:	6019      	str	r1, [r3, #0]
 8003630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003634:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	fa93 f1a3 	rbit	r1, r3
 800363e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003642:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003646:	6019      	str	r1, [r3, #0]
  return result;
 8003648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	2101      	movs	r1, #1
 8003664:	fa01 f303 	lsl.w	r3, r1, r3
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0a0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x6a0>
 800366e:	e08d      	b.n	800378c <HAL_RCC_OscConfig+0x87c>
 8003670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003674:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003680:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	fa93 f2a3 	rbit	r2, r3
 800368a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003692:	601a      	str	r2, [r3, #0]
  return result;
 8003694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003698:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800369c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	4b68      	ldr	r3, [pc, #416]	; (8003848 <HAL_RCC_OscConfig+0x938>)
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	461a      	mov	r2, r3
 80036ae:	2300      	movs	r3, #0
 80036b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b2:	f7fe fef5 	bl	80024a0 <HAL_GetTick>
 80036b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036bc:	f7fe fef0 	bl	80024a0 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d902      	bls.n	80036d2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	f000 bc55 	b.w	8003f7c <HAL_RCC_OscConfig+0x106c>
 80036d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80036da:	2202      	movs	r2, #2
 80036dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	fa93 f2a3 	rbit	r2, r3
 80036ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80036fe:	2202      	movs	r2, #2
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003706:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	fa93 f2a3 	rbit	r2, r3
 8003710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003714:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003722:	2202      	movs	r2, #2
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	fa93 f2a3 	rbit	r2, r3
 8003734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003738:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800373c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373e:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCC_OscConfig+0x934>)
 8003740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003746:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800374a:	2102      	movs	r1, #2
 800374c:	6019      	str	r1, [r3, #0]
 800374e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003752:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	fa93 f1a3 	rbit	r1, r3
 800375c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003760:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003764:	6019      	str	r1, [r3, #0]
  return result;
 8003766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	fab3 f383 	clz	r3, r3
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	2101      	movs	r1, #1
 8003782:	fa01 f303 	lsl.w	r3, r1, r3
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d197      	bne.n	80036bc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800378c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003790:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 81a1 	beq.w	8003ae4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a8:	4b26      	ldr	r3, [pc, #152]	; (8003844 <HAL_RCC_OscConfig+0x934>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d116      	bne.n	80037e2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b4:	4b23      	ldr	r3, [pc, #140]	; (8003844 <HAL_RCC_OscConfig+0x934>)
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	4a22      	ldr	r2, [pc, #136]	; (8003844 <HAL_RCC_OscConfig+0x934>)
 80037ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037be:	61d3      	str	r3, [r2, #28]
 80037c0:	4b20      	ldr	r3, [pc, #128]	; (8003844 <HAL_RCC_OscConfig+0x934>)
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80037c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037cc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80037da:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e2:	4b1a      	ldr	r3, [pc, #104]	; (800384c <HAL_RCC_OscConfig+0x93c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d11a      	bne.n	8003824 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ee:	4b17      	ldr	r3, [pc, #92]	; (800384c <HAL_RCC_OscConfig+0x93c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a16      	ldr	r2, [pc, #88]	; (800384c <HAL_RCC_OscConfig+0x93c>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037fa:	f7fe fe51 	bl	80024a0 <HAL_GetTick>
 80037fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003802:	e009      	b.n	8003818 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003804:	f7fe fe4c 	bl	80024a0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b64      	cmp	r3, #100	; 0x64
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e3b1      	b.n	8003f7c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <HAL_RCC_OscConfig+0x93c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ef      	beq.n	8003804 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003828:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d10d      	bne.n	8003850 <HAL_RCC_OscConfig+0x940>
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <HAL_RCC_OscConfig+0x934>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	4a02      	ldr	r2, [pc, #8]	; (8003844 <HAL_RCC_OscConfig+0x934>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6213      	str	r3, [r2, #32]
 8003840:	e03c      	b.n	80038bc <HAL_RCC_OscConfig+0x9ac>
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000
 8003848:	10908120 	.word	0x10908120
 800384c:	40007000 	.word	0x40007000
 8003850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003854:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10c      	bne.n	800387a <HAL_RCC_OscConfig+0x96a>
 8003860:	4bc1      	ldr	r3, [pc, #772]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	4ac0      	ldr	r2, [pc, #768]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	6213      	str	r3, [r2, #32]
 800386c:	4bbe      	ldr	r3, [pc, #760]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	4abd      	ldr	r2, [pc, #756]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 8003872:	f023 0304 	bic.w	r3, r3, #4
 8003876:	6213      	str	r3, [r2, #32]
 8003878:	e020      	b.n	80038bc <HAL_RCC_OscConfig+0x9ac>
 800387a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b05      	cmp	r3, #5
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x994>
 800388a:	4bb7      	ldr	r3, [pc, #732]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4ab6      	ldr	r2, [pc, #728]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	6213      	str	r3, [r2, #32]
 8003896:	4bb4      	ldr	r3, [pc, #720]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	4ab3      	ldr	r2, [pc, #716]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6213      	str	r3, [r2, #32]
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0x9ac>
 80038a4:	4bb0      	ldr	r3, [pc, #704]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	4aaf      	ldr	r2, [pc, #700]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	6213      	str	r3, [r2, #32]
 80038b0:	4bad      	ldr	r3, [pc, #692]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	4aac      	ldr	r2, [pc, #688]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 80038b6:	f023 0304 	bic.w	r3, r3, #4
 80038ba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 8081 	beq.w	80039d0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ce:	f7fe fde7 	bl	80024a0 <HAL_GetTick>
 80038d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d8:	f7fe fde2 	bl	80024a0 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e345      	b.n	8003f7c <HAL_RCC_OscConfig+0x106c>
 80038f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80038f8:	2202      	movs	r2, #2
 80038fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003900:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	fa93 f2a3 	rbit	r2, r3
 800390a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003918:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800391c:	2202      	movs	r2, #2
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003924:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	fa93 f2a3 	rbit	r2, r3
 800392e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003932:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003936:	601a      	str	r2, [r3, #0]
  return result;
 8003938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003940:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f043 0302 	orr.w	r3, r3, #2
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d102      	bne.n	800395c <HAL_RCC_OscConfig+0xa4c>
 8003956:	4b84      	ldr	r3, [pc, #528]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	e013      	b.n	8003984 <HAL_RCC_OscConfig+0xa74>
 800395c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003960:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003964:	2202      	movs	r2, #2
 8003966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	fa93 f2a3 	rbit	r2, r3
 8003976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	4b79      	ldr	r3, [pc, #484]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003988:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800398c:	2102      	movs	r1, #2
 800398e:	6011      	str	r1, [r2, #0]
 8003990:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003994:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	fa92 f1a2 	rbit	r1, r2
 800399e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039a2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80039a6:	6011      	str	r1, [r2, #0]
  return result;
 80039a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039ac:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	fab2 f282 	clz	r2, r2
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	f002 021f 	and.w	r2, r2, #31
 80039c2:	2101      	movs	r1, #1
 80039c4:	fa01 f202 	lsl.w	r2, r1, r2
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d084      	beq.n	80038d8 <HAL_RCC_OscConfig+0x9c8>
 80039ce:	e07f      	b.n	8003ad0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d0:	f7fe fd66 	bl	80024a0 <HAL_GetTick>
 80039d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d8:	e00b      	b.n	80039f2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fe fd61 	bl	80024a0 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e2c4      	b.n	8003f7c <HAL_RCC_OscConfig+0x106c>
 80039f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80039fa:	2202      	movs	r2, #2
 80039fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a02:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	fa93 f2a3 	rbit	r2, r3
 8003a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a10:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003a1e:	2202      	movs	r2, #2
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a26:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	fa93 f2a3 	rbit	r2, r3
 8003a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a34:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003a38:	601a      	str	r2, [r3, #0]
  return result;
 8003a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003a42:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a44:	fab3 f383 	clz	r3, r3
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	f043 0302 	orr.w	r3, r3, #2
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d102      	bne.n	8003a5e <HAL_RCC_OscConfig+0xb4e>
 8003a58:	4b43      	ldr	r3, [pc, #268]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	e013      	b.n	8003a86 <HAL_RCC_OscConfig+0xb76>
 8003a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a62:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003a66:	2202      	movs	r2, #2
 8003a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	fa93 f2a3 	rbit	r2, r3
 8003a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	4b39      	ldr	r3, [pc, #228]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a8a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003a8e:	2102      	movs	r1, #2
 8003a90:	6011      	str	r1, [r2, #0]
 8003a92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a96:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	fa92 f1a2 	rbit	r1, r2
 8003aa0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aa4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003aa8:	6011      	str	r1, [r2, #0]
  return result;
 8003aaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aae:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	fab2 f282 	clz	r2, r2
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	f002 021f 	and.w	r2, r2, #31
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d184      	bne.n	80039da <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ad0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d105      	bne.n	8003ae4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad8:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	4a22      	ldr	r2, [pc, #136]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 8003ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8242 	beq.w	8003f7a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003af6:	4b1c      	ldr	r3, [pc, #112]	; (8003b68 <HAL_RCC_OscConfig+0xc58>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	f000 8213 	beq.w	8003f2a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	f040 8162 	bne.w	8003dda <HAL_RCC_OscConfig+0xeca>
 8003b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003b1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b28:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	fa93 f2a3 	rbit	r2, r3
 8003b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b36:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003b3a:	601a      	str	r2, [r3, #0]
  return result;
 8003b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b40:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003b44:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	461a      	mov	r2, r3
 8003b58:	2300      	movs	r3, #0
 8003b5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fe fca0 	bl	80024a0 <HAL_GetTick>
 8003b60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b64:	e00c      	b.n	8003b80 <HAL_RCC_OscConfig+0xc70>
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fe fc98 	bl	80024a0 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e1fd      	b.n	8003f7c <HAL_RCC_OscConfig+0x106c>
 8003b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b84:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003b88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b92:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	fa93 f2a3 	rbit	r2, r3
 8003b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003ba4:	601a      	str	r2, [r3, #0]
  return result;
 8003ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003baa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003bae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb0:	fab3 f383 	clz	r3, r3
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d102      	bne.n	8003bca <HAL_RCC_OscConfig+0xcba>
 8003bc4:	4bb0      	ldr	r3, [pc, #704]	; (8003e88 <HAL_RCC_OscConfig+0xf78>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	e027      	b.n	8003c1a <HAL_RCC_OscConfig+0xd0a>
 8003bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bce:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003bd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bdc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	fa93 f2a3 	rbit	r2, r3
 8003be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bea:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c02:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	fa93 f2a3 	rbit	r2, r3
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	4b9c      	ldr	r3, [pc, #624]	; (8003e88 <HAL_RCC_OscConfig+0xf78>)
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c1e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003c22:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c26:	6011      	str	r1, [r2, #0]
 8003c28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c2c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	fa92 f1a2 	rbit	r1, r2
 8003c36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c3a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003c3e:	6011      	str	r1, [r2, #0]
  return result;
 8003c40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c44:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003c48:	6812      	ldr	r2, [r2, #0]
 8003c4a:	fab2 f282 	clz	r2, r2
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	f042 0220 	orr.w	r2, r2, #32
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	f002 021f 	and.w	r2, r2, #31
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d182      	bne.n	8003b6c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c66:	4b88      	ldr	r3, [pc, #544]	; (8003e88 <HAL_RCC_OscConfig+0xf78>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	430b      	orrs	r3, r1
 8003c88:	497f      	ldr	r1, [pc, #508]	; (8003e88 <HAL_RCC_OscConfig+0xf78>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	604b      	str	r3, [r1, #4]
 8003c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c92:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003c96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	fa93 f2a3 	rbit	r2, r3
 8003caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003cb2:	601a      	str	r2, [r3, #0]
  return result;
 8003cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003cbc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cbe:	fab3 f383 	clz	r3, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	461a      	mov	r2, r3
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe fbe4 	bl	80024a0 <HAL_GetTick>
 8003cd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cdc:	e009      	b.n	8003cf2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cde:	f7fe fbdf 	bl	80024a0 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e144      	b.n	8003f7c <HAL_RCC_OscConfig+0x106c>
 8003cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003cfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d04:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	fa93 f2a3 	rbit	r2, r3
 8003d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d12:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003d16:	601a      	str	r2, [r3, #0]
  return result;
 8003d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d1c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003d20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d22:	fab3 f383 	clz	r3, r3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	095b      	lsrs	r3, r3, #5
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d102      	bne.n	8003d3c <HAL_RCC_OscConfig+0xe2c>
 8003d36:	4b54      	ldr	r3, [pc, #336]	; (8003e88 <HAL_RCC_OscConfig+0xf78>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	e027      	b.n	8003d8c <HAL_RCC_OscConfig+0xe7c>
 8003d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d40:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003d44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	fa93 f2a3 	rbit	r2, r3
 8003d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d66:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003d6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d74:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	fa93 f2a3 	rbit	r2, r3
 8003d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d82:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	4b3f      	ldr	r3, [pc, #252]	; (8003e88 <HAL_RCC_OscConfig+0xf78>)
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d90:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003d94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d98:	6011      	str	r1, [r2, #0]
 8003d9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d9e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	fa92 f1a2 	rbit	r1, r2
 8003da8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dac:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003db0:	6011      	str	r1, [r2, #0]
  return result;
 8003db2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003db6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	fab2 f282 	clz	r2, r2
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	f042 0220 	orr.w	r2, r2, #32
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	f002 021f 	and.w	r2, r2, #31
 8003dcc:	2101      	movs	r1, #1
 8003dce:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d082      	beq.n	8003cde <HAL_RCC_OscConfig+0xdce>
 8003dd8:	e0cf      	b.n	8003f7a <HAL_RCC_OscConfig+0x106a>
 8003dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dde:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003de2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dec:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	fa93 f2a3 	rbit	r2, r3
 8003df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dfa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003dfe:	601a      	str	r2, [r3, #0]
  return result;
 8003e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e04:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003e08:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0a:	fab3 f383 	clz	r3, r3
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fe fb3e 	bl	80024a0 <HAL_GetTick>
 8003e24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e28:	e009      	b.n	8003e3e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e2a:	f7fe fb39 	bl	80024a0 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e09e      	b.n	8003f7c <HAL_RCC_OscConfig+0x106c>
 8003e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e42:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003e46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e50:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	fa93 f2a3 	rbit	r2, r3
 8003e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e62:	601a      	str	r2, [r3, #0]
  return result;
 8003e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e68:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e6e:	fab3 f383 	clz	r3, r3
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d104      	bne.n	8003e8c <HAL_RCC_OscConfig+0xf7c>
 8003e82:	4b01      	ldr	r3, [pc, #4]	; (8003e88 <HAL_RCC_OscConfig+0xf78>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	e029      	b.n	8003edc <HAL_RCC_OscConfig+0xfcc>
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e90:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003e94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	fa93 f2a3 	rbit	r2, r3
 8003ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003eba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	fa93 f2a3 	rbit	r2, r3
 8003ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <HAL_RCC_OscConfig+0x1078>)
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ee0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003ee4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ee8:	6011      	str	r1, [r2, #0]
 8003eea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eee:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	fa92 f1a2 	rbit	r1, r2
 8003ef8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003efc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003f00:	6011      	str	r1, [r2, #0]
  return result;
 8003f02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f06:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	fab2 f282 	clz	r2, r2
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	f042 0220 	orr.w	r2, r2, #32
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	f002 021f 	and.w	r2, r2, #31
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d180      	bne.n	8003e2a <HAL_RCC_OscConfig+0xf1a>
 8003f28:	e027      	b.n	8003f7a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e01e      	b.n	8003f7c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f3e:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <HAL_RCC_OscConfig+0x1078>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f46:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f4a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d10b      	bne.n	8003f76 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003f5e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d001      	beq.n	8003f7a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000

08003f8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b09e      	sub	sp, #120	; 0x78
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e162      	b.n	800426a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b90      	ldr	r3, [pc, #576]	; (80041e8 <HAL_RCC_ClockConfig+0x25c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d910      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b8d      	ldr	r3, [pc, #564]	; (80041e8 <HAL_RCC_ClockConfig+0x25c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 0207 	bic.w	r2, r3, #7
 8003fba:	498b      	ldr	r1, [pc, #556]	; (80041e8 <HAL_RCC_ClockConfig+0x25c>)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b89      	ldr	r3, [pc, #548]	; (80041e8 <HAL_RCC_ClockConfig+0x25c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e14a      	b.n	800426a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe0:	4b82      	ldr	r3, [pc, #520]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	497f      	ldr	r1, [pc, #508]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 80dc 	beq.w	80041b8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d13c      	bne.n	8004082 <HAL_RCC_ClockConfig+0xf6>
 8004008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800400c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004010:	fa93 f3a3 	rbit	r3, r3
 8004014:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004018:	fab3 f383 	clz	r3, r3
 800401c:	b2db      	uxtb	r3, r3
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	b2db      	uxtb	r3, r3
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b01      	cmp	r3, #1
 800402a:	d102      	bne.n	8004032 <HAL_RCC_ClockConfig+0xa6>
 800402c:	4b6f      	ldr	r3, [pc, #444]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	e00f      	b.n	8004052 <HAL_RCC_ClockConfig+0xc6>
 8004032:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004036:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	667b      	str	r3, [r7, #100]	; 0x64
 8004040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004044:	663b      	str	r3, [r7, #96]	; 0x60
 8004046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004048:	fa93 f3a3 	rbit	r3, r3
 800404c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800404e:	4b67      	ldr	r3, [pc, #412]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004056:	65ba      	str	r2, [r7, #88]	; 0x58
 8004058:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800405a:	fa92 f2a2 	rbit	r2, r2
 800405e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004060:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004062:	fab2 f282 	clz	r2, r2
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	f042 0220 	orr.w	r2, r2, #32
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	f002 021f 	and.w	r2, r2, #31
 8004072:	2101      	movs	r1, #1
 8004074:	fa01 f202 	lsl.w	r2, r1, r2
 8004078:	4013      	ands	r3, r2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d17b      	bne.n	8004176 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e0f3      	b.n	800426a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d13c      	bne.n	8004104 <HAL_RCC_ClockConfig+0x178>
 800408a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800408e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004092:	fa93 f3a3 	rbit	r3, r3
 8004096:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409a:	fab3 f383 	clz	r3, r3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d102      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x128>
 80040ae:	4b4f      	ldr	r3, [pc, #316]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	e00f      	b.n	80040d4 <HAL_RCC_ClockConfig+0x148>
 80040b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040bc:	fa93 f3a3 	rbit	r3, r3
 80040c0:	647b      	str	r3, [r7, #68]	; 0x44
 80040c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040c6:	643b      	str	r3, [r7, #64]	; 0x40
 80040c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ca:	fa93 f3a3 	rbit	r3, r3
 80040ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d0:	4b46      	ldr	r3, [pc, #280]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040d8:	63ba      	str	r2, [r7, #56]	; 0x38
 80040da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040dc:	fa92 f2a2 	rbit	r2, r2
 80040e0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80040e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040e4:	fab2 f282 	clz	r2, r2
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	f042 0220 	orr.w	r2, r2, #32
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	f002 021f 	and.w	r2, r2, #31
 80040f4:	2101      	movs	r1, #1
 80040f6:	fa01 f202 	lsl.w	r2, r1, r2
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d13a      	bne.n	8004176 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0b2      	b.n	800426a <HAL_RCC_ClockConfig+0x2de>
 8004104:	2302      	movs	r3, #2
 8004106:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	fa93 f3a3 	rbit	r3, r3
 800410e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b01      	cmp	r3, #1
 8004124:	d102      	bne.n	800412c <HAL_RCC_ClockConfig+0x1a0>
 8004126:	4b31      	ldr	r3, [pc, #196]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	e00d      	b.n	8004148 <HAL_RCC_ClockConfig+0x1bc>
 800412c:	2302      	movs	r3, #2
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
 8004138:	2302      	movs	r3, #2
 800413a:	623b      	str	r3, [r7, #32]
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	fa93 f3a3 	rbit	r3, r3
 8004142:	61fb      	str	r3, [r7, #28]
 8004144:	4b29      	ldr	r3, [pc, #164]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	2202      	movs	r2, #2
 800414a:	61ba      	str	r2, [r7, #24]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	fa92 f2a2 	rbit	r2, r2
 8004152:	617a      	str	r2, [r7, #20]
  return result;
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	fab2 f282 	clz	r2, r2
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	f042 0220 	orr.w	r2, r2, #32
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	f002 021f 	and.w	r2, r2, #31
 8004166:	2101      	movs	r1, #1
 8004168:	fa01 f202 	lsl.w	r2, r1, r2
 800416c:	4013      	ands	r3, r2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e079      	b.n	800426a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004176:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f023 0203 	bic.w	r2, r3, #3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	491a      	ldr	r1, [pc, #104]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 8004184:	4313      	orrs	r3, r2
 8004186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004188:	f7fe f98a 	bl	80024a0 <HAL_GetTick>
 800418c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418e:	e00a      	b.n	80041a6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004190:	f7fe f986 	bl	80024a0 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f241 3288 	movw	r2, #5000	; 0x1388
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e061      	b.n	800426a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a6:	4b11      	ldr	r3, [pc, #68]	; (80041ec <HAL_RCC_ClockConfig+0x260>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f003 020c 	and.w	r2, r3, #12
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d1eb      	bne.n	8004190 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_RCC_ClockConfig+0x25c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d214      	bcs.n	80041f0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c6:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <HAL_RCC_ClockConfig+0x25c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 0207 	bic.w	r2, r3, #7
 80041ce:	4906      	ldr	r1, [pc, #24]	; (80041e8 <HAL_RCC_ClockConfig+0x25c>)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <HAL_RCC_ClockConfig+0x25c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d005      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e040      	b.n	800426a <HAL_RCC_ClockConfig+0x2de>
 80041e8:	40022000 	.word	0x40022000
 80041ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041fc:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <HAL_RCC_ClockConfig+0x2e8>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	491a      	ldr	r1, [pc, #104]	; (8004274 <HAL_RCC_ClockConfig+0x2e8>)
 800420a:	4313      	orrs	r3, r2
 800420c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800421a:	4b16      	ldr	r3, [pc, #88]	; (8004274 <HAL_RCC_ClockConfig+0x2e8>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4912      	ldr	r1, [pc, #72]	; (8004274 <HAL_RCC_ClockConfig+0x2e8>)
 800422a:	4313      	orrs	r3, r2
 800422c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800422e:	f000 f829 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8004232:	4601      	mov	r1, r0
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <HAL_RCC_ClockConfig+0x2e8>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800423c:	22f0      	movs	r2, #240	; 0xf0
 800423e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	fa92 f2a2 	rbit	r2, r2
 8004246:	60fa      	str	r2, [r7, #12]
  return result;
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	fab2 f282 	clz	r2, r2
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	40d3      	lsrs	r3, r2
 8004252:	4a09      	ldr	r2, [pc, #36]	; (8004278 <HAL_RCC_ClockConfig+0x2ec>)
 8004254:	5cd3      	ldrb	r3, [r2, r3]
 8004256:	fa21 f303 	lsr.w	r3, r1, r3
 800425a:	4a08      	ldr	r2, [pc, #32]	; (800427c <HAL_RCC_ClockConfig+0x2f0>)
 800425c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800425e:	4b08      	ldr	r3, [pc, #32]	; (8004280 <HAL_RCC_ClockConfig+0x2f4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe f8d8 	bl	8002418 <HAL_InitTick>
  
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3778      	adds	r7, #120	; 0x78
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40021000 	.word	0x40021000
 8004278:	08006850 	.word	0x08006850
 800427c:	20000008 	.word	0x20000008
 8004280:	2000000c 	.word	0x2000000c

08004284 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004284:	b480      	push	{r7}
 8004286:	b08b      	sub	sp, #44	; 0x2c
 8004288:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	2300      	movs	r3, #0
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	2300      	movs	r3, #0
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800429e:	4b29      	ldr	r3, [pc, #164]	; (8004344 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d002      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x30>
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d003      	beq.n	80042ba <HAL_RCC_GetSysClockFreq+0x36>
 80042b2:	e03c      	b.n	800432e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042b4:	4b24      	ldr	r3, [pc, #144]	; (8004348 <HAL_RCC_GetSysClockFreq+0xc4>)
 80042b6:	623b      	str	r3, [r7, #32]
      break;
 80042b8:	e03c      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80042c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80042c4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	fa92 f2a2 	rbit	r2, r2
 80042cc:	607a      	str	r2, [r7, #4]
  return result;
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	fab2 f282 	clz	r2, r2
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	40d3      	lsrs	r3, r2
 80042d8:	4a1c      	ldr	r2, [pc, #112]	; (800434c <HAL_RCC_GetSysClockFreq+0xc8>)
 80042da:	5cd3      	ldrb	r3, [r2, r3]
 80042dc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80042de:	4b19      	ldr	r3, [pc, #100]	; (8004344 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	220f      	movs	r2, #15
 80042e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	fa92 f2a2 	rbit	r2, r2
 80042f0:	60fa      	str	r2, [r7, #12]
  return result;
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	fab2 f282 	clz	r2, r2
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	40d3      	lsrs	r3, r2
 80042fc:	4a14      	ldr	r2, [pc, #80]	; (8004350 <HAL_RCC_GetSysClockFreq+0xcc>)
 80042fe:	5cd3      	ldrb	r3, [r2, r3]
 8004300:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800430c:	4a0e      	ldr	r2, [pc, #56]	; (8004348 <HAL_RCC_GetSysClockFreq+0xc4>)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	fbb2 f2f3 	udiv	r2, r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
 800431c:	e004      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	4a0c      	ldr	r2, [pc, #48]	; (8004354 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004322:	fb02 f303 	mul.w	r3, r2, r3
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	623b      	str	r3, [r7, #32]
      break;
 800432c:	e002      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004330:	623b      	str	r3, [r7, #32]
      break;
 8004332:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004334:	6a3b      	ldr	r3, [r7, #32]
}
 8004336:	4618      	mov	r0, r3
 8004338:	372c      	adds	r7, #44	; 0x2c
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40021000 	.word	0x40021000
 8004348:	007a1200 	.word	0x007a1200
 800434c:	08006868 	.word	0x08006868
 8004350:	08006878 	.word	0x08006878
 8004354:	003d0900 	.word	0x003d0900

08004358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <HAL_RCC_GetHCLKFreq+0x14>)
 800435e:	681b      	ldr	r3, [r3, #0]
}
 8004360:	4618      	mov	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000008 	.word	0x20000008

08004370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004376:	f7ff ffef 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 800437a:	4601      	mov	r1, r0
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004384:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004388:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	fa92 f2a2 	rbit	r2, r2
 8004390:	603a      	str	r2, [r7, #0]
  return result;
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	fab2 f282 	clz	r2, r2
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	40d3      	lsrs	r3, r2
 800439c:	4a04      	ldr	r2, [pc, #16]	; (80043b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800439e:	5cd3      	ldrb	r3, [r2, r3]
 80043a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40021000 	.word	0x40021000
 80043b0:	08006860 	.word	0x08006860

080043b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80043ba:	f7ff ffcd 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 80043be:	4601      	mov	r1, r0
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80043c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80043cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	fa92 f2a2 	rbit	r2, r2
 80043d4:	603a      	str	r2, [r7, #0]
  return result;
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	fab2 f282 	clz	r2, r2
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	40d3      	lsrs	r3, r2
 80043e0:	4a04      	ldr	r2, [pc, #16]	; (80043f4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80043e2:	5cd3      	ldrb	r3, [r2, r3]
 80043e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40021000 	.word	0x40021000
 80043f4:	08006860 	.word	0x08006860

080043f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b092      	sub	sp, #72	; 0x48
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004408:	2300      	movs	r3, #0
 800440a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 80d4 	beq.w	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800441c:	4b4e      	ldr	r3, [pc, #312]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10e      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004428:	4b4b      	ldr	r3, [pc, #300]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	4a4a      	ldr	r2, [pc, #296]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004432:	61d3      	str	r3, [r2, #28]
 8004434:	4b48      	ldr	r3, [pc, #288]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004446:	4b45      	ldr	r3, [pc, #276]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	2b00      	cmp	r3, #0
 8004450:	d118      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004452:	4b42      	ldr	r3, [pc, #264]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a41      	ldr	r2, [pc, #260]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800445c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800445e:	f7fe f81f 	bl	80024a0 <HAL_GetTick>
 8004462:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004464:	e008      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004466:	f7fe f81b 	bl	80024a0 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b64      	cmp	r3, #100	; 0x64
 8004472:	d901      	bls.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e169      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	4b38      	ldr	r3, [pc, #224]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004484:	4b34      	ldr	r3, [pc, #208]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800448e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8084 	beq.w	800459e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d07c      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044a4:	4b2c      	ldr	r3, [pc, #176]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	fa93 f3a3 	rbit	r3, r3
 80044ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80044bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044be:	fab3 f383 	clz	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	4b26      	ldr	r3, [pc, #152]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	461a      	mov	r2, r3
 80044ce:	2301      	movs	r3, #1
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044da:	fa93 f3a3 	rbit	r3, r3
 80044de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80044e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044e2:	fab3 f383 	clz	r3, r3
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	461a      	mov	r2, r3
 80044f2:	2300      	movs	r3, #0
 80044f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044f6:	4a18      	ldr	r2, [pc, #96]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d04b      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004506:	f7fd ffcb 	bl	80024a0 <HAL_GetTick>
 800450a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450c:	e00a      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450e:	f7fd ffc7 	bl	80024a0 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f241 3288 	movw	r2, #5000	; 0x1388
 800451c:	4293      	cmp	r3, r2
 800451e:	d901      	bls.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e113      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004524:	2302      	movs	r3, #2
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	fa93 f3a3 	rbit	r3, r3
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
 8004530:	2302      	movs	r3, #2
 8004532:	623b      	str	r3, [r7, #32]
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	fa93 f3a3 	rbit	r3, r3
 800453a:	61fb      	str	r3, [r7, #28]
  return result;
 800453c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453e:	fab3 f383 	clz	r3, r3
 8004542:	b2db      	uxtb	r3, r3
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f043 0302 	orr.w	r3, r3, #2
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d108      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004552:	4b01      	ldr	r3, [pc, #4]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	e00d      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004558:	40021000 	.word	0x40021000
 800455c:	40007000 	.word	0x40007000
 8004560:	10908100 	.word	0x10908100
 8004564:	2302      	movs	r3, #2
 8004566:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	4b78      	ldr	r3, [pc, #480]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	2202      	movs	r2, #2
 8004576:	613a      	str	r2, [r7, #16]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	fa92 f2a2 	rbit	r2, r2
 800457e:	60fa      	str	r2, [r7, #12]
  return result;
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	fab2 f282 	clz	r2, r2
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	f002 021f 	and.w	r2, r2, #31
 8004592:	2101      	movs	r1, #1
 8004594:	fa01 f202 	lsl.w	r2, r1, r2
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0b7      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800459e:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	496a      	ldr	r1, [pc, #424]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d105      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b8:	4b66      	ldr	r3, [pc, #408]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	4a65      	ldr	r2, [pc, #404]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045d0:	4b60      	ldr	r3, [pc, #384]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	f023 0203 	bic.w	r2, r3, #3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	495d      	ldr	r1, [pc, #372]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d008      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045ee:	4b59      	ldr	r3, [pc, #356]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	4956      	ldr	r1, [pc, #344]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800460c:	4b51      	ldr	r3, [pc, #324]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	494e      	ldr	r1, [pc, #312]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800461a:	4313      	orrs	r3, r2
 800461c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d008      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800462a:	4b4a      	ldr	r3, [pc, #296]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	f023 0210 	bic.w	r2, r3, #16
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	4947      	ldr	r1, [pc, #284]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004638:	4313      	orrs	r3, r2
 800463a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d008      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004648:	4b42      	ldr	r3, [pc, #264]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	493f      	ldr	r1, [pc, #252]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004656:	4313      	orrs	r3, r2
 8004658:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d008      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004666:	4b3b      	ldr	r3, [pc, #236]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	f023 0220 	bic.w	r2, r3, #32
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	4938      	ldr	r1, [pc, #224]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004674:	4313      	orrs	r3, r2
 8004676:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004684:	4b33      	ldr	r3, [pc, #204]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	4930      	ldr	r1, [pc, #192]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004692:	4313      	orrs	r3, r2
 8004694:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046a2:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	4929      	ldr	r1, [pc, #164]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046c0:	4b24      	ldr	r3, [pc, #144]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	4921      	ldr	r1, [pc, #132]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80046de:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	491a      	ldr	r1, [pc, #104]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80046fc:	4b15      	ldr	r3, [pc, #84]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	4912      	ldr	r1, [pc, #72]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800470a:	4313      	orrs	r3, r2
 800470c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800471a:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	490b      	ldr	r1, [pc, #44]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004728:	4313      	orrs	r3, r2
 800472a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004738:	4b06      	ldr	r3, [pc, #24]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004744:	4903      	ldr	r1, [pc, #12]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004746:	4313      	orrs	r3, r2
 8004748:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3748      	adds	r7, #72	; 0x48
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40021000 	.word	0x40021000

08004758 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e09d      	b.n	80048a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	2b00      	cmp	r3, #0
 8004770:	d108      	bne.n	8004784 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800477a:	d009      	beq.n	8004790 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	61da      	str	r2, [r3, #28]
 8004782:	e005      	b.n	8004790 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fc fe46 	bl	800143c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047d0:	d902      	bls.n	80047d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	e002      	b.n	80047de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80047e6:	d007      	beq.n	80047f8 <HAL_SPI_Init+0xa0>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047f0:	d002      	beq.n	80047f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483a:	ea42 0103 	orr.w	r1, r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	0c1b      	lsrs	r3, r3, #16
 8004854:	f003 0204 	and.w	r2, r3, #4
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004874:	ea42 0103 	orr.w	r1, r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004894:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e049      	b.n	8004954 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d106      	bne.n	80048da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7fc fdf3 	bl	80014c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2202      	movs	r2, #2
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3304      	adds	r3, #4
 80048ea:	4619      	mov	r1, r3
 80048ec:	4610      	mov	r0, r2
 80048ee:	f000 fab9 	bl	8004e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	d001      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e04a      	b.n	8004a0a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a21      	ldr	r2, [pc, #132]	; (8004a18 <HAL_TIM_Base_Start_IT+0xbc>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d018      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x6c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499e:	d013      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x6c>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a1d      	ldr	r2, [pc, #116]	; (8004a1c <HAL_TIM_Base_Start_IT+0xc0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00e      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x6c>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1c      	ldr	r2, [pc, #112]	; (8004a20 <HAL_TIM_Base_Start_IT+0xc4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d009      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x6c>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1a      	ldr	r2, [pc, #104]	; (8004a24 <HAL_TIM_Base_Start_IT+0xc8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x6c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <HAL_TIM_Base_Start_IT+0xcc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d115      	bne.n	80049f4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	4b17      	ldr	r3, [pc, #92]	; (8004a2c <HAL_TIM_Base_Start_IT+0xd0>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b06      	cmp	r3, #6
 80049d8:	d015      	beq.n	8004a06 <HAL_TIM_Base_Start_IT+0xaa>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e0:	d011      	beq.n	8004a06 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f2:	e008      	b.n	8004a06 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	e000      	b.n	8004a08 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40012c00 	.word	0x40012c00
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800
 8004a24:	40013400 	.word	0x40013400
 8004a28:	40014000 	.word	0x40014000
 8004a2c:	00010007 	.word	0x00010007

08004a30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d122      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d11b      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0202 	mvn.w	r2, #2
 8004a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f9d8 	bl	8004e28 <HAL_TIM_IC_CaptureCallback>
 8004a78:	e005      	b.n	8004a86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f9ca 	bl	8004e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f9db 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0304 	and.w	r3, r3, #4
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d122      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d11b      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0204 	mvn.w	r2, #4
 8004ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f9ae 	bl	8004e28 <HAL_TIM_IC_CaptureCallback>
 8004acc:	e005      	b.n	8004ada <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f9a0 	bl	8004e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f9b1 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b08      	cmp	r3, #8
 8004aec:	d122      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d11b      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0208 	mvn.w	r2, #8
 8004b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2204      	movs	r2, #4
 8004b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f984 	bl	8004e28 <HAL_TIM_IC_CaptureCallback>
 8004b20:	e005      	b.n	8004b2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f976 	bl	8004e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f987 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d122      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b10      	cmp	r3, #16
 8004b4e:	d11b      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0210 	mvn.w	r2, #16
 8004b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2208      	movs	r2, #8
 8004b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f95a 	bl	8004e28 <HAL_TIM_IC_CaptureCallback>
 8004b74:	e005      	b.n	8004b82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f94c 	bl	8004e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f95d 	bl	8004e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d10e      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d107      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0201 	mvn.w	r2, #1
 8004bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f926 	bl	8004e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbe:	2b80      	cmp	r3, #128	; 0x80
 8004bc0:	d10e      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bcc:	2b80      	cmp	r3, #128	; 0x80
 8004bce:	d107      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 faf6 	bl	80051cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bee:	d10e      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfa:	2b80      	cmp	r3, #128	; 0x80
 8004bfc:	d107      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fae9 	bl	80051e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c18:	2b40      	cmp	r3, #64	; 0x40
 8004c1a:	d10e      	bne.n	8004c3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c26:	2b40      	cmp	r3, #64	; 0x40
 8004c28:	d107      	bne.n	8004c3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f90b 	bl	8004e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f003 0320 	and.w	r3, r3, #32
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d10e      	bne.n	8004c66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	d107      	bne.n	8004c66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f06f 0220 	mvn.w	r2, #32
 8004c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 faa9 	bl	80051b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c66:	bf00      	nop
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_TIM_ConfigClockSource+0x1c>
 8004c86:	2302      	movs	r3, #2
 8004c88:	e0b6      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x18a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cb4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc6:	d03e      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0xd8>
 8004cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ccc:	f200 8087 	bhi.w	8004dde <HAL_TIM_ConfigClockSource+0x170>
 8004cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd4:	f000 8086 	beq.w	8004de4 <HAL_TIM_ConfigClockSource+0x176>
 8004cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cdc:	d87f      	bhi.n	8004dde <HAL_TIM_ConfigClockSource+0x170>
 8004cde:	2b70      	cmp	r3, #112	; 0x70
 8004ce0:	d01a      	beq.n	8004d18 <HAL_TIM_ConfigClockSource+0xaa>
 8004ce2:	2b70      	cmp	r3, #112	; 0x70
 8004ce4:	d87b      	bhi.n	8004dde <HAL_TIM_ConfigClockSource+0x170>
 8004ce6:	2b60      	cmp	r3, #96	; 0x60
 8004ce8:	d050      	beq.n	8004d8c <HAL_TIM_ConfigClockSource+0x11e>
 8004cea:	2b60      	cmp	r3, #96	; 0x60
 8004cec:	d877      	bhi.n	8004dde <HAL_TIM_ConfigClockSource+0x170>
 8004cee:	2b50      	cmp	r3, #80	; 0x50
 8004cf0:	d03c      	beq.n	8004d6c <HAL_TIM_ConfigClockSource+0xfe>
 8004cf2:	2b50      	cmp	r3, #80	; 0x50
 8004cf4:	d873      	bhi.n	8004dde <HAL_TIM_ConfigClockSource+0x170>
 8004cf6:	2b40      	cmp	r3, #64	; 0x40
 8004cf8:	d058      	beq.n	8004dac <HAL_TIM_ConfigClockSource+0x13e>
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d86f      	bhi.n	8004dde <HAL_TIM_ConfigClockSource+0x170>
 8004cfe:	2b30      	cmp	r3, #48	; 0x30
 8004d00:	d064      	beq.n	8004dcc <HAL_TIM_ConfigClockSource+0x15e>
 8004d02:	2b30      	cmp	r3, #48	; 0x30
 8004d04:	d86b      	bhi.n	8004dde <HAL_TIM_ConfigClockSource+0x170>
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d060      	beq.n	8004dcc <HAL_TIM_ConfigClockSource+0x15e>
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d867      	bhi.n	8004dde <HAL_TIM_ConfigClockSource+0x170>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d05c      	beq.n	8004dcc <HAL_TIM_ConfigClockSource+0x15e>
 8004d12:	2b10      	cmp	r3, #16
 8004d14:	d05a      	beq.n	8004dcc <HAL_TIM_ConfigClockSource+0x15e>
 8004d16:	e062      	b.n	8004dde <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	6899      	ldr	r1, [r3, #8]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f000 f9a6 	bl	8005078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	609a      	str	r2, [r3, #8]
      break;
 8004d44:	e04f      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6818      	ldr	r0, [r3, #0]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	6899      	ldr	r1, [r3, #8]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f000 f98f 	bl	8005078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d68:	609a      	str	r2, [r3, #8]
      break;
 8004d6a:	e03c      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	6859      	ldr	r1, [r3, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f000 f903 	bl	8004f84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2150      	movs	r1, #80	; 0x50
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 f95c 	bl	8005042 <TIM_ITRx_SetConfig>
      break;
 8004d8a:	e02c      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6818      	ldr	r0, [r3, #0]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	6859      	ldr	r1, [r3, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f000 f922 	bl	8004fe2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2160      	movs	r1, #96	; 0x60
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 f94c 	bl	8005042 <TIM_ITRx_SetConfig>
      break;
 8004daa:	e01c      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	6859      	ldr	r1, [r3, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	461a      	mov	r2, r3
 8004dba:	f000 f8e3 	bl	8004f84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2140      	movs	r1, #64	; 0x40
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 f93c 	bl	8005042 <TIM_ITRx_SetConfig>
      break;
 8004dca:	e00c      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	f000 f933 	bl	8005042 <TIM_ITRx_SetConfig>
      break;
 8004ddc:	e003      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	73fb      	strb	r3, [r7, #15]
      break;
 8004de2:	e000      	b.n	8004de6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004de4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a3c      	ldr	r2, [pc, #240]	; (8004f68 <TIM_Base_SetConfig+0x104>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00f      	beq.n	8004e9c <TIM_Base_SetConfig+0x38>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e82:	d00b      	beq.n	8004e9c <TIM_Base_SetConfig+0x38>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a39      	ldr	r2, [pc, #228]	; (8004f6c <TIM_Base_SetConfig+0x108>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d007      	beq.n	8004e9c <TIM_Base_SetConfig+0x38>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a38      	ldr	r2, [pc, #224]	; (8004f70 <TIM_Base_SetConfig+0x10c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_Base_SetConfig+0x38>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a37      	ldr	r2, [pc, #220]	; (8004f74 <TIM_Base_SetConfig+0x110>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d108      	bne.n	8004eae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a2d      	ldr	r2, [pc, #180]	; (8004f68 <TIM_Base_SetConfig+0x104>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01b      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebc:	d017      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a2a      	ldr	r2, [pc, #168]	; (8004f6c <TIM_Base_SetConfig+0x108>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d013      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a29      	ldr	r2, [pc, #164]	; (8004f70 <TIM_Base_SetConfig+0x10c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00f      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a28      	ldr	r2, [pc, #160]	; (8004f74 <TIM_Base_SetConfig+0x110>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00b      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a27      	ldr	r2, [pc, #156]	; (8004f78 <TIM_Base_SetConfig+0x114>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d007      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a26      	ldr	r2, [pc, #152]	; (8004f7c <TIM_Base_SetConfig+0x118>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <TIM_Base_SetConfig+0x8a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a25      	ldr	r2, [pc, #148]	; (8004f80 <TIM_Base_SetConfig+0x11c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d108      	bne.n	8004f00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a10      	ldr	r2, [pc, #64]	; (8004f68 <TIM_Base_SetConfig+0x104>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00f      	beq.n	8004f4c <TIM_Base_SetConfig+0xe8>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a11      	ldr	r2, [pc, #68]	; (8004f74 <TIM_Base_SetConfig+0x110>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00b      	beq.n	8004f4c <TIM_Base_SetConfig+0xe8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a10      	ldr	r2, [pc, #64]	; (8004f78 <TIM_Base_SetConfig+0x114>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d007      	beq.n	8004f4c <TIM_Base_SetConfig+0xe8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a0f      	ldr	r2, [pc, #60]	; (8004f7c <TIM_Base_SetConfig+0x118>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_Base_SetConfig+0xe8>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a0e      	ldr	r2, [pc, #56]	; (8004f80 <TIM_Base_SetConfig+0x11c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d103      	bne.n	8004f54 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	615a      	str	r2, [r3, #20]
}
 8004f5a:	bf00      	nop
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40012c00 	.word	0x40012c00
 8004f6c:	40000400 	.word	0x40000400
 8004f70:	40000800 	.word	0x40000800
 8004f74:	40013400 	.word	0x40013400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800

08004f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	f023 0201 	bic.w	r2, r3, #1
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f023 030a 	bic.w	r3, r3, #10
 8004fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	621a      	str	r2, [r3, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b087      	sub	sp, #28
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f023 0210 	bic.w	r2, r3, #16
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800500c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	031b      	lsls	r3, r3, #12
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800501e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	621a      	str	r2, [r3, #32]
}
 8005036:	bf00      	nop
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005042:	b480      	push	{r7}
 8005044:	b085      	sub	sp, #20
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	f043 0307 	orr.w	r3, r3, #7
 8005064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	609a      	str	r2, [r3, #8]
}
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	021a      	lsls	r2, r3, #8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	431a      	orrs	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4313      	orrs	r3, r2
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	609a      	str	r2, [r3, #8]
}
 80050ac:	bf00      	nop
 80050ae:	371c      	adds	r7, #28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e063      	b.n	8005198 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2b      	ldr	r2, [pc, #172]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2a      	ldr	r2, [pc, #168]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d108      	bne.n	8005116 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800510a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a1b      	ldr	r2, [pc, #108]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d018      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005142:	d013      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a18      	ldr	r2, [pc, #96]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00e      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a17      	ldr	r2, [pc, #92]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d009      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d004      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d10c      	bne.n	8005186 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005172:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	4313      	orrs	r3, r2
 800517c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	40012c00 	.word	0x40012c00
 80051a8:	40013400 	.word	0x40013400
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40014000 	.word	0x40014000

080051b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e040      	b.n	8005288 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fc f992 	bl	8001540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2224      	movs	r2, #36	; 0x24
 8005220:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0201 	bic.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fc00 	bl	8005a38 <UART_SetConfig>
 8005238:	4603      	mov	r3, r0
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e022      	b.n	8005288 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fdc8 	bl	8005de0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800525e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800526e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fe4f 	bl	8005f24 <UART_CheckIdleState>
 8005286:	4603      	mov	r3, r0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08a      	sub	sp, #40	; 0x28
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	4613      	mov	r3, r2
 800529e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d178      	bne.n	800539a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <HAL_UART_Transmit+0x24>
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e071      	b.n	800539c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2221      	movs	r2, #33	; 0x21
 80052c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052c6:	f7fd f8eb 	bl	80024a0 <HAL_GetTick>
 80052ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	88fa      	ldrh	r2, [r7, #6]
 80052d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	88fa      	ldrh	r2, [r7, #6]
 80052d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e4:	d108      	bne.n	80052f8 <HAL_UART_Transmit+0x68>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d104      	bne.n	80052f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	61bb      	str	r3, [r7, #24]
 80052f6:	e003      	b.n	8005300 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052fc:	2300      	movs	r3, #0
 80052fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005300:	e030      	b.n	8005364 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2200      	movs	r2, #0
 800530a:	2180      	movs	r1, #128	; 0x80
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 feb1 	bl	8006074 <UART_WaitOnFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d004      	beq.n	8005322 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e03c      	b.n	800539c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10b      	bne.n	8005340 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	881a      	ldrh	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005334:	b292      	uxth	r2, r2
 8005336:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	3302      	adds	r3, #2
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	e008      	b.n	8005352 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	781a      	ldrb	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	b292      	uxth	r2, r2
 800534a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	3301      	adds	r3, #1
 8005350:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1c8      	bne.n	8005302 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2200      	movs	r2, #0
 8005378:	2140      	movs	r1, #64	; 0x40
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fe7a 	bl	8006074 <UART_WaitOnFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d004      	beq.n	8005390 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e005      	b.n	800539c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	e000      	b.n	800539c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800539a:	2302      	movs	r3, #2
  }
}
 800539c:	4618      	mov	r0, r3
 800539e:	3720      	adds	r7, #32
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	; 0x28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	d132      	bne.n	8005422 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <HAL_UART_Receive_IT+0x24>
 80053c2:	88fb      	ldrh	r3, [r7, #6]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e02b      	b.n	8005424 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d018      	beq.n	8005412 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	613b      	str	r3, [r7, #16]
   return(result);
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053f4:	627b      	str	r3, [r7, #36]	; 0x24
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	623b      	str	r3, [r7, #32]
 8005400:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	69f9      	ldr	r1, [r7, #28]
 8005404:	6a3a      	ldr	r2, [r7, #32]
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	61bb      	str	r3, [r7, #24]
   return(result);
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e6      	bne.n	80053e0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	461a      	mov	r2, r3
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 fe93 	bl	8006144 <UART_Start_Receive_IT>
 800541e:	4603      	mov	r3, r0
 8005420:	e000      	b.n	8005424 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005422:	2302      	movs	r3, #2
  }
}
 8005424:	4618      	mov	r0, r3
 8005426:	3728      	adds	r7, #40	; 0x28
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b0ba      	sub	sp, #232	; 0xe8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005452:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005456:	f640 030f 	movw	r3, #2063	; 0x80f
 800545a:	4013      	ands	r3, r2
 800545c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d115      	bne.n	8005494 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00f      	beq.n	8005494 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d009      	beq.n	8005494 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 82ab 	beq.w	80059e0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	4798      	blx	r3
      }
      return;
 8005492:	e2a5      	b.n	80059e0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8117 	beq.w	80056cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800549e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80054aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80054ae:	4b85      	ldr	r3, [pc, #532]	; (80056c4 <HAL_UART_IRQHandler+0x298>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 810a 	beq.w	80056cc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d011      	beq.n	80054e8 <HAL_UART_IRQHandler+0xbc>
 80054c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2201      	movs	r2, #1
 80054d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054de:	f043 0201 	orr.w	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d011      	beq.n	8005518 <HAL_UART_IRQHandler+0xec>
 80054f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2202      	movs	r2, #2
 8005506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800550e:	f043 0204 	orr.w	r2, r3, #4
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d011      	beq.n	8005548 <HAL_UART_IRQHandler+0x11c>
 8005524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00b      	beq.n	8005548 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2204      	movs	r2, #4
 8005536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800553e:	f043 0202 	orr.w	r2, r3, #2
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b00      	cmp	r3, #0
 8005552:	d017      	beq.n	8005584 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b00      	cmp	r3, #0
 800555e:	d105      	bne.n	800556c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005564:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00b      	beq.n	8005584 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2208      	movs	r2, #8
 8005572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800557a:	f043 0208 	orr.w	r2, r3, #8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800558c:	2b00      	cmp	r3, #0
 800558e:	d012      	beq.n	80055b6 <HAL_UART_IRQHandler+0x18a>
 8005590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005594:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00c      	beq.n	80055b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ac:	f043 0220 	orr.w	r2, r3, #32
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 8211 	beq.w	80059e4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80055c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00d      	beq.n	80055ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d007      	beq.n	80055ea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fe:	2b40      	cmp	r3, #64	; 0x40
 8005600:	d005      	beq.n	800560e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005606:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800560a:	2b00      	cmp	r3, #0
 800560c:	d04f      	beq.n	80056ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fe4c 	bl	80062ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	d141      	bne.n	80056a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3308      	adds	r3, #8
 8005628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005638:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800563c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3308      	adds	r3, #8
 800564a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800564e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005652:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800565a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1d9      	bne.n	8005622 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005672:	2b00      	cmp	r3, #0
 8005674:	d013      	beq.n	800569e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800567a:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <HAL_UART_IRQHandler+0x29c>)
 800567c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005682:	4618      	mov	r0, r3
 8005684:	f7fd f862 	bl	800274c <HAL_DMA_Abort_IT>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d017      	beq.n	80056be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005698:	4610      	mov	r0, r2
 800569a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569c:	e00f      	b.n	80056be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f9b4 	bl	8005a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a4:	e00b      	b.n	80056be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f9b0 	bl	8005a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ac:	e007      	b.n	80056be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f9ac 	bl	8005a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80056bc:	e192      	b.n	80059e4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056be:	bf00      	nop
    return;
 80056c0:	e190      	b.n	80059e4 <HAL_UART_IRQHandler+0x5b8>
 80056c2:	bf00      	nop
 80056c4:	04000120 	.word	0x04000120
 80056c8:	08006375 	.word	0x08006375

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	f040 814b 	bne.w	800596c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056da:	f003 0310 	and.w	r3, r3, #16
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8144 	beq.w	800596c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80056e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 813d 	beq.w	800596c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2210      	movs	r2, #16
 80056f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b40      	cmp	r3, #64	; 0x40
 8005706:	f040 80b5 	bne.w	8005874 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005716:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 8164 	beq.w	80059e8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800572a:	429a      	cmp	r2, r3
 800572c:	f080 815c 	bcs.w	80059e8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005736:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b20      	cmp	r3, #32
 8005742:	f000 8086 	beq.w	8005852 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800575a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800575e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005762:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005770:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005774:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800577c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005788:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1da      	bne.n	8005746 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3308      	adds	r3, #8
 8005796:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057a2:	f023 0301 	bic.w	r3, r3, #1
 80057a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3308      	adds	r3, #8
 80057b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057b4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80057b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80057bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80057c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e1      	bne.n	8005790 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3308      	adds	r3, #8
 80057d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80057dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3308      	adds	r3, #8
 80057ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e3      	bne.n	80057cc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005822:	f023 0310 	bic.w	r3, r3, #16
 8005826:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005834:	65bb      	str	r3, [r7, #88]	; 0x58
 8005836:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800583a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e4      	bne.n	8005812 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584c:	4618      	mov	r0, r3
 800584e:	f7fc ff44 	bl	80026da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005864:	b29b      	uxth	r3, r3
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	b29b      	uxth	r3, r3
 800586a:	4619      	mov	r1, r3
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f8d7 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005872:	e0b9      	b.n	80059e8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005880:	b29b      	uxth	r3, r3
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 80ab 	beq.w	80059ec <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005896:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80a6 	beq.w	80059ec <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058c2:	647b      	str	r3, [r7, #68]	; 0x44
 80058c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e4      	bne.n	80058a0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3308      	adds	r3, #8
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	623b      	str	r3, [r7, #32]
   return(result);
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3308      	adds	r3, #8
 80058f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058fa:	633a      	str	r2, [r7, #48]	; 0x30
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e3      	bne.n	80058d6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	e853 3f00 	ldrex	r3, [r3]
 800592e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0310 	bic.w	r3, r3, #16
 8005936:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005948:	69b9      	ldr	r1, [r7, #24]
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	e841 2300 	strex	r3, r2, [r1]
 8005950:	617b      	str	r3, [r7, #20]
   return(result);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e4      	bne.n	8005922 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800595e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f85b 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800596a:	e03f      	b.n	80059ec <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800596c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00e      	beq.n	8005996 <HAL_UART_IRQHandler+0x56a>
 8005978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800597c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800598c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fed8 	bl	8006744 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005994:	e02d      	b.n	80059f2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00e      	beq.n	80059c0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80059a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d008      	beq.n	80059c0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d01c      	beq.n	80059f0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
    }
    return;
 80059be:	e017      	b.n	80059f0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d012      	beq.n	80059f2 <HAL_UART_IRQHandler+0x5c6>
 80059cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00c      	beq.n	80059f2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fce1 	bl	80063a0 <UART_EndTransmit_IT>
    return;
 80059de:	e008      	b.n	80059f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80059e0:	bf00      	nop
 80059e2:	e006      	b.n	80059f2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80059e4:	bf00      	nop
 80059e6:	e004      	b.n	80059f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80059e8:	bf00      	nop
 80059ea:	e002      	b.n	80059f2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80059ec:	bf00      	nop
 80059ee:	e000      	b.n	80059f2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80059f0:	bf00      	nop
  }

}
 80059f2:	37e8      	adds	r7, #232	; 0xe8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005a66:	f023 030c 	bic.w	r3, r3, #12
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6812      	ldr	r2, [r2, #0]
 8005a6e:	6979      	ldr	r1, [r7, #20]
 8005a70:	430b      	orrs	r3, r1
 8005a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4aa7      	ldr	r2, [pc, #668]	; (8005d50 <UART_SetConfig+0x318>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d120      	bne.n	8005afa <UART_SetConfig+0xc2>
 8005ab8:	4ba6      	ldr	r3, [pc, #664]	; (8005d54 <UART_SetConfig+0x31c>)
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d817      	bhi.n	8005af4 <UART_SetConfig+0xbc>
 8005ac4:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <UART_SetConfig+0x94>)
 8005ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aca:	bf00      	nop
 8005acc:	08005add 	.word	0x08005add
 8005ad0:	08005ae9 	.word	0x08005ae9
 8005ad4:	08005aef 	.word	0x08005aef
 8005ad8:	08005ae3 	.word	0x08005ae3
 8005adc:	2301      	movs	r3, #1
 8005ade:	77fb      	strb	r3, [r7, #31]
 8005ae0:	e0b5      	b.n	8005c4e <UART_SetConfig+0x216>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	77fb      	strb	r3, [r7, #31]
 8005ae6:	e0b2      	b.n	8005c4e <UART_SetConfig+0x216>
 8005ae8:	2304      	movs	r3, #4
 8005aea:	77fb      	strb	r3, [r7, #31]
 8005aec:	e0af      	b.n	8005c4e <UART_SetConfig+0x216>
 8005aee:	2308      	movs	r3, #8
 8005af0:	77fb      	strb	r3, [r7, #31]
 8005af2:	e0ac      	b.n	8005c4e <UART_SetConfig+0x216>
 8005af4:	2310      	movs	r3, #16
 8005af6:	77fb      	strb	r3, [r7, #31]
 8005af8:	e0a9      	b.n	8005c4e <UART_SetConfig+0x216>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a96      	ldr	r2, [pc, #600]	; (8005d58 <UART_SetConfig+0x320>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d124      	bne.n	8005b4e <UART_SetConfig+0x116>
 8005b04:	4b93      	ldr	r3, [pc, #588]	; (8005d54 <UART_SetConfig+0x31c>)
 8005b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b10:	d011      	beq.n	8005b36 <UART_SetConfig+0xfe>
 8005b12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b16:	d817      	bhi.n	8005b48 <UART_SetConfig+0x110>
 8005b18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b1c:	d011      	beq.n	8005b42 <UART_SetConfig+0x10a>
 8005b1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b22:	d811      	bhi.n	8005b48 <UART_SetConfig+0x110>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <UART_SetConfig+0xf8>
 8005b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2c:	d006      	beq.n	8005b3c <UART_SetConfig+0x104>
 8005b2e:	e00b      	b.n	8005b48 <UART_SetConfig+0x110>
 8005b30:	2300      	movs	r3, #0
 8005b32:	77fb      	strb	r3, [r7, #31]
 8005b34:	e08b      	b.n	8005c4e <UART_SetConfig+0x216>
 8005b36:	2302      	movs	r3, #2
 8005b38:	77fb      	strb	r3, [r7, #31]
 8005b3a:	e088      	b.n	8005c4e <UART_SetConfig+0x216>
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	77fb      	strb	r3, [r7, #31]
 8005b40:	e085      	b.n	8005c4e <UART_SetConfig+0x216>
 8005b42:	2308      	movs	r3, #8
 8005b44:	77fb      	strb	r3, [r7, #31]
 8005b46:	e082      	b.n	8005c4e <UART_SetConfig+0x216>
 8005b48:	2310      	movs	r3, #16
 8005b4a:	77fb      	strb	r3, [r7, #31]
 8005b4c:	e07f      	b.n	8005c4e <UART_SetConfig+0x216>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a82      	ldr	r2, [pc, #520]	; (8005d5c <UART_SetConfig+0x324>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d124      	bne.n	8005ba2 <UART_SetConfig+0x16a>
 8005b58:	4b7e      	ldr	r3, [pc, #504]	; (8005d54 <UART_SetConfig+0x31c>)
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005b60:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b64:	d011      	beq.n	8005b8a <UART_SetConfig+0x152>
 8005b66:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b6a:	d817      	bhi.n	8005b9c <UART_SetConfig+0x164>
 8005b6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b70:	d011      	beq.n	8005b96 <UART_SetConfig+0x15e>
 8005b72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b76:	d811      	bhi.n	8005b9c <UART_SetConfig+0x164>
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <UART_SetConfig+0x14c>
 8005b7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b80:	d006      	beq.n	8005b90 <UART_SetConfig+0x158>
 8005b82:	e00b      	b.n	8005b9c <UART_SetConfig+0x164>
 8005b84:	2300      	movs	r3, #0
 8005b86:	77fb      	strb	r3, [r7, #31]
 8005b88:	e061      	b.n	8005c4e <UART_SetConfig+0x216>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	77fb      	strb	r3, [r7, #31]
 8005b8e:	e05e      	b.n	8005c4e <UART_SetConfig+0x216>
 8005b90:	2304      	movs	r3, #4
 8005b92:	77fb      	strb	r3, [r7, #31]
 8005b94:	e05b      	b.n	8005c4e <UART_SetConfig+0x216>
 8005b96:	2308      	movs	r3, #8
 8005b98:	77fb      	strb	r3, [r7, #31]
 8005b9a:	e058      	b.n	8005c4e <UART_SetConfig+0x216>
 8005b9c:	2310      	movs	r3, #16
 8005b9e:	77fb      	strb	r3, [r7, #31]
 8005ba0:	e055      	b.n	8005c4e <UART_SetConfig+0x216>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a6e      	ldr	r2, [pc, #440]	; (8005d60 <UART_SetConfig+0x328>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d124      	bne.n	8005bf6 <UART_SetConfig+0x1be>
 8005bac:	4b69      	ldr	r3, [pc, #420]	; (8005d54 <UART_SetConfig+0x31c>)
 8005bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005bb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bb8:	d011      	beq.n	8005bde <UART_SetConfig+0x1a6>
 8005bba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bbe:	d817      	bhi.n	8005bf0 <UART_SetConfig+0x1b8>
 8005bc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bc4:	d011      	beq.n	8005bea <UART_SetConfig+0x1b2>
 8005bc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bca:	d811      	bhi.n	8005bf0 <UART_SetConfig+0x1b8>
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <UART_SetConfig+0x1a0>
 8005bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bd4:	d006      	beq.n	8005be4 <UART_SetConfig+0x1ac>
 8005bd6:	e00b      	b.n	8005bf0 <UART_SetConfig+0x1b8>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	77fb      	strb	r3, [r7, #31]
 8005bdc:	e037      	b.n	8005c4e <UART_SetConfig+0x216>
 8005bde:	2302      	movs	r3, #2
 8005be0:	77fb      	strb	r3, [r7, #31]
 8005be2:	e034      	b.n	8005c4e <UART_SetConfig+0x216>
 8005be4:	2304      	movs	r3, #4
 8005be6:	77fb      	strb	r3, [r7, #31]
 8005be8:	e031      	b.n	8005c4e <UART_SetConfig+0x216>
 8005bea:	2308      	movs	r3, #8
 8005bec:	77fb      	strb	r3, [r7, #31]
 8005bee:	e02e      	b.n	8005c4e <UART_SetConfig+0x216>
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e02b      	b.n	8005c4e <UART_SetConfig+0x216>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a5a      	ldr	r2, [pc, #360]	; (8005d64 <UART_SetConfig+0x32c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d124      	bne.n	8005c4a <UART_SetConfig+0x212>
 8005c00:	4b54      	ldr	r3, [pc, #336]	; (8005d54 <UART_SetConfig+0x31c>)
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005c08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c0c:	d011      	beq.n	8005c32 <UART_SetConfig+0x1fa>
 8005c0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c12:	d817      	bhi.n	8005c44 <UART_SetConfig+0x20c>
 8005c14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c18:	d011      	beq.n	8005c3e <UART_SetConfig+0x206>
 8005c1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c1e:	d811      	bhi.n	8005c44 <UART_SetConfig+0x20c>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <UART_SetConfig+0x1f4>
 8005c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c28:	d006      	beq.n	8005c38 <UART_SetConfig+0x200>
 8005c2a:	e00b      	b.n	8005c44 <UART_SetConfig+0x20c>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	77fb      	strb	r3, [r7, #31]
 8005c30:	e00d      	b.n	8005c4e <UART_SetConfig+0x216>
 8005c32:	2302      	movs	r3, #2
 8005c34:	77fb      	strb	r3, [r7, #31]
 8005c36:	e00a      	b.n	8005c4e <UART_SetConfig+0x216>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	77fb      	strb	r3, [r7, #31]
 8005c3c:	e007      	b.n	8005c4e <UART_SetConfig+0x216>
 8005c3e:	2308      	movs	r3, #8
 8005c40:	77fb      	strb	r3, [r7, #31]
 8005c42:	e004      	b.n	8005c4e <UART_SetConfig+0x216>
 8005c44:	2310      	movs	r3, #16
 8005c46:	77fb      	strb	r3, [r7, #31]
 8005c48:	e001      	b.n	8005c4e <UART_SetConfig+0x216>
 8005c4a:	2310      	movs	r3, #16
 8005c4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c56:	d15b      	bne.n	8005d10 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005c58:	7ffb      	ldrb	r3, [r7, #31]
 8005c5a:	2b08      	cmp	r3, #8
 8005c5c:	d827      	bhi.n	8005cae <UART_SetConfig+0x276>
 8005c5e:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <UART_SetConfig+0x22c>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005c89 	.word	0x08005c89
 8005c68:	08005c91 	.word	0x08005c91
 8005c6c:	08005c99 	.word	0x08005c99
 8005c70:	08005caf 	.word	0x08005caf
 8005c74:	08005c9f 	.word	0x08005c9f
 8005c78:	08005caf 	.word	0x08005caf
 8005c7c:	08005caf 	.word	0x08005caf
 8005c80:	08005caf 	.word	0x08005caf
 8005c84:	08005ca7 	.word	0x08005ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c88:	f7fe fb72 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 8005c8c:	61b8      	str	r0, [r7, #24]
        break;
 8005c8e:	e013      	b.n	8005cb8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c90:	f7fe fb90 	bl	80043b4 <HAL_RCC_GetPCLK2Freq>
 8005c94:	61b8      	str	r0, [r7, #24]
        break;
 8005c96:	e00f      	b.n	8005cb8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c98:	4b33      	ldr	r3, [pc, #204]	; (8005d68 <UART_SetConfig+0x330>)
 8005c9a:	61bb      	str	r3, [r7, #24]
        break;
 8005c9c:	e00c      	b.n	8005cb8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c9e:	f7fe faf1 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8005ca2:	61b8      	str	r0, [r7, #24]
        break;
 8005ca4:	e008      	b.n	8005cb8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005caa:	61bb      	str	r3, [r7, #24]
        break;
 8005cac:	e004      	b.n	8005cb8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	77bb      	strb	r3, [r7, #30]
        break;
 8005cb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 8082 	beq.w	8005dc4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	005a      	lsls	r2, r3, #1
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	085b      	lsrs	r3, r3, #1
 8005cca:	441a      	add	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b0f      	cmp	r3, #15
 8005cda:	d916      	bls.n	8005d0a <UART_SetConfig+0x2d2>
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce2:	d212      	bcs.n	8005d0a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f023 030f 	bic.w	r3, r3, #15
 8005cec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	89fb      	ldrh	r3, [r7, #14]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	89fa      	ldrh	r2, [r7, #14]
 8005d06:	60da      	str	r2, [r3, #12]
 8005d08:	e05c      	b.n	8005dc4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	77bb      	strb	r3, [r7, #30]
 8005d0e:	e059      	b.n	8005dc4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d10:	7ffb      	ldrb	r3, [r7, #31]
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	d835      	bhi.n	8005d82 <UART_SetConfig+0x34a>
 8005d16:	a201      	add	r2, pc, #4	; (adr r2, 8005d1c <UART_SetConfig+0x2e4>)
 8005d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1c:	08005d41 	.word	0x08005d41
 8005d20:	08005d49 	.word	0x08005d49
 8005d24:	08005d6d 	.word	0x08005d6d
 8005d28:	08005d83 	.word	0x08005d83
 8005d2c:	08005d73 	.word	0x08005d73
 8005d30:	08005d83 	.word	0x08005d83
 8005d34:	08005d83 	.word	0x08005d83
 8005d38:	08005d83 	.word	0x08005d83
 8005d3c:	08005d7b 	.word	0x08005d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d40:	f7fe fb16 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 8005d44:	61b8      	str	r0, [r7, #24]
        break;
 8005d46:	e021      	b.n	8005d8c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d48:	f7fe fb34 	bl	80043b4 <HAL_RCC_GetPCLK2Freq>
 8005d4c:	61b8      	str	r0, [r7, #24]
        break;
 8005d4e:	e01d      	b.n	8005d8c <UART_SetConfig+0x354>
 8005d50:	40013800 	.word	0x40013800
 8005d54:	40021000 	.word	0x40021000
 8005d58:	40004400 	.word	0x40004400
 8005d5c:	40004800 	.word	0x40004800
 8005d60:	40004c00 	.word	0x40004c00
 8005d64:	40005000 	.word	0x40005000
 8005d68:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d6c:	4b1b      	ldr	r3, [pc, #108]	; (8005ddc <UART_SetConfig+0x3a4>)
 8005d6e:	61bb      	str	r3, [r7, #24]
        break;
 8005d70:	e00c      	b.n	8005d8c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d72:	f7fe fa87 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8005d76:	61b8      	str	r0, [r7, #24]
        break;
 8005d78:	e008      	b.n	8005d8c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d7e:	61bb      	str	r3, [r7, #24]
        break;
 8005d80:	e004      	b.n	8005d8c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	77bb      	strb	r3, [r7, #30]
        break;
 8005d8a:	bf00      	nop
    }

    if (pclk != 0U)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d018      	beq.n	8005dc4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	085a      	lsrs	r2, r3, #1
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	441a      	add	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b0f      	cmp	r3, #15
 8005daa:	d909      	bls.n	8005dc0 <UART_SetConfig+0x388>
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db2:	d205      	bcs.n	8005dc0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60da      	str	r2, [r3, #12]
 8005dbe:	e001      	b.n	8005dc4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005dd0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3720      	adds	r7, #32
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	007a1200 	.word	0x007a1200

08005de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00a      	beq.n	8005e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00a      	beq.n	8005e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01a      	beq.n	8005ef6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ede:	d10a      	bne.n	8005ef6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	605a      	str	r2, [r3, #4]
  }
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b098      	sub	sp, #96	; 0x60
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f34:	f7fc fab4 	bl	80024a0 <HAL_GetTick>
 8005f38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d12e      	bne.n	8005fa6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f50:	2200      	movs	r2, #0
 8005f52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f88c 	bl	8006074 <UART_WaitOnFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d021      	beq.n	8005fa6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f76:	653b      	str	r3, [r7, #80]	; 0x50
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f80:	647b      	str	r3, [r7, #68]	; 0x44
 8005f82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e6      	bne.n	8005f62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e062      	b.n	800606c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d149      	bne.n	8006048 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f856 	bl	8006074 <UART_WaitOnFlagUntilTimeout>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d03c      	beq.n	8006048 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	623b      	str	r3, [r7, #32]
   return(result);
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fec:	633b      	str	r3, [r7, #48]	; 0x30
 8005fee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff4:	e841 2300 	strex	r3, r2, [r1]
 8005ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1e6      	bne.n	8005fce <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3308      	adds	r3, #8
 8006006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0301 	bic.w	r3, r3, #1
 8006016:	64bb      	str	r3, [r7, #72]	; 0x48
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3308      	adds	r3, #8
 800601e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006020:	61fa      	str	r2, [r7, #28]
 8006022:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	69b9      	ldr	r1, [r7, #24]
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	617b      	str	r3, [r7, #20]
   return(result);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e5      	bne.n	8006000 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e011      	b.n	800606c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3758      	adds	r7, #88	; 0x58
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	4613      	mov	r3, r2
 8006082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006084:	e049      	b.n	800611a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608c:	d045      	beq.n	800611a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608e:	f7fc fa07 	bl	80024a0 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	429a      	cmp	r2, r3
 800609c:	d302      	bcc.n	80060a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e048      	b.n	800613a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d031      	beq.n	800611a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	f003 0308 	and.w	r3, r3, #8
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d110      	bne.n	80060e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2208      	movs	r2, #8
 80060ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 f8ed 	bl	80062ac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2208      	movs	r2, #8
 80060d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e029      	b.n	800613a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f4:	d111      	bne.n	800611a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 f8d3 	bl	80062ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2220      	movs	r2, #32
 800610a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e00f      	b.n	800613a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4013      	ands	r3, r2
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	429a      	cmp	r2, r3
 8006128:	bf0c      	ite	eq
 800612a:	2301      	moveq	r3, #1
 800612c:	2300      	movne	r3, #0
 800612e:	b2db      	uxtb	r3, r3
 8006130:	461a      	mov	r2, r3
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	429a      	cmp	r2, r3
 8006136:	d0a6      	beq.n	8006086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006144:	b480      	push	{r7}
 8006146:	b097      	sub	sp, #92	; 0x5c
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	4613      	mov	r3, r2
 8006150:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	88fa      	ldrh	r2, [r7, #6]
 800615c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	88fa      	ldrh	r2, [r7, #6]
 8006164:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006176:	d10e      	bne.n	8006196 <UART_Start_Receive_IT+0x52>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d105      	bne.n	800618c <UART_Start_Receive_IT+0x48>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006186:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800618a:	e01a      	b.n	80061c2 <UART_Start_Receive_IT+0x7e>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	22ff      	movs	r2, #255	; 0xff
 8006190:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006194:	e015      	b.n	80061c2 <UART_Start_Receive_IT+0x7e>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10d      	bne.n	80061ba <UART_Start_Receive_IT+0x76>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d104      	bne.n	80061b0 <UART_Start_Receive_IT+0x6c>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	22ff      	movs	r2, #255	; 0xff
 80061aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061ae:	e008      	b.n	80061c2 <UART_Start_Receive_IT+0x7e>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	227f      	movs	r2, #127	; 0x7f
 80061b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061b8:	e003      	b.n	80061c2 <UART_Start_Receive_IT+0x7e>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2222      	movs	r2, #34	; 0x22
 80061ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3308      	adds	r3, #8
 80061d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e4:	f043 0301 	orr.w	r3, r3, #1
 80061e8:	657b      	str	r3, [r7, #84]	; 0x54
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3308      	adds	r3, #8
 80061f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80061f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e5      	bne.n	80061d2 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620e:	d107      	bne.n	8006220 <UART_Start_Receive_IT+0xdc>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d103      	bne.n	8006220 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4a22      	ldr	r2, [pc, #136]	; (80062a4 <UART_Start_Receive_IT+0x160>)
 800621c:	669a      	str	r2, [r3, #104]	; 0x68
 800621e:	e002      	b.n	8006226 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4a21      	ldr	r2, [pc, #132]	; (80062a8 <UART_Start_Receive_IT+0x164>)
 8006224:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d019      	beq.n	8006262 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006236:	e853 3f00 	ldrex	r3, [r3]
 800623a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800624c:	637b      	str	r3, [r7, #52]	; 0x34
 800624e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006250:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006254:	e841 2300 	strex	r3, r2, [r1]
 8006258:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e6      	bne.n	800622e <UART_Start_Receive_IT+0xea>
 8006260:	e018      	b.n	8006294 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	613b      	str	r3, [r7, #16]
   return(result);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f043 0320 	orr.w	r3, r3, #32
 8006276:	653b      	str	r3, [r7, #80]	; 0x50
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	461a      	mov	r2, r3
 800627e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006280:	623b      	str	r3, [r7, #32]
 8006282:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	69f9      	ldr	r1, [r7, #28]
 8006286:	6a3a      	ldr	r2, [r7, #32]
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	61bb      	str	r3, [r7, #24]
   return(result);
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e6      	bne.n	8006262 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	375c      	adds	r7, #92	; 0x5c
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	0800659d 	.word	0x0800659d
 80062a8:	080063f5 	.word	0x080063f5

080062ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b095      	sub	sp, #84	; 0x54
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d2:	643b      	str	r3, [r7, #64]	; 0x40
 80062d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e6      	bne.n	80062b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3308      	adds	r3, #8
 80062ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	f023 0301 	bic.w	r3, r3, #1
 80062fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3308      	adds	r3, #8
 8006304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006306:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006308:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800630c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800630e:	e841 2300 	strex	r3, r2, [r1]
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1e5      	bne.n	80062e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800631e:	2b01      	cmp	r3, #1
 8006320:	d118      	bne.n	8006354 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f023 0310 	bic.w	r3, r3, #16
 8006336:	647b      	str	r3, [r7, #68]	; 0x44
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006340:	61bb      	str	r3, [r7, #24]
 8006342:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	6979      	ldr	r1, [r7, #20]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	613b      	str	r3, [r7, #16]
   return(result);
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e6      	bne.n	8006322 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006368:	bf00      	nop
 800636a:	3754      	adds	r7, #84	; 0x54
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f7ff fb3a 	bl	8005a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063bc:	61fb      	str	r3, [r7, #28]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	61bb      	str	r3, [r7, #24]
 80063c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6979      	ldr	r1, [r7, #20]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	613b      	str	r3, [r7, #16]
   return(result);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e6      	bne.n	80063a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff fb06 	bl	80059f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ec:	bf00      	nop
 80063ee:	3720      	adds	r7, #32
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b09c      	sub	sp, #112	; 0x70
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006402:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800640c:	2b22      	cmp	r3, #34	; 0x22
 800640e:	f040 80b9 	bne.w	8006584 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006418:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800641c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006420:	b2d9      	uxtb	r1, r3
 8006422:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006426:	b2da      	uxtb	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642c:	400a      	ands	r2, r1
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	f040 809c 	bne.w	8006594 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800646a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800646c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006470:	66bb      	str	r3, [r7, #104]	; 0x68
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800647a:	65bb      	str	r3, [r7, #88]	; 0x58
 800647c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e6      	bne.n	800645c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3308      	adds	r3, #8
 8006494:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006498:	e853 3f00 	ldrex	r3, [r3]
 800649c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800649e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a0:	f023 0301 	bic.w	r3, r3, #1
 80064a4:	667b      	str	r3, [r7, #100]	; 0x64
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3308      	adds	r3, #8
 80064ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80064ae:	647a      	str	r2, [r7, #68]	; 0x44
 80064b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e5      	bne.n	800648e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d018      	beq.n	8006516 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	623b      	str	r3, [r7, #32]
   return(result);
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064f8:	663b      	str	r3, [r7, #96]	; 0x60
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006502:	633b      	str	r3, [r7, #48]	; 0x30
 8006504:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e6      	bne.n	80064e4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800651a:	2b01      	cmp	r3, #1
 800651c:	d12e      	bne.n	800657c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	60fb      	str	r3, [r7, #12]
   return(result);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f023 0310 	bic.w	r3, r3, #16
 8006538:	65fb      	str	r3, [r7, #92]	; 0x5c
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006542:	61fb      	str	r3, [r7, #28]
 8006544:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	69b9      	ldr	r1, [r7, #24]
 8006548:	69fa      	ldr	r2, [r7, #28]
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	617b      	str	r3, [r7, #20]
   return(result);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e6      	bne.n	8006524 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b10      	cmp	r3, #16
 8006562:	d103      	bne.n	800656c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2210      	movs	r2, #16
 800656a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff fa53 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800657a:	e00b      	b.n	8006594 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7fa fb9b 	bl	8000cb8 <HAL_UART_RxCpltCallback>
}
 8006582:	e007      	b.n	8006594 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0208 	orr.w	r2, r2, #8
 8006592:	619a      	str	r2, [r3, #24]
}
 8006594:	bf00      	nop
 8006596:	3770      	adds	r7, #112	; 0x70
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b09c      	sub	sp, #112	; 0x70
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065b4:	2b22      	cmp	r3, #34	; 0x22
 80065b6:	f040 80b9 	bne.w	800672c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80065c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80065ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80065ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80065d2:	4013      	ands	r3, r2
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065de:	1c9a      	adds	r2, r3, #2
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	3b01      	subs	r3, #1
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f040 809c 	bne.w	800673c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006618:	667b      	str	r3, [r7, #100]	; 0x64
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006622:	657b      	str	r3, [r7, #84]	; 0x54
 8006624:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e6      	bne.n	8006604 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3308      	adds	r3, #8
 800663c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	663b      	str	r3, [r7, #96]	; 0x60
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3308      	adds	r3, #8
 8006654:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006656:	643a      	str	r2, [r7, #64]	; 0x40
 8006658:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800665c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e5      	bne.n	8006636 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2220      	movs	r2, #32
 800666e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d018      	beq.n	80066be <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	61fb      	str	r3, [r7, #28]
   return(result);
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e6      	bne.n	800668c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d12e      	bne.n	8006724 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f023 0310 	bic.w	r3, r3, #16
 80066e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066ea:	61bb      	str	r3, [r7, #24]
 80066ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	6979      	ldr	r1, [r7, #20]
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	613b      	str	r3, [r7, #16]
   return(result);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e6      	bne.n	80066cc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	f003 0310 	and.w	r3, r3, #16
 8006708:	2b10      	cmp	r3, #16
 800670a:	d103      	bne.n	8006714 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2210      	movs	r2, #16
 8006712:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff f97f 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006722:	e00b      	b.n	800673c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7fa fac7 	bl	8000cb8 <HAL_UART_RxCpltCallback>
}
 800672a:	e007      	b.n	800673c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699a      	ldr	r2, [r3, #24]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0208 	orr.w	r2, r2, #8
 800673a:	619a      	str	r2, [r3, #24]
}
 800673c:	bf00      	nop
 800673e:	3770      	adds	r7, #112	; 0x70
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006760:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006764:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800676c:	b29a      	uxth	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	b29b      	uxth	r3, r3
 8006772:	43db      	mvns	r3, r3
 8006774:	b29b      	uxth	r3, r3
 8006776:	4013      	ands	r3, r2
 8006778:	b29a      	uxth	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800678e:	b084      	sub	sp, #16
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	f107 0014 	add.w	r0, r7, #20
 800679c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	b004      	add	sp, #16
 80067ce:	4770      	bx	lr

080067d0 <__libc_init_array>:
 80067d0:	b570      	push	{r4, r5, r6, lr}
 80067d2:	4d0d      	ldr	r5, [pc, #52]	; (8006808 <__libc_init_array+0x38>)
 80067d4:	4c0d      	ldr	r4, [pc, #52]	; (800680c <__libc_init_array+0x3c>)
 80067d6:	1b64      	subs	r4, r4, r5
 80067d8:	10a4      	asrs	r4, r4, #2
 80067da:	2600      	movs	r6, #0
 80067dc:	42a6      	cmp	r6, r4
 80067de:	d109      	bne.n	80067f4 <__libc_init_array+0x24>
 80067e0:	4d0b      	ldr	r5, [pc, #44]	; (8006810 <__libc_init_array+0x40>)
 80067e2:	4c0c      	ldr	r4, [pc, #48]	; (8006814 <__libc_init_array+0x44>)
 80067e4:	f000 f828 	bl	8006838 <_init>
 80067e8:	1b64      	subs	r4, r4, r5
 80067ea:	10a4      	asrs	r4, r4, #2
 80067ec:	2600      	movs	r6, #0
 80067ee:	42a6      	cmp	r6, r4
 80067f0:	d105      	bne.n	80067fe <__libc_init_array+0x2e>
 80067f2:	bd70      	pop	{r4, r5, r6, pc}
 80067f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f8:	4798      	blx	r3
 80067fa:	3601      	adds	r6, #1
 80067fc:	e7ee      	b.n	80067dc <__libc_init_array+0xc>
 80067fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006802:	4798      	blx	r3
 8006804:	3601      	adds	r6, #1
 8006806:	e7f2      	b.n	80067ee <__libc_init_array+0x1e>
 8006808:	08006888 	.word	0x08006888
 800680c:	08006888 	.word	0x08006888
 8006810:	08006888 	.word	0x08006888
 8006814:	0800688c 	.word	0x0800688c

08006818 <memset>:
 8006818:	4402      	add	r2, r0
 800681a:	4603      	mov	r3, r0
 800681c:	4293      	cmp	r3, r2
 800681e:	d100      	bne.n	8006822 <memset+0xa>
 8006820:	4770      	bx	lr
 8006822:	f803 1b01 	strb.w	r1, [r3], #1
 8006826:	e7f9      	b.n	800681c <memset+0x4>

08006828 <strcpy>:
 8006828:	4603      	mov	r3, r0
 800682a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800682e:	f803 2b01 	strb.w	r2, [r3], #1
 8006832:	2a00      	cmp	r2, #0
 8006834:	d1f9      	bne.n	800682a <strcpy+0x2>
 8006836:	4770      	bx	lr

08006838 <_init>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	bf00      	nop
 800683c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683e:	bc08      	pop	{r3}
 8006840:	469e      	mov	lr, r3
 8006842:	4770      	bx	lr

08006844 <_fini>:
 8006844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006846:	bf00      	nop
 8006848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684a:	bc08      	pop	{r3}
 800684c:	469e      	mov	lr, r3
 800684e:	4770      	bx	lr
