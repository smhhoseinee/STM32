
prj2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800266c  0800266c  0001266c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800269c  0800269c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800269c  0800269c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800269c  0800269c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800269c  0800269c  0001269c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ef1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000140e  00000000  00000000  00028f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000950  00000000  00000000  0002a340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a8  00000000  00000000  0002ac90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c5c8  00000000  00000000  0002b538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a8bf  00000000  00000000  00047b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae331  00000000  00000000  000523bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001006f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026ac  00000000  00000000  00100740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002654 	.word	0x08002654

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002654 	.word	0x08002654

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa0c 	bl	80005e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f810 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8a2 	bl	800031c <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f852 	bl	8000280 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
 80001dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <main+0x28>)
 80001e2:	f000 fd03 	bl	8000bec <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 80001e6:	20c8      	movs	r0, #200	; 0xc8
 80001e8:	f000 fa64 	bl	80006b4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
 80001ec:	e7f6      	b.n	80001dc <main+0x14>
 80001ee:	bf00      	nop
 80001f0:	48001000 	.word	0x48001000

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	; 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f002 fa1e 	bl	8002644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000216:	2301      	movs	r3, #1
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800021a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800021e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000228:	2302      	movs	r3, #2
 800022a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800022c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000232:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000236:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000238:	f107 0318 	add.w	r3, r7, #24
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fcef 	bl	8000c20 <HAL_RCC_OscConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000248:	f000 f920 	bl	800048c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024c:	230f      	movs	r3, #15
 800024e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000250:	2302      	movs	r3, #2
 8000252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2101      	movs	r1, #1
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fd18 	bl	8001c9c <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000272:	f000 f90b 	bl	800048c <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3740      	adds	r7, #64	; 0x40
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000286:	f107 0310 	add.w	r3, r7, #16
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800029e:	4b1e      	ldr	r3, [pc, #120]	; (8000318 <MX_TIM2_Init+0x98>)
 80002a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002a6:	4b1c      	ldr	r3, [pc, #112]	; (8000318 <MX_TIM2_Init+0x98>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ac:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <MX_TIM2_Init+0x98>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80002b2:	4b19      	ldr	r3, [pc, #100]	; (8000318 <MX_TIM2_Init+0x98>)
 80002b4:	f04f 32ff 	mov.w	r2, #4294967295
 80002b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ba:	4b17      	ldr	r3, [pc, #92]	; (8000318 <MX_TIM2_Init+0x98>)
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002c0:	4b15      	ldr	r3, [pc, #84]	; (8000318 <MX_TIM2_Init+0x98>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002c6:	4814      	ldr	r0, [pc, #80]	; (8000318 <MX_TIM2_Init+0x98>)
 80002c8:	f001 fece 	bl	8002068 <HAL_TIM_Base_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80002d2:	f000 f8db 	bl	800048c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002dc:	f107 0310 	add.w	r3, r7, #16
 80002e0:	4619      	mov	r1, r3
 80002e2:	480d      	ldr	r0, [pc, #52]	; (8000318 <MX_TIM2_Init+0x98>)
 80002e4:	f001 ff17 	bl	8002116 <HAL_TIM_ConfigClockSource>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80002ee:	f000 f8cd 	bl	800048c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f2:	2300      	movs	r3, #0
 80002f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4619      	mov	r1, r3
 80002fe:	4806      	ldr	r0, [pc, #24]	; (8000318 <MX_TIM2_Init+0x98>)
 8000300:	f002 f8fc 	bl	80024fc <HAL_TIMEx_MasterConfigSynchronization>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800030a:	f000 f8bf 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800030e:	bf00      	nop
 8000310:	3720      	adds	r7, #32
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000028 	.word	0x20000028

0800031c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b08a      	sub	sp, #40	; 0x28
 8000320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000332:	4b53      	ldr	r3, [pc, #332]	; (8000480 <MX_GPIO_Init+0x164>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	4a52      	ldr	r2, [pc, #328]	; (8000480 <MX_GPIO_Init+0x164>)
 8000338:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800033c:	6153      	str	r3, [r2, #20]
 800033e:	4b50      	ldr	r3, [pc, #320]	; (8000480 <MX_GPIO_Init+0x164>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000346:	613b      	str	r3, [r7, #16]
 8000348:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034a:	4b4d      	ldr	r3, [pc, #308]	; (8000480 <MX_GPIO_Init+0x164>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a4c      	ldr	r2, [pc, #304]	; (8000480 <MX_GPIO_Init+0x164>)
 8000350:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000354:	6153      	str	r3, [r2, #20]
 8000356:	4b4a      	ldr	r3, [pc, #296]	; (8000480 <MX_GPIO_Init+0x164>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000362:	4b47      	ldr	r3, [pc, #284]	; (8000480 <MX_GPIO_Init+0x164>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	4a46      	ldr	r2, [pc, #280]	; (8000480 <MX_GPIO_Init+0x164>)
 8000368:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800036c:	6153      	str	r3, [r2, #20]
 800036e:	4b44      	ldr	r3, [pc, #272]	; (8000480 <MX_GPIO_Init+0x164>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000376:	60bb      	str	r3, [r7, #8]
 8000378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037a:	4b41      	ldr	r3, [pc, #260]	; (8000480 <MX_GPIO_Init+0x164>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a40      	ldr	r2, [pc, #256]	; (8000480 <MX_GPIO_Init+0x164>)
 8000380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000384:	6153      	str	r3, [r2, #20]
 8000386:	4b3e      	ldr	r3, [pc, #248]	; (8000480 <MX_GPIO_Init+0x164>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000392:	4b3b      	ldr	r3, [pc, #236]	; (8000480 <MX_GPIO_Init+0x164>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a3a      	ldr	r2, [pc, #232]	; (8000480 <MX_GPIO_Init+0x164>)
 8000398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b38      	ldr	r3, [pc, #224]	; (8000480 <MX_GPIO_Init+0x164>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003a6:	603b      	str	r3, [r7, #0]
 80003a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80003aa:	2200      	movs	r2, #0
 80003ac:	f64f 7108 	movw	r1, #65288	; 0xff08
 80003b0:	4834      	ldr	r0, [pc, #208]	; (8000484 <MX_GPIO_Init+0x168>)
 80003b2:	f000 fc03 	bl	8000bbc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	21e0      	movs	r1, #224	; 0xe0
 80003ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003be:	f000 fbfd 	bl	8000bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80003c2:	2337      	movs	r3, #55	; 0x37
 80003c4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80003c6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80003ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003d0:	f107 0314 	add.w	r3, r7, #20
 80003d4:	4619      	mov	r1, r3
 80003d6:	482b      	ldr	r0, [pc, #172]	; (8000484 <MX_GPIO_Init+0x168>)
 80003d8:	f000 fa76 	bl	80008c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80003dc:	f64f 7308 	movw	r3, #65288	; 0xff08
 80003e0:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e2:	2301      	movs	r3, #1
 80003e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ea:	2300      	movs	r3, #0
 80003ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003ee:	f107 0314 	add.w	r3, r7, #20
 80003f2:	4619      	mov	r1, r3
 80003f4:	4823      	ldr	r0, [pc, #140]	; (8000484 <MX_GPIO_Init+0x168>)
 80003f6:	f000 fa67 	bl	80008c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003fa:	2301      	movs	r3, #1
 80003fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003fe:	2300      	movs	r3, #0
 8000400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000406:	f107 0314 	add.w	r3, r7, #20
 800040a:	4619      	mov	r1, r3
 800040c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000410:	f000 fa5a 	bl	80008c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000414:	23e0      	movs	r3, #224	; 0xe0
 8000416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000418:	2301      	movs	r3, #1
 800041a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000420:	2300      	movs	r3, #0
 8000422:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	4619      	mov	r1, r3
 800042a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042e:	f000 fa4b 	bl	80008c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000432:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000438:	2302      	movs	r3, #2
 800043a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000440:	2303      	movs	r3, #3
 8000442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000444:	230e      	movs	r3, #14
 8000446:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000448:	f107 0314 	add.w	r3, r7, #20
 800044c:	4619      	mov	r1, r3
 800044e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000452:	f000 fa39 	bl	80008c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000456:	23c0      	movs	r3, #192	; 0xc0
 8000458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800045a:	2312      	movs	r3, #18
 800045c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800045e:	2301      	movs	r3, #1
 8000460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000462:	2303      	movs	r3, #3
 8000464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000466:	2304      	movs	r3, #4
 8000468:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046a:	f107 0314 	add.w	r3, r7, #20
 800046e:	4619      	mov	r1, r3
 8000470:	4805      	ldr	r0, [pc, #20]	; (8000488 <MX_GPIO_Init+0x16c>)
 8000472:	f000 fa29 	bl	80008c8 <HAL_GPIO_Init>

}
 8000476:	bf00      	nop
 8000478:	3728      	adds	r7, #40	; 0x28
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000
 8000484:	48001000 	.word	0x48001000
 8000488:	48000400 	.word	0x48000400

0800048c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000490:	b672      	cpsid	i
}
 8000492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000494:	e7fe      	b.n	8000494 <Error_Handler+0x8>
	...

08000498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <HAL_MspInit+0x44>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <HAL_MspInit+0x44>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6193      	str	r3, [r2, #24]
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <HAL_MspInit+0x44>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <HAL_MspInit+0x44>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	4a08      	ldr	r2, [pc, #32]	; (80004dc <HAL_MspInit+0x44>)
 80004bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c0:	61d3      	str	r3, [r2, #28]
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <HAL_MspInit+0x44>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004ce:	2007      	movs	r0, #7
 80004d0:	f000 f9c6 	bl	8000860 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40021000 	.word	0x40021000

080004e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004f0:	d10b      	bne.n	800050a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <HAL_TIM_Base_MspInit+0x38>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_TIM_Base_MspInit+0x38>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	61d3      	str	r3, [r2, #28]
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <HAL_TIM_Base_MspInit+0x38>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000

0800051c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <NMI_Handler+0x4>

08000522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <HardFault_Handler+0x4>

08000528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <MemManage_Handler+0x4>

0800052e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <BusFault_Handler+0x4>

08000534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <UsageFault_Handler+0x4>

0800053a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000568:	f000 f884 	bl	8000674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}

08000570 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <SystemInit+0x20>)
 8000576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800057a:	4a05      	ldr	r2, [pc, #20]	; (8000590 <SystemInit+0x20>)
 800057c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000598:	480d      	ldr	r0, [pc, #52]	; (80005d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800059a:	490e      	ldr	r1, [pc, #56]	; (80005d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800059c:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <LoopForever+0xe>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b0:	4c0b      	ldr	r4, [pc, #44]	; (80005e0 <LoopForever+0x16>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005be:	f7ff ffd7 	bl	8000570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005c2:	f002 f81b 	bl	80025fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005c6:	f7ff fdff 	bl	80001c8 <main>

080005ca <LoopForever>:

LoopForever:
    b LoopForever
 80005ca:	e7fe      	b.n	80005ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005cc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005d8:	080026a4 	.word	0x080026a4
  ldr r2, =_sbss
 80005dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005e0:	20000078 	.word	0x20000078

080005e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005e4:	e7fe      	b.n	80005e4 <ADC1_2_IRQHandler>
	...

080005e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_Init+0x28>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_Init+0x28>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f8:	2003      	movs	r0, #3
 80005fa:	f000 f931 	bl	8000860 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 f808 	bl	8000614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000604:	f7ff ff48 	bl	8000498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40022000 	.word	0x40022000

08000614 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_InitTick+0x54>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_InitTick+0x58>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062a:	fbb3 f3f1 	udiv	r3, r3, r1
 800062e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f93b 	bl	80008ae <HAL_SYSTICK_Config>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
 8000640:	e00e      	b.n	8000660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b0f      	cmp	r3, #15
 8000646:	d80a      	bhi.n	800065e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000648:	2200      	movs	r2, #0
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	f000 f911 	bl	8000876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000654:	4a06      	ldr	r2, [pc, #24]	; (8000670 <HAL_InitTick+0x5c>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800065a:	2300      	movs	r3, #0
 800065c:	e000      	b.n	8000660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000000 	.word	0x20000000
 800066c:	20000008 	.word	0x20000008
 8000670:	20000004 	.word	0x20000004

08000674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_IncTick+0x20>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_IncTick+0x24>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4413      	add	r3, r2
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <HAL_IncTick+0x24>)
 8000686:	6013      	str	r3, [r2, #0]
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000008 	.word	0x20000008
 8000698:	20000074 	.word	0x20000074

0800069c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return uwTick;  
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <HAL_GetTick+0x14>)
 80006a2:	681b      	ldr	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000074 	.word	0x20000074

080006b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006bc:	f7ff ffee 	bl	800069c <HAL_GetTick>
 80006c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006cc:	d005      	beq.n	80006da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <HAL_Delay+0x44>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	4413      	add	r3, r2
 80006d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006da:	bf00      	nop
 80006dc:	f7ff ffde 	bl	800069c <HAL_GetTick>
 80006e0:	4602      	mov	r2, r0
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d8f7      	bhi.n	80006dc <HAL_Delay+0x28>
  {
  }
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000008 	.word	0x20000008

080006fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000718:	4013      	ands	r3, r2
 800071a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072e:	4a04      	ldr	r2, [pc, #16]	; (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	60d3      	str	r3, [r2, #12]
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <__NVIC_GetPriorityGrouping+0x18>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	0a1b      	lsrs	r3, r3, #8
 800074e:	f003 0307 	and.w	r3, r3, #7
}
 8000752:	4618      	mov	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	db0a      	blt.n	800078a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	490c      	ldr	r1, [pc, #48]	; (80007ac <__NVIC_SetPriority+0x4c>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	440b      	add	r3, r1
 8000784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000788:	e00a      	b.n	80007a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4908      	ldr	r1, [pc, #32]	; (80007b0 <__NVIC_SetPriority+0x50>)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	3b04      	subs	r3, #4
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	440b      	add	r3, r1
 800079e:	761a      	strb	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43da      	mvns	r2, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	401a      	ands	r2, r3
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43d9      	mvns	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	4313      	orrs	r3, r2
         );
}
 800080e:	4618      	mov	r0, r3
 8000810:	3724      	adds	r7, #36	; 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800082c:	d301      	bcc.n	8000832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082e:	2301      	movs	r3, #1
 8000830:	e00f      	b.n	8000852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <SysTick_Config+0x40>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800083a:	210f      	movs	r1, #15
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f7ff ff8e 	bl	8000760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <SysTick_Config+0x40>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084a:	4b04      	ldr	r3, [pc, #16]	; (800085c <SysTick_Config+0x40>)
 800084c:	2207      	movs	r2, #7
 800084e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	e000e010 	.word	0xe000e010

08000860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ff47 	bl	80006fc <__NVIC_SetPriorityGrouping>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b086      	sub	sp, #24
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000888:	f7ff ff5c 	bl	8000744 <__NVIC_GetPriorityGrouping>
 800088c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	6978      	ldr	r0, [r7, #20]
 8000894:	f7ff ff8e 	bl	80007b4 <NVIC_EncodePriority>
 8000898:	4602      	mov	r2, r0
 800089a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089e:	4611      	mov	r1, r2
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff5d 	bl	8000760 <__NVIC_SetPriority>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff ffb0 	bl	800081c <SysTick_Config>
 80008bc:	4603      	mov	r3, r0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008d6:	e154      	b.n	8000b82 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	2101      	movs	r1, #1
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	fa01 f303 	lsl.w	r3, r1, r3
 80008e4:	4013      	ands	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	f000 8146 	beq.w	8000b7c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f003 0303 	and.w	r3, r3, #3
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d005      	beq.n	8000908 <HAL_GPIO_Init+0x40>
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f003 0303 	and.w	r3, r3, #3
 8000904:	2b02      	cmp	r3, #2
 8000906:	d130      	bne.n	800096a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	2203      	movs	r2, #3
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	43db      	mvns	r3, r3
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4013      	ands	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	68da      	ldr	r2, [r3, #12]
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	4313      	orrs	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800093e:	2201      	movs	r2, #1
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43db      	mvns	r3, r3
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	4013      	ands	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	091b      	lsrs	r3, r3, #4
 8000954:	f003 0201 	and.w	r2, r3, #1
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4313      	orrs	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f003 0303 	and.w	r3, r3, #3
 8000972:	2b03      	cmp	r3, #3
 8000974:	d017      	beq.n	80009a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	2203      	movs	r2, #3
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	4013      	ands	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	689a      	ldr	r2, [r3, #8]
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d123      	bne.n	80009fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	08da      	lsrs	r2, r3, #3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3208      	adds	r2, #8
 80009ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	220f      	movs	r2, #15
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	691a      	ldr	r2, [r3, #16]
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	f003 0307 	and.w	r3, r3, #7
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	08da      	lsrs	r2, r3, #3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3208      	adds	r2, #8
 80009f4:	6939      	ldr	r1, [r7, #16]
 80009f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	2203      	movs	r2, #3
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f003 0203 	and.w	r2, r3, #3
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f000 80a0 	beq.w	8000b7c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3c:	4b58      	ldr	r3, [pc, #352]	; (8000ba0 <HAL_GPIO_Init+0x2d8>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a57      	ldr	r2, [pc, #348]	; (8000ba0 <HAL_GPIO_Init+0x2d8>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b55      	ldr	r3, [pc, #340]	; (8000ba0 <HAL_GPIO_Init+0x2d8>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a54:	4a53      	ldr	r2, [pc, #332]	; (8000ba4 <HAL_GPIO_Init+0x2dc>)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	089b      	lsrs	r3, r3, #2
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f003 0303 	and.w	r3, r3, #3
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	220f      	movs	r2, #15
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a7e:	d019      	beq.n	8000ab4 <HAL_GPIO_Init+0x1ec>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a49      	ldr	r2, [pc, #292]	; (8000ba8 <HAL_GPIO_Init+0x2e0>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d013      	beq.n	8000ab0 <HAL_GPIO_Init+0x1e8>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a48      	ldr	r2, [pc, #288]	; (8000bac <HAL_GPIO_Init+0x2e4>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d00d      	beq.n	8000aac <HAL_GPIO_Init+0x1e4>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a47      	ldr	r2, [pc, #284]	; (8000bb0 <HAL_GPIO_Init+0x2e8>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d007      	beq.n	8000aa8 <HAL_GPIO_Init+0x1e0>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a46      	ldr	r2, [pc, #280]	; (8000bb4 <HAL_GPIO_Init+0x2ec>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d101      	bne.n	8000aa4 <HAL_GPIO_Init+0x1dc>
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	e008      	b.n	8000ab6 <HAL_GPIO_Init+0x1ee>
 8000aa4:	2305      	movs	r3, #5
 8000aa6:	e006      	b.n	8000ab6 <HAL_GPIO_Init+0x1ee>
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	e004      	b.n	8000ab6 <HAL_GPIO_Init+0x1ee>
 8000aac:	2302      	movs	r3, #2
 8000aae:	e002      	b.n	8000ab6 <HAL_GPIO_Init+0x1ee>
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	e000      	b.n	8000ab6 <HAL_GPIO_Init+0x1ee>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	697a      	ldr	r2, [r7, #20]
 8000ab8:	f002 0203 	and.w	r2, r2, #3
 8000abc:	0092      	lsls	r2, r2, #2
 8000abe:	4093      	lsls	r3, r2
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ac6:	4937      	ldr	r1, [pc, #220]	; (8000ba4 <HAL_GPIO_Init+0x2dc>)
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	089b      	lsrs	r3, r3, #2
 8000acc:	3302      	adds	r3, #2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ad4:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000af8:	4a2f      	ldr	r2, [pc, #188]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000afe:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b22:	4a25      	ldr	r2, [pc, #148]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b28:	4b23      	ldr	r3, [pc, #140]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	43db      	mvns	r3, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d003      	beq.n	8000b4c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b4c:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <HAL_GPIO_Init+0x2f0>)
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	fa22 f303 	lsr.w	r3, r2, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f47f aea3 	bne.w	80008d8 <HAL_GPIO_Init+0x10>
  }
}
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	371c      	adds	r7, #28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40010000 	.word	0x40010000
 8000ba8:	48000400 	.word	0x48000400
 8000bac:	48000800 	.word	0x48000800
 8000bb0:	48000c00 	.word	0x48000c00
 8000bb4:	48001000 	.word	0x48001000
 8000bb8:	40010400 	.word	0x40010400

08000bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bcc:	787b      	ldrb	r3, [r7, #1]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bd2:	887a      	ldrh	r2, [r7, #2]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bd8:	e002      	b.n	8000be0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bda:	887a      	ldrh	r2, [r7, #2]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bfe:	887a      	ldrh	r2, [r7, #2]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4013      	ands	r3, r2
 8000c04:	041a      	lsls	r2, r3, #16
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	43d9      	mvns	r1, r3
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	400b      	ands	r3, r1
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	619a      	str	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f001 b823 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f000 817d 	beq.w	8000f56 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c5c:	4bbc      	ldr	r3, [pc, #752]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 030c 	and.w	r3, r3, #12
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	d00c      	beq.n	8000c82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c68:	4bb9      	ldr	r3, [pc, #740]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 030c 	and.w	r3, r3, #12
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	d15c      	bne.n	8000d2e <HAL_RCC_OscConfig+0x10e>
 8000c74:	4bb6      	ldr	r3, [pc, #728]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c80:	d155      	bne.n	8000d2e <HAL_RCC_OscConfig+0x10e>
 8000c82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000c8e:	fa93 f3a3 	rbit	r3, r3
 8000c92:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c9a:	fab3 f383 	clz	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	095b      	lsrs	r3, r3, #5
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d102      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x94>
 8000cae:	4ba8      	ldr	r3, [pc, #672]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	e015      	b.n	8000ce0 <HAL_RCC_OscConfig+0xc0>
 8000cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000cc0:	fa93 f3a3 	rbit	r3, r3
 8000cc4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ccc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000cd0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000cd4:	fa93 f3a3 	rbit	r3, r3
 8000cd8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000cdc:	4b9c      	ldr	r3, [pc, #624]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ce4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000ce8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000cec:	fa92 f2a2 	rbit	r2, r2
 8000cf0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000cf4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	f042 0220 	orr.w	r2, r2, #32
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	f002 021f 	and.w	r2, r2, #31
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0e:	4013      	ands	r3, r2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f000 811f 	beq.w	8000f54 <HAL_RCC_OscConfig+0x334>
 8000d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8116 	bne.w	8000f54 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	f000 bfaf 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d3e:	d106      	bne.n	8000d4e <HAL_RCC_OscConfig+0x12e>
 8000d40:	4b83      	ldr	r3, [pc, #524]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a82      	ldr	r2, [pc, #520]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	e036      	b.n	8000dbc <HAL_RCC_OscConfig+0x19c>
 8000d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10c      	bne.n	8000d78 <HAL_RCC_OscConfig+0x158>
 8000d5e:	4b7c      	ldr	r3, [pc, #496]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a7b      	ldr	r2, [pc, #492]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	4b79      	ldr	r3, [pc, #484]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a78      	ldr	r2, [pc, #480]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	e021      	b.n	8000dbc <HAL_RCC_OscConfig+0x19c>
 8000d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d88:	d10c      	bne.n	8000da4 <HAL_RCC_OscConfig+0x184>
 8000d8a:	4b71      	ldr	r3, [pc, #452]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a70      	ldr	r2, [pc, #448]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	4b6e      	ldr	r3, [pc, #440]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a6d      	ldr	r2, [pc, #436]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e00b      	b.n	8000dbc <HAL_RCC_OscConfig+0x19c>
 8000da4:	4b6a      	ldr	r3, [pc, #424]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a69      	ldr	r2, [pc, #420]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b67      	ldr	r3, [pc, #412]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a66      	ldr	r2, [pc, #408]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000dbc:	4b64      	ldr	r3, [pc, #400]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	f023 020f 	bic.w	r2, r3, #15
 8000dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	495f      	ldr	r1, [pc, #380]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d059      	beq.n	8000e9a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de6:	f7ff fc59 	bl	800069c <HAL_GetTick>
 8000dea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dee:	e00a      	b.n	8000e06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000df0:	f7ff fc54 	bl	800069c <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b64      	cmp	r3, #100	; 0x64
 8000dfe:	d902      	bls.n	8000e06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e00:	2303      	movs	r3, #3
 8000e02:	f000 bf43 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>
 8000e06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e12:	fa93 f3a3 	rbit	r3, r3
 8000e16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1e:	fab3 f383 	clz	r3, r3
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	095b      	lsrs	r3, r3, #5
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d102      	bne.n	8000e38 <HAL_RCC_OscConfig+0x218>
 8000e32:	4b47      	ldr	r3, [pc, #284]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	e015      	b.n	8000e64 <HAL_RCC_OscConfig+0x244>
 8000e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e44:	fa93 f3a3 	rbit	r3, r3
 8000e48:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e50:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000e58:	fa93 f3a3 	rbit	r3, r3
 8000e5c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000e60:	4b3b      	ldr	r3, [pc, #236]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e68:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000e6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e70:	fa92 f2a2 	rbit	r2, r2
 8000e74:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000e78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000e7c:	fab2 f282 	clz	r2, r2
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	f042 0220 	orr.w	r2, r2, #32
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	f002 021f 	and.w	r2, r2, #31
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e92:	4013      	ands	r3, r2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0ab      	beq.n	8000df0 <HAL_RCC_OscConfig+0x1d0>
 8000e98:	e05d      	b.n	8000f56 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9a:	f7ff fbff 	bl	800069c <HAL_GetTick>
 8000e9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea2:	e00a      	b.n	8000eba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea4:	f7ff fbfa 	bl	800069c <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b64      	cmp	r3, #100	; 0x64
 8000eb2:	d902      	bls.n	8000eba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	f000 bee9 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>
 8000eba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ebe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000ec6:	fa93 f3a3 	rbit	r3, r3
 8000eca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000ece:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed2:	fab3 f383 	clz	r3, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	095b      	lsrs	r3, r3, #5
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d102      	bne.n	8000eec <HAL_RCC_OscConfig+0x2cc>
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	e015      	b.n	8000f18 <HAL_RCC_OscConfig+0x2f8>
 8000eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000ef8:	fa93 f3a3 	rbit	r3, r3
 8000efc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f04:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f08:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f0c:	fa93 f3a3 	rbit	r3, r3
 8000f10:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_RCC_OscConfig+0x330>)
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f1c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f20:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f24:	fa92 f2a2 	rbit	r2, r2
 8000f28:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f2c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f30:	fab2 f282 	clz	r2, r2
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	f042 0220 	orr.w	r2, r2, #32
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	f002 021f 	and.w	r2, r2, #31
 8000f40:	2101      	movs	r1, #1
 8000f42:	fa01 f202 	lsl.w	r2, r1, r2
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1ab      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x284>
 8000f4c:	e003      	b.n	8000f56 <HAL_RCC_OscConfig+0x336>
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 817d 	beq.w	8001266 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f6c:	4ba6      	ldr	r3, [pc, #664]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 030c 	and.w	r3, r3, #12
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00b      	beq.n	8000f90 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f78:	4ba3      	ldr	r3, [pc, #652]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d172      	bne.n	800106a <HAL_RCC_OscConfig+0x44a>
 8000f84:	4ba0      	ldr	r3, [pc, #640]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d16c      	bne.n	800106a <HAL_RCC_OscConfig+0x44a>
 8000f90:	2302      	movs	r3, #2
 8000f92:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f96:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000f9a:	fa93 f3a3 	rbit	r3, r3
 8000f9e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000fa2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa6:	fab3 f383 	clz	r3, r3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	095b      	lsrs	r3, r3, #5
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d102      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x3a0>
 8000fba:	4b93      	ldr	r3, [pc, #588]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	e013      	b.n	8000fe8 <HAL_RCC_OscConfig+0x3c8>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000fca:	fa93 f3a3 	rbit	r3, r3
 8000fce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000fd8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000fdc:	fa93 f3a3 	rbit	r3, r3
 8000fe0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000fe4:	4b88      	ldr	r3, [pc, #544]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	2202      	movs	r2, #2
 8000fea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000fee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000ff2:	fa92 f2a2 	rbit	r2, r2
 8000ff6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000ffa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000ffe:	fab2 f282 	clz	r2, r2
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	f042 0220 	orr.w	r2, r2, #32
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	f002 021f 	and.w	r2, r2, #31
 800100e:	2101      	movs	r1, #1
 8001010:	fa01 f202 	lsl.w	r2, r1, r2
 8001014:	4013      	ands	r3, r2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00a      	beq.n	8001030 <HAL_RCC_OscConfig+0x410>
 800101a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800101e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d002      	beq.n	8001030 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	f000 be2e 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001030:	4b75      	ldr	r3, [pc, #468]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800103c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	21f8      	movs	r1, #248	; 0xf8
 8001046:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800104e:	fa91 f1a1 	rbit	r1, r1
 8001052:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001056:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800105a:	fab1 f181 	clz	r1, r1
 800105e:	b2c9      	uxtb	r1, r1
 8001060:	408b      	lsls	r3, r1
 8001062:	4969      	ldr	r1, [pc, #420]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8001064:	4313      	orrs	r3, r2
 8001066:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001068:	e0fd      	b.n	8001266 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800106a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800106e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 8088 	beq.w	800118c <HAL_RCC_OscConfig+0x56c>
 800107c:	2301      	movs	r3, #1
 800107e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001082:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001086:	fa93 f3a3 	rbit	r3, r3
 800108a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800108e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001092:	fab3 f383 	clz	r3, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800109c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	461a      	mov	r2, r3
 80010a4:	2301      	movs	r3, #1
 80010a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff faf8 	bl	800069c <HAL_GetTick>
 80010ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b0:	e00a      	b.n	80010c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b2:	f7ff faf3 	bl	800069c <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d902      	bls.n	80010c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	f000 bde2 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>
 80010c8:	2302      	movs	r3, #2
 80010ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80010d2:	fa93 f3a3 	rbit	r3, r3
 80010d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80010da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010de:	fab3 f383 	clz	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	095b      	lsrs	r3, r3, #5
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d102      	bne.n	80010f8 <HAL_RCC_OscConfig+0x4d8>
 80010f2:	4b45      	ldr	r3, [pc, #276]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	e013      	b.n	8001120 <HAL_RCC_OscConfig+0x500>
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001102:	fa93 f3a3 	rbit	r3, r3
 8001106:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001110:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800111c:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	2202      	movs	r2, #2
 8001122:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001126:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800112a:	fa92 f2a2 	rbit	r2, r2
 800112e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001132:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001136:	fab2 f282 	clz	r2, r2
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	f042 0220 	orr.w	r2, r2, #32
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	f002 021f 	and.w	r2, r2, #31
 8001146:	2101      	movs	r1, #1
 8001148:	fa01 f202 	lsl.w	r2, r1, r2
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0af      	beq.n	80010b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001152:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800115a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	21f8      	movs	r1, #248	; 0xf8
 8001168:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001170:	fa91 f1a1 	rbit	r1, r1
 8001174:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001178:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800117c:	fab1 f181 	clz	r1, r1
 8001180:	b2c9      	uxtb	r1, r1
 8001182:	408b      	lsls	r3, r1
 8001184:	4920      	ldr	r1, [pc, #128]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8001186:	4313      	orrs	r3, r2
 8001188:	600b      	str	r3, [r1, #0]
 800118a:	e06c      	b.n	8001266 <HAL_RCC_OscConfig+0x646>
 800118c:	2301      	movs	r3, #1
 800118e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001192:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001196:	fa93 f3a3 	rbit	r3, r3
 800119a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800119e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a2:	fab3 f383 	clz	r3, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	461a      	mov	r2, r3
 80011b4:	2300      	movs	r3, #0
 80011b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fa70 	bl	800069c <HAL_GetTick>
 80011bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c0:	e00a      	b.n	80011d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c2:	f7ff fa6b 	bl	800069c <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d902      	bls.n	80011d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	f000 bd5a 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80011ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ee:	fab3 f383 	clz	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	095b      	lsrs	r3, r3, #5
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d104      	bne.n	800120c <HAL_RCC_OscConfig+0x5ec>
 8001202:	4b01      	ldr	r3, [pc, #4]	; (8001208 <HAL_RCC_OscConfig+0x5e8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	e015      	b.n	8001234 <HAL_RCC_OscConfig+0x614>
 8001208:	40021000 	.word	0x40021000
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001212:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001216:	fa93 f3a3 	rbit	r3, r3
 800121a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001224:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001228:	fa93 f3a3 	rbit	r3, r3
 800122c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001230:	4bc8      	ldr	r3, [pc, #800]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	2202      	movs	r2, #2
 8001236:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800123a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800123e:	fa92 f2a2 	rbit	r2, r2
 8001242:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001246:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800124a:	fab2 f282 	clz	r2, r2
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	f042 0220 	orr.w	r2, r2, #32
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	f002 021f 	and.w	r2, r2, #31
 800125a:	2101      	movs	r1, #1
 800125c:	fa01 f202 	lsl.w	r2, r1, r2
 8001260:	4013      	ands	r3, r2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1ad      	bne.n	80011c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800126a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8110 	beq.w	800149c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800127c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001280:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d079      	beq.n	8001380 <HAL_RCC_OscConfig+0x760>
 800128c:	2301      	movs	r3, #1
 800128e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800129e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a2:	fab3 f383 	clz	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	4bab      	ldr	r3, [pc, #684]	; (8001558 <HAL_RCC_OscConfig+0x938>)
 80012ac:	4413      	add	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	461a      	mov	r2, r3
 80012b2:	2301      	movs	r3, #1
 80012b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff f9f1 	bl	800069c <HAL_GetTick>
 80012ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012be:	e00a      	b.n	80012d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c0:	f7ff f9ec 	bl	800069c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d902      	bls.n	80012d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	f000 bcdb 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>
 80012d6:	2302      	movs	r3, #2
 80012d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80012e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80012f0:	2202      	movs	r2, #2
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	fa93 f2a3 	rbit	r2, r3
 8001302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001306:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001314:	2202      	movs	r2, #2
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	fa93 f2a3 	rbit	r2, r3
 8001326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800132a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800132e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001330:	4b88      	ldr	r3, [pc, #544]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 8001332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001338:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800133c:	2102      	movs	r1, #2
 800133e:	6019      	str	r1, [r3, #0]
 8001340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001344:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	fa93 f1a3 	rbit	r1, r3
 800134e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001352:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001356:	6019      	str	r1, [r3, #0]
  return result;
 8001358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800135c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	fab3 f383 	clz	r3, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f003 031f 	and.w	r3, r3, #31
 8001372:	2101      	movs	r1, #1
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0a0      	beq.n	80012c0 <HAL_RCC_OscConfig+0x6a0>
 800137e:	e08d      	b.n	800149c <HAL_RCC_OscConfig+0x87c>
 8001380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001384:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001390:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	fa93 f2a3 	rbit	r2, r3
 800139a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013a2:	601a      	str	r2, [r3, #0]
  return result;
 80013a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ae:	fab3 f383 	clz	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b68      	ldr	r3, [pc, #416]	; (8001558 <HAL_RCC_OscConfig+0x938>)
 80013b8:	4413      	add	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	461a      	mov	r2, r3
 80013be:	2300      	movs	r3, #0
 80013c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff f96b 	bl	800069c <HAL_GetTick>
 80013c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013cc:	f7ff f966 	bl	800069c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d902      	bls.n	80013e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	f000 bc55 	b.w	8001c8c <HAL_RCC_OscConfig+0x106c>
 80013e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80013ea:	2202      	movs	r2, #2
 80013ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	fa93 f2a3 	rbit	r2, r3
 80013fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001400:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800140e:	2202      	movs	r2, #2
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001416:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	fa93 f2a3 	rbit	r2, r3
 8001420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001424:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001432:	2202      	movs	r2, #2
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	fa93 f2a3 	rbit	r2, r3
 8001444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001448:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800144c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 8001450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001456:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800145a:	2102      	movs	r1, #2
 800145c:	6019      	str	r1, [r3, #0]
 800145e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001462:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	fa93 f1a3 	rbit	r1, r3
 800146c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001470:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001474:	6019      	str	r1, [r3, #0]
  return result;
 8001476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	fab3 f383 	clz	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800148a:	b2db      	uxtb	r3, r3
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	2101      	movs	r1, #1
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d197      	bne.n	80013cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 81a1 	beq.w	80017f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d116      	bne.n	80014f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	4b23      	ldr	r3, [pc, #140]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	4a22      	ldr	r2, [pc, #136]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 80014ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ce:	61d3      	str	r3, [r2, #28]
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80014d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80014ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014ec:	2301      	movs	r3, #1
 80014ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <HAL_RCC_OscConfig+0x93c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d11a      	bne.n	8001534 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_RCC_OscConfig+0x93c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a16      	ldr	r2, [pc, #88]	; (800155c <HAL_RCC_OscConfig+0x93c>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800150a:	f7ff f8c7 	bl	800069c <HAL_GetTick>
 800150e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001512:	e009      	b.n	8001528 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001514:	f7ff f8c2 	bl	800069c <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b64      	cmp	r3, #100	; 0x64
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e3b1      	b.n	8001c8c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <HAL_RCC_OscConfig+0x93c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0ef      	beq.n	8001514 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001538:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d10d      	bne.n	8001560 <HAL_RCC_OscConfig+0x940>
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4a02      	ldr	r2, [pc, #8]	; (8001554 <HAL_RCC_OscConfig+0x934>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6213      	str	r3, [r2, #32]
 8001550:	e03c      	b.n	80015cc <HAL_RCC_OscConfig+0x9ac>
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	10908120 	.word	0x10908120
 800155c:	40007000 	.word	0x40007000
 8001560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001564:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10c      	bne.n	800158a <HAL_RCC_OscConfig+0x96a>
 8001570:	4bc1      	ldr	r3, [pc, #772]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4ac0      	ldr	r2, [pc, #768]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 8001576:	f023 0301 	bic.w	r3, r3, #1
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	4bbe      	ldr	r3, [pc, #760]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	4abd      	ldr	r2, [pc, #756]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 8001582:	f023 0304 	bic.w	r3, r3, #4
 8001586:	6213      	str	r3, [r2, #32]
 8001588:	e020      	b.n	80015cc <HAL_RCC_OscConfig+0x9ac>
 800158a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x994>
 800159a:	4bb7      	ldr	r3, [pc, #732]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4ab6      	ldr	r2, [pc, #728]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6213      	str	r3, [r2, #32]
 80015a6:	4bb4      	ldr	r3, [pc, #720]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4ab3      	ldr	r2, [pc, #716]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6213      	str	r3, [r2, #32]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0x9ac>
 80015b4:	4bb0      	ldr	r3, [pc, #704]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4aaf      	ldr	r2, [pc, #700]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6213      	str	r3, [r2, #32]
 80015c0:	4bad      	ldr	r3, [pc, #692]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4aac      	ldr	r2, [pc, #688]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80015c6:	f023 0304 	bic.w	r3, r3, #4
 80015ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 8081 	beq.w	80016e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff f85d 	bl	800069c <HAL_GetTick>
 80015e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e6:	e00b      	b.n	8001600 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff f858 	bl	800069c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e345      	b.n	8001c8c <HAL_RCC_OscConfig+0x106c>
 8001600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001604:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001608:	2202      	movs	r2, #2
 800160a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001610:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	fa93 f2a3 	rbit	r2, r3
 800161a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001628:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800162c:	2202      	movs	r2, #2
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001634:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	fa93 f2a3 	rbit	r2, r3
 800163e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001642:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001646:	601a      	str	r2, [r3, #0]
  return result;
 8001648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001650:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	095b      	lsrs	r3, r3, #5
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d102      	bne.n	800166c <HAL_RCC_OscConfig+0xa4c>
 8001666:	4b84      	ldr	r3, [pc, #528]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	e013      	b.n	8001694 <HAL_RCC_OscConfig+0xa74>
 800166c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001670:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001674:	2202      	movs	r2, #2
 8001676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	fa93 f2a3 	rbit	r2, r3
 8001686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	4b79      	ldr	r3, [pc, #484]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001698:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800169c:	2102      	movs	r1, #2
 800169e:	6011      	str	r1, [r2, #0]
 80016a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	fa92 f1a2 	rbit	r1, r2
 80016ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80016b6:	6011      	str	r1, [r2, #0]
  return result;
 80016b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016bc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	fab2 f282 	clz	r2, r2
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	f002 021f 	and.w	r2, r2, #31
 80016d2:	2101      	movs	r1, #1
 80016d4:	fa01 f202 	lsl.w	r2, r1, r2
 80016d8:	4013      	ands	r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d084      	beq.n	80015e8 <HAL_RCC_OscConfig+0x9c8>
 80016de:	e07f      	b.n	80017e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e0:	f7fe ffdc 	bl	800069c <HAL_GetTick>
 80016e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e8:	e00b      	b.n	8001702 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ea:	f7fe ffd7 	bl	800069c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e2c4      	b.n	8001c8c <HAL_RCC_OscConfig+0x106c>
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800170a:	2202      	movs	r2, #2
 800170c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001712:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	fa93 f2a3 	rbit	r2, r3
 800171c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001720:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800172e:	2202      	movs	r2, #2
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001736:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	fa93 f2a3 	rbit	r2, r3
 8001740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001744:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001748:	601a      	str	r2, [r3, #0]
  return result;
 800174a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001752:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001754:	fab3 f383 	clz	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d102      	bne.n	800176e <HAL_RCC_OscConfig+0xb4e>
 8001768:	4b43      	ldr	r3, [pc, #268]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	e013      	b.n	8001796 <HAL_RCC_OscConfig+0xb76>
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001776:	2202      	movs	r2, #2
 8001778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	fa93 f2a3 	rbit	r2, r3
 8001788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	4b39      	ldr	r3, [pc, #228]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800179a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800179e:	2102      	movs	r1, #2
 80017a0:	6011      	str	r1, [r2, #0]
 80017a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	fa92 f1a2 	rbit	r1, r2
 80017b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80017b8:	6011      	str	r1, [r2, #0]
  return result;
 80017ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017be:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	fab2 f282 	clz	r2, r2
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	f002 021f 	and.w	r2, r2, #31
 80017d4:	2101      	movs	r1, #1
 80017d6:	fa01 f202 	lsl.w	r2, r1, r2
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d184      	bne.n	80016ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e8:	4b23      	ldr	r3, [pc, #140]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	4a22      	ldr	r2, [pc, #136]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 80017ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 8242 	beq.w	8001c8a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_RCC_OscConfig+0xc58>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b08      	cmp	r3, #8
 8001810:	f000 8213 	beq.w	8001c3a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001818:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	2b02      	cmp	r3, #2
 8001822:	f040 8162 	bne.w	8001aea <HAL_RCC_OscConfig+0xeca>
 8001826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800182e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001832:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001838:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	fa93 f2a3 	rbit	r2, r3
 8001842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001846:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800184a:	601a      	str	r2, [r3, #0]
  return result;
 800184c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001850:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001854:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001860:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	461a      	mov	r2, r3
 8001868:	2300      	movs	r3, #0
 800186a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7fe ff16 	bl	800069c <HAL_GetTick>
 8001870:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001874:	e00c      	b.n	8001890 <HAL_RCC_OscConfig+0xc70>
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187c:	f7fe ff0e 	bl	800069c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e1fd      	b.n	8001c8c <HAL_RCC_OscConfig+0x106c>
 8001890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001894:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001898:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800189c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	fa93 f2a3 	rbit	r2, r3
 80018ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018b4:	601a      	str	r2, [r3, #0]
  return result;
 80018b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80018be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c0:	fab3 f383 	clz	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d102      	bne.n	80018da <HAL_RCC_OscConfig+0xcba>
 80018d4:	4bb0      	ldr	r3, [pc, #704]	; (8001b98 <HAL_RCC_OscConfig+0xf78>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	e027      	b.n	800192a <HAL_RCC_OscConfig+0xd0a>
 80018da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80018e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001904:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001908:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001912:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	fa93 f2a3 	rbit	r2, r3
 800191c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001920:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	4b9c      	ldr	r3, [pc, #624]	; (8001b98 <HAL_RCC_OscConfig+0xf78>)
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800192e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001932:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001936:	6011      	str	r1, [r2, #0]
 8001938:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800193c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	fa92 f1a2 	rbit	r1, r2
 8001946:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800194a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800194e:	6011      	str	r1, [r2, #0]
  return result;
 8001950:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001954:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	fab2 f282 	clz	r2, r2
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	f042 0220 	orr.w	r2, r2, #32
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	f002 021f 	and.w	r2, r2, #31
 800196a:	2101      	movs	r1, #1
 800196c:	fa01 f202 	lsl.w	r2, r1, r2
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d182      	bne.n	800187c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001976:	4b88      	ldr	r3, [pc, #544]	; (8001b98 <HAL_RCC_OscConfig+0xf78>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800198a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	430b      	orrs	r3, r1
 8001998:	497f      	ldr	r1, [pc, #508]	; (8001b98 <HAL_RCC_OscConfig+0xf78>)
 800199a:	4313      	orrs	r3, r2
 800199c:	604b      	str	r3, [r1, #4]
 800199e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	fa93 f2a3 	rbit	r2, r3
 80019ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80019c2:	601a      	str	r2, [r3, #0]
  return result;
 80019c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80019cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	461a      	mov	r2, r3
 80019e0:	2301      	movs	r3, #1
 80019e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7fe fe5a 	bl	800069c <HAL_GetTick>
 80019e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ec:	e009      	b.n	8001a02 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ee:	f7fe fe55 	bl	800069c <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e144      	b.n	8001c8c <HAL_RCC_OscConfig+0x106c>
 8001a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a06:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a14:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	fa93 f2a3 	rbit	r2, r3
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a26:	601a      	str	r2, [r3, #0]
  return result;
 8001a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	095b      	lsrs	r3, r3, #5
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d102      	bne.n	8001a4c <HAL_RCC_OscConfig+0xe2c>
 8001a46:	4b54      	ldr	r3, [pc, #336]	; (8001b98 <HAL_RCC_OscConfig+0xf78>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	e027      	b.n	8001a9c <HAL_RCC_OscConfig+0xe7c>
 8001a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a50:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001a54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	fa93 f2a3 	rbit	r2, r3
 8001a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a76:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001a7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a84:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	fa93 f2a3 	rbit	r2, r3
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <HAL_RCC_OscConfig+0xf78>)
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aa0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001aa4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001aa8:	6011      	str	r1, [r2, #0]
 8001aaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	fa92 f1a2 	rbit	r1, r2
 8001ab8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001abc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ac0:	6011      	str	r1, [r2, #0]
  return result;
 8001ac2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ac6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	fab2 f282 	clz	r2, r2
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	f042 0220 	orr.w	r2, r2, #32
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	f002 021f 	and.w	r2, r2, #31
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d082      	beq.n	80019ee <HAL_RCC_OscConfig+0xdce>
 8001ae8:	e0cf      	b.n	8001c8a <HAL_RCC_OscConfig+0x106a>
 8001aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001af2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	fa93 f2a3 	rbit	r2, r3
 8001b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b0e:	601a      	str	r2, [r3, #0]
  return result;
 8001b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b14:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1a:	fab3 f383 	clz	r3, r3
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7fe fdb4 	bl	800069c <HAL_GetTick>
 8001b34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b38:	e009      	b.n	8001b4e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7fe fdaf 	bl	800069c <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e09e      	b.n	8001c8c <HAL_RCC_OscConfig+0x106c>
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b60:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	fa93 f2a3 	rbit	r2, r3
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b72:	601a      	str	r2, [r3, #0]
  return result;
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	095b      	lsrs	r3, r3, #5
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d104      	bne.n	8001b9c <HAL_RCC_OscConfig+0xf7c>
 8001b92:	4b01      	ldr	r3, [pc, #4]	; (8001b98 <HAL_RCC_OscConfig+0xf78>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	e029      	b.n	8001bec <HAL_RCC_OscConfig+0xfcc>
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ba4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa93 f2a3 	rbit	r2, r3
 8001bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001bca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_RCC_OscConfig+0x1078>)
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bf0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001bf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bf8:	6011      	str	r1, [r2, #0]
 8001bfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bfe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	fa92 f1a2 	rbit	r1, r2
 8001c08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c0c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c10:	6011      	str	r1, [r2, #0]
  return result;
 8001c12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c16:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	fab2 f282 	clz	r2, r2
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	f042 0220 	orr.w	r2, r2, #32
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	f002 021f 	and.w	r2, r2, #31
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d180      	bne.n	8001b3a <HAL_RCC_OscConfig+0xf1a>
 8001c38:	e027      	b.n	8001c8a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e01e      	b.n	8001c8c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c4e:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_RCC_OscConfig+0x1078>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c5a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d10b      	bne.n	8001c86 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000

08001c9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b09e      	sub	sp, #120	; 0x78
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e162      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b90      	ldr	r3, [pc, #576]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d910      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b8d      	ldr	r3, [pc, #564]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 0207 	bic.w	r2, r3, #7
 8001cca:	498b      	ldr	r1, [pc, #556]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b89      	ldr	r3, [pc, #548]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e14a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b82      	ldr	r3, [pc, #520]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	497f      	ldr	r1, [pc, #508]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 80dc 	beq.w	8001ec8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d13c      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xf6>
 8001d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d28:	fab3 f383 	clz	r3, r3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xa6>
 8001d3c:	4b6f      	ldr	r3, [pc, #444]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	e00f      	b.n	8001d62 <HAL_RCC_ClockConfig+0xc6>
 8001d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	667b      	str	r3, [r7, #100]	; 0x64
 8001d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d54:	663b      	str	r3, [r7, #96]	; 0x60
 8001d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d5e:	4b67      	ldr	r3, [pc, #412]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d66:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d6a:	fa92 f2a2 	rbit	r2, r2
 8001d6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d72:	fab2 f282 	clz	r2, r2
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	f042 0220 	orr.w	r2, r2, #32
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f002 021f 	and.w	r2, r2, #31
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f202 	lsl.w	r2, r1, r2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d17b      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0f3      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d13c      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x178>
 8001d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	095b      	lsrs	r3, r3, #5
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d102      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x128>
 8001dbe:	4b4f      	ldr	r3, [pc, #316]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	e00f      	b.n	8001de4 <HAL_RCC_ClockConfig+0x148>
 8001dc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8001dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8001dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de0:	4b46      	ldr	r3, [pc, #280]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dec:	fa92 f2a2 	rbit	r2, r2
 8001df0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001df2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001df4:	fab2 f282 	clz	r2, r2
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	f042 0220 	orr.w	r2, r2, #32
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	f002 021f 	and.w	r2, r2, #31
 8001e04:	2101      	movs	r1, #1
 8001e06:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d13a      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0b2      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
 8001e14:	2302      	movs	r3, #2
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d102      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x1a0>
 8001e36:	4b31      	ldr	r3, [pc, #196]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e00d      	b.n	8001e58 <HAL_RCC_ClockConfig+0x1bc>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
 8001e48:	2302      	movs	r3, #2
 8001e4a:	623b      	str	r3, [r7, #32]
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	2202      	movs	r2, #2
 8001e5a:	61ba      	str	r2, [r7, #24]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	fa92 f2a2 	rbit	r2, r2
 8001e62:	617a      	str	r2, [r7, #20]
  return result;
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	fab2 f282 	clz	r2, r2
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	f042 0220 	orr.w	r2, r2, #32
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f002 021f 	and.w	r2, r2, #31
 8001e76:	2101      	movs	r1, #1
 8001e78:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e079      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f023 0203 	bic.w	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	491a      	ldr	r1, [pc, #104]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e98:	f7fe fc00 	bl	800069c <HAL_GetTick>
 8001e9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea0:	f7fe fbfc 	bl	800069c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e061      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_RCC_ClockConfig+0x260>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 020c 	and.w	r2, r3, #12
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d1eb      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d214      	bcs.n	8001f00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 0207 	bic.w	r2, r3, #7
 8001ede:	4906      	ldr	r1, [pc, #24]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <HAL_RCC_ClockConfig+0x25c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e040      	b.n	8001f7a <HAL_RCC_ClockConfig+0x2de>
 8001ef8:	40022000 	.word	0x40022000
 8001efc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_RCC_ClockConfig+0x2e8>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	491a      	ldr	r1, [pc, #104]	; (8001f84 <HAL_RCC_ClockConfig+0x2e8>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_RCC_ClockConfig+0x2e8>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4912      	ldr	r1, [pc, #72]	; (8001f84 <HAL_RCC_ClockConfig+0x2e8>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f3e:	f000 f829 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8001f42:	4601      	mov	r1, r0
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_RCC_ClockConfig+0x2e8>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f4c:	22f0      	movs	r2, #240	; 0xf0
 8001f4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	fa92 f2a2 	rbit	r2, r2
 8001f56:	60fa      	str	r2, [r7, #12]
  return result;
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	fab2 f282 	clz	r2, r2
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	40d3      	lsrs	r3, r2
 8001f62:	4a09      	ldr	r2, [pc, #36]	; (8001f88 <HAL_RCC_ClockConfig+0x2ec>)
 8001f64:	5cd3      	ldrb	r3, [r2, r3]
 8001f66:	fa21 f303 	lsr.w	r3, r1, r3
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <HAL_RCC_ClockConfig+0x2f0>)
 8001f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_RCC_ClockConfig+0x2f4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fb4e 	bl	8000614 <HAL_InitTick>
  
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3778      	adds	r7, #120	; 0x78
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	0800266c 	.word	0x0800266c
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000004 	.word	0x20000004

08001f94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b08b      	sub	sp, #44	; 0x2c
 8001f98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001fae:	4b29      	ldr	r3, [pc, #164]	; (8002054 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d002      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x30>
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d003      	beq.n	8001fca <HAL_RCC_GetSysClockFreq+0x36>
 8001fc2:	e03c      	b.n	800203e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fc4:	4b24      	ldr	r3, [pc, #144]	; (8002058 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fc6:	623b      	str	r3, [r7, #32]
      break;
 8001fc8:	e03c      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001fd0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001fd4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	fa92 f2a2 	rbit	r2, r2
 8001fdc:	607a      	str	r2, [r7, #4]
  return result;
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	fab2 f282 	clz	r2, r2
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	40d3      	lsrs	r3, r2
 8001fe8:	4a1c      	ldr	r2, [pc, #112]	; (800205c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001fee:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	fa92 f2a2 	rbit	r2, r2
 8002000:	60fa      	str	r2, [r7, #12]
  return result;
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	fab2 f282 	clz	r2, r2
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	40d3      	lsrs	r3, r2
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <HAL_RCC_GetSysClockFreq+0xcc>)
 800200e:	5cd3      	ldrb	r3, [r2, r3]
 8002010:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800201c:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <HAL_RCC_GetSysClockFreq+0xc4>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	fbb2 f2f3 	udiv	r2, r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
 800202c:	e004      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	4a0c      	ldr	r2, [pc, #48]	; (8002064 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	623b      	str	r3, [r7, #32]
      break;
 800203c:	e002      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002040:	623b      	str	r3, [r7, #32]
      break;
 8002042:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002044:	6a3b      	ldr	r3, [r7, #32]
}
 8002046:	4618      	mov	r0, r3
 8002048:	372c      	adds	r7, #44	; 0x2c
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	007a1200 	.word	0x007a1200
 800205c:	0800267c 	.word	0x0800267c
 8002060:	0800268c 	.word	0x0800268c
 8002064:	003d0900 	.word	0x003d0900

08002068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e049      	b.n	800210e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fa26 	bl	80004e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3304      	adds	r3, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f000 f8fe 	bl	80022a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_TIM_ConfigClockSource+0x1c>
 800212e:	2302      	movs	r3, #2
 8002130:	e0b6      	b.n	80022a0 <HAL_TIM_ConfigClockSource+0x18a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002150:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002154:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800215c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800216e:	d03e      	beq.n	80021ee <HAL_TIM_ConfigClockSource+0xd8>
 8002170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002174:	f200 8087 	bhi.w	8002286 <HAL_TIM_ConfigClockSource+0x170>
 8002178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217c:	f000 8086 	beq.w	800228c <HAL_TIM_ConfigClockSource+0x176>
 8002180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002184:	d87f      	bhi.n	8002286 <HAL_TIM_ConfigClockSource+0x170>
 8002186:	2b70      	cmp	r3, #112	; 0x70
 8002188:	d01a      	beq.n	80021c0 <HAL_TIM_ConfigClockSource+0xaa>
 800218a:	2b70      	cmp	r3, #112	; 0x70
 800218c:	d87b      	bhi.n	8002286 <HAL_TIM_ConfigClockSource+0x170>
 800218e:	2b60      	cmp	r3, #96	; 0x60
 8002190:	d050      	beq.n	8002234 <HAL_TIM_ConfigClockSource+0x11e>
 8002192:	2b60      	cmp	r3, #96	; 0x60
 8002194:	d877      	bhi.n	8002286 <HAL_TIM_ConfigClockSource+0x170>
 8002196:	2b50      	cmp	r3, #80	; 0x50
 8002198:	d03c      	beq.n	8002214 <HAL_TIM_ConfigClockSource+0xfe>
 800219a:	2b50      	cmp	r3, #80	; 0x50
 800219c:	d873      	bhi.n	8002286 <HAL_TIM_ConfigClockSource+0x170>
 800219e:	2b40      	cmp	r3, #64	; 0x40
 80021a0:	d058      	beq.n	8002254 <HAL_TIM_ConfigClockSource+0x13e>
 80021a2:	2b40      	cmp	r3, #64	; 0x40
 80021a4:	d86f      	bhi.n	8002286 <HAL_TIM_ConfigClockSource+0x170>
 80021a6:	2b30      	cmp	r3, #48	; 0x30
 80021a8:	d064      	beq.n	8002274 <HAL_TIM_ConfigClockSource+0x15e>
 80021aa:	2b30      	cmp	r3, #48	; 0x30
 80021ac:	d86b      	bhi.n	8002286 <HAL_TIM_ConfigClockSource+0x170>
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d060      	beq.n	8002274 <HAL_TIM_ConfigClockSource+0x15e>
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	d867      	bhi.n	8002286 <HAL_TIM_ConfigClockSource+0x170>
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d05c      	beq.n	8002274 <HAL_TIM_ConfigClockSource+0x15e>
 80021ba:	2b10      	cmp	r3, #16
 80021bc:	d05a      	beq.n	8002274 <HAL_TIM_ConfigClockSource+0x15e>
 80021be:	e062      	b.n	8002286 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	6899      	ldr	r1, [r3, #8]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f000 f974 	bl	80024bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	609a      	str	r2, [r3, #8]
      break;
 80021ec:	e04f      	b.n	800228e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	6899      	ldr	r1, [r3, #8]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f000 f95d 	bl	80024bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002210:	609a      	str	r2, [r3, #8]
      break;
 8002212:	e03c      	b.n	800228e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	461a      	mov	r2, r3
 8002222:	f000 f8d1 	bl	80023c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2150      	movs	r1, #80	; 0x50
 800222c:	4618      	mov	r0, r3
 800222e:	f000 f92a 	bl	8002486 <TIM_ITRx_SetConfig>
      break;
 8002232:	e02c      	b.n	800228e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	461a      	mov	r2, r3
 8002242:	f000 f8f0 	bl	8002426 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2160      	movs	r1, #96	; 0x60
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f91a 	bl	8002486 <TIM_ITRx_SetConfig>
      break;
 8002252:	e01c      	b.n	800228e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	461a      	mov	r2, r3
 8002262:	f000 f8b1 	bl	80023c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2140      	movs	r1, #64	; 0x40
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f90a 	bl	8002486 <TIM_ITRx_SetConfig>
      break;
 8002272:	e00c      	b.n	800228e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f000 f901 	bl	8002486 <TIM_ITRx_SetConfig>
      break;
 8002284:	e003      	b.n	800228e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
      break;
 800228a:	e000      	b.n	800228e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800228c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800229e:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a3c      	ldr	r2, [pc, #240]	; (80023ac <TIM_Base_SetConfig+0x104>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d00f      	beq.n	80022e0 <TIM_Base_SetConfig+0x38>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c6:	d00b      	beq.n	80022e0 <TIM_Base_SetConfig+0x38>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a39      	ldr	r2, [pc, #228]	; (80023b0 <TIM_Base_SetConfig+0x108>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d007      	beq.n	80022e0 <TIM_Base_SetConfig+0x38>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a38      	ldr	r2, [pc, #224]	; (80023b4 <TIM_Base_SetConfig+0x10c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d003      	beq.n	80022e0 <TIM_Base_SetConfig+0x38>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a37      	ldr	r2, [pc, #220]	; (80023b8 <TIM_Base_SetConfig+0x110>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d108      	bne.n	80022f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a2d      	ldr	r2, [pc, #180]	; (80023ac <TIM_Base_SetConfig+0x104>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d01b      	beq.n	8002332 <TIM_Base_SetConfig+0x8a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002300:	d017      	beq.n	8002332 <TIM_Base_SetConfig+0x8a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a2a      	ldr	r2, [pc, #168]	; (80023b0 <TIM_Base_SetConfig+0x108>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <TIM_Base_SetConfig+0x8a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a29      	ldr	r2, [pc, #164]	; (80023b4 <TIM_Base_SetConfig+0x10c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00f      	beq.n	8002332 <TIM_Base_SetConfig+0x8a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a28      	ldr	r2, [pc, #160]	; (80023b8 <TIM_Base_SetConfig+0x110>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d00b      	beq.n	8002332 <TIM_Base_SetConfig+0x8a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a27      	ldr	r2, [pc, #156]	; (80023bc <TIM_Base_SetConfig+0x114>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d007      	beq.n	8002332 <TIM_Base_SetConfig+0x8a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a26      	ldr	r2, [pc, #152]	; (80023c0 <TIM_Base_SetConfig+0x118>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d003      	beq.n	8002332 <TIM_Base_SetConfig+0x8a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a25      	ldr	r2, [pc, #148]	; (80023c4 <TIM_Base_SetConfig+0x11c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d108      	bne.n	8002344 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a10      	ldr	r2, [pc, #64]	; (80023ac <TIM_Base_SetConfig+0x104>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d00f      	beq.n	8002390 <TIM_Base_SetConfig+0xe8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a11      	ldr	r2, [pc, #68]	; (80023b8 <TIM_Base_SetConfig+0x110>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00b      	beq.n	8002390 <TIM_Base_SetConfig+0xe8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a10      	ldr	r2, [pc, #64]	; (80023bc <TIM_Base_SetConfig+0x114>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d007      	beq.n	8002390 <TIM_Base_SetConfig+0xe8>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a0f      	ldr	r2, [pc, #60]	; (80023c0 <TIM_Base_SetConfig+0x118>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d003      	beq.n	8002390 <TIM_Base_SetConfig+0xe8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <TIM_Base_SetConfig+0x11c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d103      	bne.n	8002398 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	615a      	str	r2, [r3, #20]
}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40012c00 	.word	0x40012c00
 80023b0:	40000400 	.word	0x40000400
 80023b4:	40000800 	.word	0x40000800
 80023b8:	40013400 	.word	0x40013400
 80023bc:	40014000 	.word	0x40014000
 80023c0:	40014400 	.word	0x40014400
 80023c4:	40014800 	.word	0x40014800

080023c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	f023 0201 	bic.w	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f023 030a 	bic.w	r3, r3, #10
 8002404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	621a      	str	r2, [r3, #32]
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002426:	b480      	push	{r7}
 8002428:	b087      	sub	sp, #28
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f023 0210 	bic.w	r2, r3, #16
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	031b      	lsls	r3, r3, #12
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	621a      	str	r2, [r3, #32]
}
 800247a:	bf00      	nop
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002486:	b480      	push	{r7}
 8002488:	b085      	sub	sp, #20
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f043 0307 	orr.w	r3, r3, #7
 80024a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	609a      	str	r2, [r3, #8]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	021a      	lsls	r2, r3, #8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	431a      	orrs	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	609a      	str	r2, [r3, #8]
}
 80024f0:	bf00      	nop
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002510:	2302      	movs	r3, #2
 8002512:	e063      	b.n	80025dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a2b      	ldr	r2, [pc, #172]	; (80025e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a2a      	ldr	r2, [pc, #168]	; (80025ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d108      	bne.n	800255a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800254e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002560:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d018      	beq.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002586:	d013      	beq.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a18      	ldr	r2, [pc, #96]	; (80025f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00e      	beq.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d009      	beq.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a12      	ldr	r2, [pc, #72]	; (80025ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d004      	beq.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d10c      	bne.n	80025ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	40012c00 	.word	0x40012c00
 80025ec:	40013400 	.word	0x40013400
 80025f0:	40000400 	.word	0x40000400
 80025f4:	40000800 	.word	0x40000800
 80025f8:	40014000 	.word	0x40014000

080025fc <__libc_init_array>:
 80025fc:	b570      	push	{r4, r5, r6, lr}
 80025fe:	4d0d      	ldr	r5, [pc, #52]	; (8002634 <__libc_init_array+0x38>)
 8002600:	4c0d      	ldr	r4, [pc, #52]	; (8002638 <__libc_init_array+0x3c>)
 8002602:	1b64      	subs	r4, r4, r5
 8002604:	10a4      	asrs	r4, r4, #2
 8002606:	2600      	movs	r6, #0
 8002608:	42a6      	cmp	r6, r4
 800260a:	d109      	bne.n	8002620 <__libc_init_array+0x24>
 800260c:	4d0b      	ldr	r5, [pc, #44]	; (800263c <__libc_init_array+0x40>)
 800260e:	4c0c      	ldr	r4, [pc, #48]	; (8002640 <__libc_init_array+0x44>)
 8002610:	f000 f820 	bl	8002654 <_init>
 8002614:	1b64      	subs	r4, r4, r5
 8002616:	10a4      	asrs	r4, r4, #2
 8002618:	2600      	movs	r6, #0
 800261a:	42a6      	cmp	r6, r4
 800261c:	d105      	bne.n	800262a <__libc_init_array+0x2e>
 800261e:	bd70      	pop	{r4, r5, r6, pc}
 8002620:	f855 3b04 	ldr.w	r3, [r5], #4
 8002624:	4798      	blx	r3
 8002626:	3601      	adds	r6, #1
 8002628:	e7ee      	b.n	8002608 <__libc_init_array+0xc>
 800262a:	f855 3b04 	ldr.w	r3, [r5], #4
 800262e:	4798      	blx	r3
 8002630:	3601      	adds	r6, #1
 8002632:	e7f2      	b.n	800261a <__libc_init_array+0x1e>
 8002634:	0800269c 	.word	0x0800269c
 8002638:	0800269c 	.word	0x0800269c
 800263c:	0800269c 	.word	0x0800269c
 8002640:	080026a0 	.word	0x080026a0

08002644 <memset>:
 8002644:	4402      	add	r2, r0
 8002646:	4603      	mov	r3, r0
 8002648:	4293      	cmp	r3, r2
 800264a:	d100      	bne.n	800264e <memset+0xa>
 800264c:	4770      	bx	lr
 800264e:	f803 1b01 	strb.w	r1, [r3], #1
 8002652:	e7f9      	b.n	8002648 <memset+0x4>

08002654 <_init>:
 8002654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002656:	bf00      	nop
 8002658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800265a:	bc08      	pop	{r3}
 800265c:	469e      	mov	lr, r3
 800265e:	4770      	bx	lr

08002660 <_fini>:
 8002660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002662:	bf00      	nop
 8002664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002666:	bc08      	pop	{r3}
 8002668:	469e      	mov	lr, r3
 800266a:	4770      	bx	lr
